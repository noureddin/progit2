== Translation Notes

After forking this repository to translate the work, this file is where the notes for coordinating the translation work would go.
Things like standardizing on words and expressions so that the work is consistent or notes on how the contributing process is to be handled.

As a translation maintainer, also feel free to modify or completely rewrite the README file to contain instructions specific to your translation.

For producing the multipage book, I grouped all the front matter (all the "chapters" before the introduction) into a single chapter,
and moved the license to be before the contributions, therefore that chapter became: three prefaces, dedication, license, and contributions.

I still kept the introduction in its own chapter, so that more people would notice it and read it.

=== Interchangeable terms

The English Pro Git book uses some terms interchangeably. Here we standardize them on a single term.

- reference, pointer, handle ⇒ إشارة
- remote, remote server, remote repository (like in §2.5) ⇒ مستودع بعيد (remote repository), [rarely] بعيد (remote)
- paramater, argument ⇒ مُعامِل (ج: معاملات)
- script, hook (in Ch. 8 > Sec. hooks): prefer hook in general (abstract) description, but script in concrete.

See the two appendices for more.

=== Other points

- "You should" in chapters' intro & summary are translated with the indicative "you now know…"
- The conjunction "و" is always attached to the next word. If that word is English or code, us Narrow NBSP (`{ مسر }`, without spaces).
- "[to be or to stand] on a commit" => عند إيداع.
- "[to be or to stand] on a branch" => في فرع.
- After most outputs, "You can see that" => نرى أن.

See the two appendices for more.

=== Editing Pro Git 2

The English Pro Git 2^ed^ book uses AsciiDoc, a powerful lightweight markup language
that were standardized before Markdown was even published. They use AsciiDoctor,
which supports a subset of Markdown syntax, to ease transition.

- https://docs.asciidoctor.org/asciidoc/latest/asciidoc-vs-markdown/[Compare AsciiDoc to Markdown]
- https://docs.asciidoctor.org/asciidoc/latest/syntax-quick-reference/[AsciiDoc Syntax Quick Reference]

The book also splits each paragraph (lines delimited by empty lines) into lines, each of which is a single sentence, to ease translation.

Sometimes, a single source sentence can be better as multiple target sentences, and vice versa.
Just include more sentences on the same line (in the former) or end a line with a comma or semicolon (in the latter).

=== Accompanying Tools

With this repo:

- `editor.py`, a Qt-based editor made specifically for this translation. See its section below.
- `.we g` to `grep` in all the book files for a specific string case-insensitively.
- `.we gg` to `grep` in all the book files for an English string that has a *translated* string, showing both original and translation.

Also check the `D-terms.asc` and `E-arabic-reference.asc` appendices, and `abbr.asc` for the abbreviations (the stuff surrounded by curly braces, like `{ماك}`).

=== Conventions of this Translation

My convention in this translation is to always leave the original translation commented-out
and provide the translation in the line above it (see `ctrl+space` below).
This aids tremendously when the English book receives updates, and also aids in reviewing.

=== Translation Status Icons

For every heading, you can assign a "`status icon`" or change it by pressing F1 in the accompanying `editor.py`. The status show in the file list.

- ➖ (or no status) means the translation has not begun, not even the title is translated.
- ❌ means the translation has begun, even if _only_ the heading has be translated. It means very little has been translated.
- ✋ means the translation is "`initial work-in-progress`", i.e., anywhere from \~5% to \~50%.
- ⏳ means the translation is "`final work-in-progress`", i.e., anywhere from \~50% to \~99%.
- ✨ means the translation is generally complete, but not yet reviewed and approved, and may still need improvements.
- ✅ means the translation is completely finished, i.e., reviewed, proofread, etc.
  This should only be used after approval from all translators.

There is one more status icon that is not accessible with `F1` in the editor, namely:

- ⛲ means this is introduced by the translator, and thus is a "living" chapter, until the book is considered complete.

Note: only the chapters, that are ✨ or ✅ or ⛲, are published. (Check `$DBG` in `.realmake.sh`.)

Note: all emojis are in the Basic Multilingual Plane (ie, each is a single UTF-16 character), for Qt,
and all of them are unambiguously full width, for the terminals.
(Check `.emojis` file for the full list of possible such emojis.)

=== Using the Editor

This repo comes with a special-purpose `editor.py`.
It is just a Qt-based text editor, to have good support for Bidi text (like Gedit but unlike VS Code).

It also includes a built-in builder
  (that calls `make` in a separate thread,
  which calls `.realmake.sh` if needed)
  to build the HTML page of the book for live previewing,

It used to include a built-in http server
  and file watcher to watch any changes in the built HTML page
  of the book and live-reload it in the browser.
  But this was removed because of compatibility issues in Python 3.10.
  Now, setting `PROD=false` in the beginning of `.realmake.sh` file
  sets up a very simple-minded live-reload feature
  that can work with any server and any host.
  You can then just start a simple server in the `dist` directory, like:
[source,console]
----
$ cd dist
$ python3 -m http.server 1122
----

The editor has these features:

* home-grown regex-based AsciiDoc syntax highlighting (was WYSIWYG for inline formatting,
  but I disabled concealing the formatting markers because I needed more visual cues when I'm editing)
  (should at some point be replaced with something better)

* support for light and dark colorschemes (dark is the default; both schemes are based on gruvbox)

* closing the editor or going to another file triggers saving the file and rebuilding the book (so does pressing `Esc` or `ctrl-s`)

* filelist sidepane which shows the translation status of every file
  (according to the icons explained above) and with the correct order and with short names

* a count in the window title of how many translated vs non-translated words
  (uses the `.we a` and `.we t` scripts in the same directory,
  which are Frankensteinian Bash scripts that call `perl`, `grep`, `sed`, and `wc` --
  I may improve the situation once I regain the ability to read the ancient hieroglyphs).

* a special "`prepare for translation`" operation, triggered by `ctrl+space` on any non-yet-translated line (**the most important shortcut!**):
  It comments out the current line, and opens a new empty line above it.
  If the line starts with indentation or special characters (headings, captions, list items, images), that prefix is copied.
  If the lines ends in index items (something between triple parens), that is copied too.
  The cursor is placed on the newly created line, after any prefix and before any suffix,
  and the commented out line (that will be translated) is ensured to be fully visible.
  This is a single operation that can be atomically undone by pressing `ctrl+z` once.

* support for translation status icons: shown in the filelist sidepane, and modifiable by `F1` (**the second most important shortcut!**)

* a filter on load and another on save to show NBSP and Narrow NBSP as `{ مس }` and `{ مسر }` (without spaces)
  but store them as Unicode spaces,
  otherwise AsciiDoc would not consider them spaces for the purpose of formatting
  (they are very common before an inline code span,
  which would be delimited by single backticks in the normal case,
  but if they are not surrounded by spaces
  (like if preceded by an abbrevation (regardless the fact that it expands to a kind of space))
  they need to be delimited by double backticks instead.)

* special keyboard shortcuts:
** `F1`: on a heading line, changes its translation status (see "`Translation Status Icons`" above).
** `ctrl+space`: prepares the current line for translation (see above).
** `ctrl+shift+space`: like the above but copies the entire line instead.
** `ctrl+shift+f`: hides/shows the filelist sidepane.
** `ctrl+6`: goes to the last edited file (in the same session).

* general keyboard shortcuts:
** `Esc` or `ctrl-s`: saves the currently open file and rebuilds the book
** `ctrl+/`: comments/uncomments the current line
** `ctrl+f`: shows/hides the find dialog, which searches from the cursor position in the current file only.
** `F3`: finds the next occurrence of the search.
** `shift+F3`: finds the previous occurrence of the search.
** `ctrl++` (ie `ctrl+shift+=`): makes the font bigger.
** `ctrl+-`: makes the font smaller.
** `ctrl+PageUp`: goes to the previous file (cycles at the beginning).
** `ctrl+PageDown`: goes to the next file (cycles at the end).

* undocumented keyboard shortcuts (if you're curious, you can search the source for `QShortcut`):
** `F8`
** `ctrl+o`
** `ctrl+shift+o`
** `ctrl+up`
** `ctrl+down`
** `F10`

Note: all of these shortcuts work when the editor itself is focused, not the side pane.

Running `editor.py` by itself uses the dark colorscheme.
Providing 'light' as an argument anywhere makes it use the light colorscheme instead.
You can provide a filepath of one of the files it has in the side pane to open it on start.

=== Translation Status

Before pushing changes, I will keep the `status.json` file updated to indicate the rough percentage complete each file is. But I primarily rely on the emoji icons explained above.
