[[E-arabic-reference]]
[appendix]
== ⛲ المصطلحات والمفاهيم باللغتين

يضم هذا الملحق أوامر جيت مثل الملحق الثالث، ولكنه أيضا يضم مفاهيم جيت وأنظمة إدارة النسخ الموزعة، ويتناولها جميعًا بشرح موجز مع توضيح أسمائها باللغتين وأسباب هذه الأسماء، ويضم ملاحظات متفرقة للمترجم.

=== الإيداع والسحب

الغرض الأساسي في أنظمة إدارة النسخ هو أنك تحفظ النسخة الحالية من مجلد العمل كما تحفظ الأموال في المصرف، ثم عندما تحتاجها تأخذها منه. ولكنك لا تأخذها للأبد، بل «تستلفها» مؤقتا مثلما تستلف كتبا من المكتبة العامة.

فعملية السحب هذه لها اسم واحد شائع: check out.
أما عملية الحفظ فلها اسمان في الأنظمة المختلفة: check in أو commit.

انظر أيضا: https://stackoverflow.com/q/12510574

وانظر: https://www.noureddin.dev/ysmu/link/commit

[[_terms_push_pull_fetch]]
=== الدفع والجذب والاستحضار

لأن «سحب» محجوز لـcheck out، فكان علينا الإتيان بلفظ آخر ليعني pull.

العملية المرافقة لـpull هي push، وكلاهما يعرفان بالدفع والجذب، فكان هذان اللفظان مناسبين.

ولكن عملية الجذب pull عمليتان في الحقيقة، أولهما fetch، لإحضار الكائنات (objects) والإشارات (refs) من المستودع البعيد. فكان اللفظ المناسب لها تنزيل أو إحضار، فاخترت استحضار (طلب الحضور) لتمييزها عن الكلمة العامة «إحضار».

[[_terms_reset_restore_revert]]
=== الإرجاع والاستعادة والنقض

يفرّق جيت بين الإرجاع reset، والاستعادة restore، والنقض revert، وطبعا إعادة التأسيس rebase.

وقد حاولت أن أجعل أسماءهم العربية متباعدة، تقليلا للخلط الأكيد بينهم.

والخلط بينهم وارد حتى إن دليل ("`manpage`") جت نفسه يخصص فصلا للفرق بينهم، ثم يشير إلى هذا الفصل في دليل كل أمر منهم. فنجد في دليل `git` فصلا بعنوان "`Reset, restore and revert`"، هذه ترجمته:

> في جت ثلاثة أوامر بأسماء متشابهة: الإرجاع `git reset`، والاستعادة `git restore`، والنقض `git revert`.
// > There are three commands with similar names: git reset, git restore and git revert.
>
> • أمر النقض `git revert` يصنع إيداعا جديدا ينقض (يعكس) فيه التعديلات التي قدّمتها إيداعات سابقة معينة.
// > • git-revert(1) is about making a new commit that reverts the changes made by other commits.
>
> • أمر الاستعادة `git restore` يستعيد ملفات في شجرة العمل من الفهرس (منطقة التأهيل) أو من إيداع سابق. هذا الأمر لا يحدّث الفرع الحالي. يمكن استعمال هذا الأمر كذلك لاستعادة ملفات في الدليل من إيداع سابق.
// > • git-restore(1) is about restoring files in the working tree from either the index or another commit. This command does not update your branch. The command can also be used to restore files in the index from another commit.
>
> • أمر الإرجاع `git reset` يحدّث الفرع الحالي بتحريك رأس الفرع ليضيف أو يزيل إيداعات منه. هذه العملية تغيّر تاريخ الإيداعات.
// > • git-reset(1) is about updating your branch, moving the tip in order to add or remove commits from the branch. This operation changes the commit history.
> +
> يمكن استعمال أمر الإرجاع `git reset` لاستعادة الفهرس، وهو استعمال يشترك فيه مع أمر الاستعادة `git restore`.
// >   git reset can also be used to restore the index, overlapping with git restore.

ثم يذكر هذا في دليل أمر النقض `git revert` :

> لاحظ: يُستعمل أمر النقض `git revert` لتسجيل إيداعات جديدة تنقض (تعكس) تأثير إيداعات سابقة معينة (غالبا إيداعات خاطئة).
// > Note: git revert is used to record some new commits to reverse the effect of some earlier commits (often only a faulty one).
> إن أردت نبذ التعديلات غير المؤهلة جميعا من مجلد العمل، فانظر أمر الإرجاع `git reset`، تحديدا الخيار `--hard`.
// > If you want to throw away all uncommitted changes in your working directory, you should see git-reset(1), particularly the --hard option.
> إذا أردت استخلاص ملفات معينة من إيداع سابق، فانظر أمر الاستعادة `git restore`، تحديدا الخيار `--source`.
// > If you want to extract specific files as they were in another commit, you should see git-restore(1), specifically the --source option.
> كن حذرا في استعمالك هذين البديلين، فكلاهما يلغي التعديلات غير المؤهلة التي في مجلد عملك.
// > Take care with these alternatives as both will discard uncommitted changes in your working directory.

لم أسمِّ أي أمر منهم باسم «إعادة» خشية خلطه على الناس مع «استعادة»، وكذلك لم أسمِّ أمرًا «تراجع» خشية خلطه مع «إرجاع»، بل آثرت جذرا مختلفا لكلٍ منهم.

[[_terms_commands]]
=== أسماء أوامر جت

نسمي أوامر جت، وخصوصا الأوامر العلوية (انظر <<ch10-git-internals#_plumbing_porcelain>>)، بأسماء عربية، فمثلا أمر `git commit` اسمه أمر الإيداع، وأمر `git branch` اسم أمر التفريع، وهكذا.

وأذكر أسماء الأوامر هنا مع وجودها في الملحق الثالث لسببين: الأول أن الملحق الثالث غير منشور لأنه غير مكتمل بعد (فذلك ما في الجدول الأول)، والآخِر لأن من الأوامر المذكورة في الك‍تاب ما لم يُذكر في الملحق الثالث (بعد)، مثل الأوامر الجديدة كأمر الاستعادة `git restore` وأمر الانتقال `git switch`، ومثل بعض الأوامر السفلية مثل أمر سرد الملفات `git ls-files` وأمر استعراض الملف `git cat-file` (وذلك ما في الجدول الآخِر).

[cols="<,>"]
:===
// BEGIN ARABIC GIT COMMANDS -- DO NOT CHANGE OR REMOVE THIS COMMENT
add  : إضافة
apply  : تطبيق
archive  : ضغط
bisect  : تفتيش
blame  : عتاب
branch  : الفرع
checkout  : سحب
cherry-pick  : اصطفاء
clean  : تنظيف
clone  : استنساخ
commit  : إيداع
config  : تهيئة
describe  : وصف
diff  : الفرق
difftool  : أداة الفرق
fast-import  : استيراد سريع
fetch  : استحضار
format-patch  : تنسيق رقعة
fsck  : فحص نظام الملفات
gc  : جامع المهملات
grep  : بحث
help  : مساعدة
init  : ابتداء
log  : السجل
merge  : دمج
mergetool  : أداة الدمج
mv  : نقل
pull  : جذب
push  : دفع
rebase  : إعادة تأسيس
reflog  : سجل الإشارات
remote  : البعيد
request-pull  : طلب جذب
reset  : استعادة
revert  : إرجاع
rm  : إزالة
send-email  : أرسل بريد
shortlog  : السجل الموجز
show  : إظهار
stash  : تخبئة
status  : الحالة
submodule  : وحدة فرعية
tag  : وسم
// END ARABIC GIT COMMANDS -- DO NOT CHANGE OR REMOVE THIS COMMENT
:===

من الأوامر غير المذكورة في الملحق الثالث:

[cols="<,>"]
:===
cat-file  : استعراض الملف
daemon  : العفريت
ls-files  : سرد الملفات
ls-remote  : سرد البُعداء
ls-tree  : سرد الأشجار
restore  : استعادة
switch  : انتقال
:===


[[_terms_reference]]
=== إشارة الرأس وإشارات الكائنات

يقول جيت أحيانا pointer وأحيانا ref أو reference، لكن خلافا لبعض لغات البرمجة، https://github.com/progit/progit2/issues/1460[هذه جميعا تعني الشيء نفسه]، وهو الشيء الذي «يُشير» إلى كائن أو شيء آخر.

عند التحدث عن الفأرة مثلا، فكلمة «مؤشر» (pointer أو cursor) صحيحة لأنها اسم الفاعل من الفعل «يؤشر» أيْ ذلك الشيء الذي «يضع إشارة». أما عند التحدث عن البرمجة، فإن pointer *لا تعني* «مؤشر»، لإن الـpointer لا يضع إشارة على شيء، بل يشير إلى شيء، فاللفظ الصحيح هو «مُشِير». وهو اللفظ المستخدم في لغة كلمات.

أما كلمة reference، ففي سياق الكتب تعني الك‍تاب الذي نرجع إليه للبحث عن معلومة، فترجمته إلى «مرجع» عندئذٍ صحيحة. لكن في سياق البرمجة، الـreference لا يَرجع إلى شيء، بل يُرجعنا نحن أو يُحيلنا إلى شيء (refer to)، فترجمته إلى «مُحيل» أفضل.

ولكن المشير والمحيل اسمان لمسمى واحد في جت، فالأفضل توحيد الاسم.

استعملت «مشيرًا» في البدء، ثم وجدت أن الأقرب في الاستعمال هو «إشارة»، فهي ما استعملت في الك‍تاب.

ولمنع اللبس، أقول «إشارة الرأس» غالب الوقت للفظ HEAD.

ولكن جت يفرق بين head وHEAD؛ انظر `man gitglossary` أو https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddefhashahash[على الشابكة].

[[_terms_tracking]]
=== التعقب والمتابعة: tracking

يستعمل الفعل tracking في المشاريع البرمجية استعمالين رئيسيين، ويترجم بلفظ مختلف حسب استعماله:

1. «المتابعة»، وهي أن يتابع الإنسانُ العللَ (bugs) والمسائل (issues) والأهداف (milestones) وغير ذلك. ومنها متابع العلل (bug tracker) أو متابع المسائل (issue tracker).

2. «التعقب»، وهي (١) أن يتعقب جت ملفًا، أي أن يتابع تغييراته ويرصدها ويسجلها، (٢) وأن تجعل جت يتعقب فرعًا بعيدًا، أن أي يجعل جت فرعا محليا (يسمى «فرعا متعقِّبا») أو إشارة محلية (تسمى «فرعا متعقِّبا لبعيد») تتابع التغييرات الحادثة في الفرع البعيد. (انظر الفصل التالي لتفصيل هذا الأمر.)


[[_terms_tracking_branches]]
=== الفروع البعيدة والفروع المتعقِّبة لبعيد والفروع المتعقِّبة

يفرق جت وك‍تاب احترف جت بين الفروع المتعقبة (tracking branch) والفروع المتعقبة لبعيد (remote-tracking branch)؛ انظر <<ch03-git-branching#_tracking_branches>>.

لكن لا يبدو أن الك‍تاب يفرق بين الفروع البعيدة (remote branch) والفروع المتعقبة لبعيد (remote-tracking branch)، إلا قليلا، فكلاهما نظرتان للشيء نفسه: الفرع `origin/master` مثلا هو الفرع الرئيس في المستودع البعيد، فهو في مستودعي المحلي فرع متعقب لبعيد، لكنه يشير إلى الفرع البعيد نفسه. فيجوز قول «الفرع البعيد» للفرع المتعقب لبعيد من باب المجاز المرسل أغلب الوقت. وهذا استعمال الك‍تاب إلا قليلا. (من أمثلة هذا القليل: <<ch03-git-branching#_delete_branches>>.)

[[_terms_read_write]]
=== إذنا القراءة والتحرير

أقترح تعريب "`read-only`" بـ«القراءة»، و "`read/write`" بـ«التحرير»، والاسم "`access`" المرتبط بهما غالبا بـ«إذن» (وجمعه «أذون»).

واخترت هذين الفعلين لأنهما متعديان بغير حرف جر، فلا نحتاج أن نقول «الك‍تابة على/إلى/في المستودع»، بل نقول «تحرير المستودع» بغير وسيط. ومثله في القراءة.

و«التحرير» أقوى من «الك‍تابة» المجردة، فهو يعني التعديل والتقويم، وحديثا يشمل المراجعة والإنشاء. فمعناه واضح فيه أنه "`read/write`"، فغالبا لا يوجد إذن «ك‍تابة فقط»، فالأنسب كلمة تدل على القراءة والك‍تابة معا.

وقد استعملت وقتًا قصيرا كلمة «اطلاع» تعريبًا لـ "`read`"، لكني عدلت عنها إلى «قراءة» لحاجة «اطلاع» إلى حرف جر، وعدم وجود منفعة من «اطلاع» (مثل شمول معنى «تحرير»، فصار أنفع من «ك‍تابة»)، ولشهرة «قراءة».

[[_terms_code]]
=== تعريب كلمة كود

لهذه الكلمة معانٍ كثيرة في غير البرمجة، منها رمز ورقم ومعيار وغيرهم.

ومعناها في البرمجة شديد الاتساع ويستعصي على النقل إلى لغة أخرى،
فأبى أكثر الناس إلا أن يأخذوا هذه الكلمة بكل معانيها البرمجية.
فمنهم من نقلها صوتيا («كود») ومنهم من أتى بكلمة من جذر الكلمة الإنجليزية الأصلية («رمز») في لغتهم،
فقال السوريون «رِماز» (على وزن «ك‍تاب») وقال الصينيون 代码 (رمز تبديل(؟)).

ولا أرى في هذا خيرا كثيرا، فهذا لفظ أعجمي في أصله ومعناه واستعماله،
وليس فيه من العربية إلا حرفه.

ففي هذا الك‍تاب نحاول تعريب هذه الكلمة في مواضعها المختلفة تعريبا يفهمه العربي بغير شرح وبغير معرفة الاستعمال الإنجليزي وبغير معرفة الاصطلاح السوري.

وصعوبة الأمر أن هذه الكلمة شديدة العموم، فنحتاج إلى تخصيصها في كل سياق قبل تعريبها،
فغالبا نعتبرها صفة (=«برمجية») لاسم محذوف، ونرد هذا الاسم عند الترجمة.

فهذه أشهر تعريباتها حسب السياق:

* «مصدر برمجي» (= "`source code`") أو «مصدر» فحسب ←
** «قاعدة المصدر» = "`code base`" (أو «مصدر برمجي» أيضا)
* «مشروع برمجي» (مثل العبارة: "`hosting your code`" وما في معناها)
* «برمجيات» ←
** «محرر برمجيات» = "`code editor`"
* «تعليمات برمجية» ←
** «ثغرة تنفيذ تعليمات برمجية عشوائية» = "`arbitrary code execution vulnerability`"
** «تعليمات برمجية خبيثة» = "`malicious code`"

ولم نفرغ من هذه الكلمة بعد.

[[_terms_general_tips]]
=== إصلاحات لغوية عامة ونصائح أسلوبية

بعض هذه النصائح إصلاحات حقيقية، وبعضها ليست سوى اقتراحات لاتساق الترجمة.

- قل «يستعمل» أغلب الوقت، ولا تقل «يستخدم» إلا للضرورة، فالاستخدام يكون للعاقل. (وتبقى "`user`" «مستخدما».)
  ويستثنى من ذلك ما يقدّم خدمة، فنستخدم جت‌هب، ونستخدم الخواديم، ونستخدم جت نفسه تشبيهًا له بالعاقل. ولا بأس من استعمال «استعمال» مع أيٍّ منهم.
  ولكن قلل من كليهما، لأن [.line-through]#استعمال# هذا الفعل يكثر في الإنجليزية المعاصرة بغير حاجة. ومثله الفعل «يستطيع».


- لا تقل «نفس الشيء» وقل «الشيء نفسه». (أو «شيء واحد» أو «الشيء الواحد» عند إرادة الإبهام، مثل «يمكنكم الآن التعاون في مشروع واحد» أو «ستبيت كل مشاريعك البرمجية على جهاز واحد».)

- لا تقل «بسيط» إلا عندما تعني «غير معقد»، وقلل منها عموما.

- قلل من «فقط» واستعمل الاستثناء أو «إنما» متى أمكن.

- قل «يبقى» و«يظل» و«لا يزال» و«ما زال»، لكن لا تقل «لا زال»، فاستعمال «لا» مع الماضي يعني الدعاء، مثل «لا أراك الله مكروها».

- لا تقل «استبدل» لشيوع الخطأ فيه، وقل «أبدل القديم بالجديد»، فلا خلاف فيه، أو «أبدل من القديم الجديدَ»، أو ائت بفعل من جذر آخر مثل «يحل محل». (الصحاح في مادة بدل: «والأَبْدالُ: قومٌ من الصالحين لا تخلُو الدنيا منهم، إذا مات واحدٌ أَبْدَلَ الله مكانَهُ بآخر.»)

- لا تستعمل حرف الجر الكاف إلا للتشبيه، وعلامة ذلك استقامة المعنى وثبوته عندما تبدلها بـ«مثل»، وإلا فغيّر تركيب الجملة واستعمل شيئا غير الجر بالكاف، كالتمييز والحال والمفعول به.

- لا تقل «بداية»، فهي عامية، وفصيحها «بَداءة» لكنه غير مألوف، فقل «بَدء» أو «ابتداء» أو «أول». (قال فيها المصباح المنير: «و"البِدَايَةُ" بالياء مكان الهمز عامي نصّ عليه ابن بري وجماعة». وقال العباب الزاخز: «وقَوْلُ العامَّةِ: البِدايَةُ - مؤازاةً للنِّهاية: لَحْنٌ، ولا تُقاس على الغَدَايا والعَشايا؛ فإنَّها مَسْموعةٌ بخلاف البِداية».)

- لا تقل «تحقّق من [شيء _أو_ فِعل _أو_ أن تفعل]»؛ قل «تحقّق …» بغير «من»، أو قل «تفقّد …».

- لا تقل «كل ما عليك هو»؛ إنما قل «ليس عليك سوى/إلا/غير».

- لا تقل «لا داعٍ لـ…»، بل قل «لا داعيَ إلى …»، بالياء وبـ«إلى».

- لا تبدأ جملة فرعية بـ«مما»، فهي غالبا خاطئة. وعلامة ذلك اختلال المعنى إذا وضعت مكانها «مِن الذي» أو اسم موصول آخر. أمثلة:
[tight]
** «يتيح جت أيضا خيارا للحالة الموجزة، مما يتيح لك رؤية تعديلاتك بإيجاز» ← «…، لترى …»
** «إضافة [شيء] تجعل جت [يفعل شيئا]، مما يتيح لك تخطي مرحلة الإضافة» ← «…، لتتخطى …»
** «لأن طريقة التفريع في جت خفيفة […]، مما يجعل إنشاء فرع …» ← «…، فتجعل …»
** «ثم تستطيع حذف الفرعين […]، مما يجعل تاريخك …» ← «…، فيصير تاريخك …»
** «تذكر أنه غير مستوثَق، مما يعني أن أي شيء تتيحه …» ← «…، فأي شيء …»
** «وقتئذٍ ستبيت كل مشاريعك البرمجية على جهاز واحد، مما يزيد من احتمال فقد البيانات فقدا كارثيا.» ← «…، وهذا يُزيد احتمال …»
** «لم تقترب حاله مما صار عليه اليوم» ← صحيحة
** «فبدلا مما رأينا، …» ← صحيحة

[[_terms_mz]]
- «مِيزة»/«مِيزات» تعني الاختلاف (التمايز، وفصل الشيء من الشيء) ولا تعني التفضيل. فإذا أردت معنى الفضل (التمام والكمال)، فقل «مَزِيَّة»/«مَزَايَا». فترجم "`feature`" بـ«ميزة» وترجم "`advantage`" بـ«مزية».

- قدّم الفعل على فاعله ما لم يسبب ذلك خلطا على القارئ.

- انظر https://www.noureddin.dev/ysmu/notes/[موارد معجم يسمو]، وبالأخص ك‍تاب https://web.archive.org/web/20100914143217/http://www.reefnet.gov.sy/Arabic_Proficiency/Arabic_Proficiency_Index.htm[نحو إتقان الك‍تابة باللغة العربية].
