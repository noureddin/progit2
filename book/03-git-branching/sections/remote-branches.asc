[[_remote_branches]]
=== ✨ الفروع البعيدة
// === Remote Branches

(((branches, remote)))(((references, remote)))
الإشارات البعيدة هي تلك الإشارات الموجودة في مستودعاتك البعيدة، كالفروع والوسوم.
// Remote references are references (pointers) in your remote repositories, including branches, tags, and so on.
يمكنك سرد جميع الإشارات البعيدة بالأمر `git ls-remote <البعيد>`، أو سرد الفروع البعيدة ومعلوماتها بالأمر `git remote show <البعيد>` (حيث `<البعيد>` هو الاسم المختصر المستودع البعيد).
// You can get a full list of remote references explicitly with `git ls-remote <remote>`, or `git remote show <remote>` for remote branches as well as more information.
ولكن الشائع هو الانتفاع بـ«الفروع المتعقِّبة للبعيد».
// Nevertheless, a more common way is to take advantage of remote-tracking branches.

الفرع المتعقِّب لبعيد هو إشارة إلى حالة فرع بعيد.
// Remote-tracking branches are references to the state of remote branches.
أي أنه إشارة محلية (أي في المستودع الذي على حاسوبك) لكن لا يمكنك تحريكها؛ إن جت يحركها لك عند الاتصال مع الخادوم، حتى يضمن أنها دائما تمثل حالة المستودع البعيد.
// They're local references that you can't move; Git moves them for you whenever you do any network communication, to make sure they accurately represent the state of the remote repository.
اعتبرها إشارات مرجعية مثل علامات المتصفح، لتذكرك أين كانت فروع مستودعك البعيد عندما تواصلت معها آخر مرة.
// Think of them as bookmarks, to remind you where the branches in your remote repositories were the last time you connected to them.

يكون شكل أسماء الفروع المتعقِّبة للبعيد `<remote>/<branch>` (أيْ اسم المستودع البعيد ثم شرطة مائلة ثم اسم الفرع).
// Remote-tracking branch names take the form `<remote>/<branch>`.
فمثلا إذا أردت رؤية كيف بدا فرع `master` في مستودعك البعيد `origin` عندما اتصلت به آخر مرة، فانتقل إلى فرع `origin/master`.
// For instance, if you wanted to see what the `master` branch on your `origin` remote looked like as of the last time you communicated with it, you would check the `origin/master` branch.
وإذا كنت تعمل مع زميل على مسألةٍ ودفَعَ فرع `iss53` إلى المستودع البعيد، فقد يكون لديك فرع محلي بالاسم نفسه، ولكن الفرع الذي على الخادوم سيمثله عندك الفرع المتعقِّب للبعيد الذي اسمه `origin/iss53`.
// If you were working on an issue with a partner and they pushed up an `iss53` branch, you might have your own local `iss53` branch, but the branch on the server would be represented by the remote-tracking branch `origin/iss53`.

لعل الكلام غامض، فدعنا ننظر إلى مثال.
// This may be a bit confusing, so let's look at an example.
لنقُل إن لديك خادوم جت على شبكتك عنوانه `git.ourcompany.com`.
// Let's say you have a Git server on your network at `git.ourcompany.com`.
إذا استنسخته، فإن أمر الاستنساخ سيسميه `origin` لك، ويجذب كل ما فيه من بيانات، وينشئ إشارة إلى ما يشير إليه فرع `master` عليه ويسميه `origin/master` محليا.
// If you clone from this, Git's `clone` command automatically names it `origin` for you, pulls down all its data, creates a pointer to where its `master` branch is, and names it `origin/master` locally.
وسيعطيك جت أيضا فرع `master` محلي خاص بك بادئا من المكان نفسه الذي فيه فرع `master` الخاص بالأصل، حتى يتسنّى لك البدء بالعمل.
// Git also gives you your own local `master` branch starting at the same place as origin's `master` branch, so you have something to work from.

[NOTE]
.الاسم "`origin`" ليس مميزا
// ."`origin`" is not special
====
تماما مثلما أن اسم الفرع الرئيس "`master`" لا يحمل أي معنى خاص في جت، فكذلك اسم المستودع البعيد الأصل "`origin`".
// Just like the branch name "`master`" does not have any special meaning in Git, neither does "`origin`".
فإن "`master`" هو الاسم المبدئي لأول فرع ينشئه جت عندما تستخدم `git init` (وهو السبب الوحيد لشيوعه)، وكذلك "`origin`" هو الاسم المبدئي للمستودع البعيد عندما تستخدم `git clone`.
// While "`master`" is the default name for a starting branch when you run `git init` which is the only reason it's widely used, "`origin`" is the default name for a remote when you run `git clone`.
فإذا استخدمت `git clone -o yalla` مثلا، فإنك ستجد أن `yalla/master` هو اسم الفرع البعيد المبدئي.(((origin)))
// If you run `git clone -o booyah` instead, then you will have `booyah/master` as your default remote branch.(((origin)))
====

.المستودعان البعيد والمحلي بعد الاستنساخ
// .Server and local repositories after cloning
image::images/remote-branches-1.png[المستودعان البعيد والمحلي بعد الاستنساخ]

إذا عملت في فرعك الرئيس المحلي، ودفع أحد إلى الفرع الرئيس في المستودع البعيد، فإن تاريخَي الفرعين سيتقدمان مفترقين.
// If you do some work on your local `master` branch, and, in the meantime, someone else pushes to `git.ourcompany.com` and updates its `master` branch, then your histories move forward differently.
وإن تجنبت الاتصال مع مستودعك البعيد على الخادوم الأصل، فلن تتحرك إشارة `origin/master` التي لديك.
// Also, as long as you stay out of contact with your `origin` server, your `origin/master` pointer doesn't move.

.قد يفترق العمل المحلي والبعيد
// .Local and remote work can diverge
image::images/remote-branches-2.png[قد يفترق العمل المحلي والبعيد]

لمزامنة عملك مع مستودع بعيد، نفّذ الأمر `git fetch <البعيد>` (في حالتنا `git fetch origin`).
// To synchronize your work with a given remote, you run a `git fetch <remote>` command (in our case, `git fetch origin`).
فهذا الأمر يبحث عن المستودع المسمى "`origin`" (في حالتنا `git.ourcompany.com`)، ويستحضر البيانات التي عليه وليست عندك بعد، ويحدّث قاعدة بياناتك المحلية، ويحرك إشارة `origin/master` الخاص بك لتشير إلى موقعها الجديد المحدَّث.
// This command looks up which server "`origin`" is (in this case, it's `git.ourcompany.com`), fetches any data from it that you don't yet have, and updates your local database, moving your `origin/master` pointer to its new, more up-to-date position.

.يحدّث أمر الاستحضار `git fetch` فروعك المتعقِّبة للبعيد
// .`git fetch` updates your remote-tracking branches
image::images/remote-branches-3.png[يحدّث أمر الاستحضار `git fetch` فروعك المتعقِّبة للبعيد]

لتمثيل وجود خواديم بعيدة عديدة ولإيضاح منظر الفروع المتعقِّبة لهذه المستودعات البعيدة، لنقُل إن لديك خادوم جت داخلي آخر، والذي لا يستخدمه إلا فريق واحد من أجل التطوير،
// To demonstrate having multiple remote servers and what remote branches for those remote projects look like, let's assume you have another internal Git server that is used only for development by one of your sprint teams.
وإن عنوانه هو `git.team1.ourcompany.com`.
// This server is at `git.team1.ourcompany.com`.
يمكنك إضافته إشارةً بعيدة جديدة في مشروعك، بأمر `git remote add` كما رأينا في <<ch02-git-basics-chapter#ch02-git-basics-chapter>>،
// You can add it as a new remote reference to the project you're currently working on by running the `git remote add` command as we covered in <<ch02-git-basics-chapter#ch02-git-basics-chapter>>.
وتسميته `teamone`، والذي يُعتبر اسما مختصرا لرابطه الكامل.
// Name this remote `teamone`, which will be your shortname for that whole URL.

.إضافة إشارة إلى خادوم بعيد آخر
// .Adding another server as a remote
image::images/remote-branches-4.png[إضافة إشارة إلى خادوم بعيد آخر]

والآن، نفّذ أمر `git fetch teamone` لاستحضار كل ما لدى خادوم `teamone` البعيد وليس لديك بعد.
// Now, you can run `git fetch teamone` to fetch everything the remote `teamone` server has that you don't have yet.
ولأن ليس لديه من البيانات إلا جزءًا من التي لدى خادومك الأصلي (`origin`) الآن، فلن يستحضر جت شيئا، ولكنه سيضبط فرعا متعقبا للبعيد يسمى `teamone/master` ليشير إلى الإيداع الذي يشير إليه فرع `master` في مستودع `teamone`.
// Because that server has a subset of the data your `origin` server has right now, Git fetches no data but sets a remote-tracking branch called `teamone/master` to point to the commit that `teamone` has as its `master` branch.

.فرع متعقب للبعيد للفرع `teamone/master`
// .Remote-tracking branch for `teamone/master`
image::images/remote-branches-5.png[فرع متعقب للبعيد للفرع `teamone/master`]

[[_pushing_branches]]
==== الدفع
// ==== Pushing

(((pushing)))
عندما تريد أن تشارك فرعا مع العالَم، فعليك دفعه إلى مستودع بعيد لديك إذن تحريره.
// When you want to share a branch with the world, you need to push it up to a remote to which you have write access.
ففروعك المحلية لا تُزامَن آليًّا إلى المستودعات البعيدة، حتى التي دفعت إليها؛ FIXME عليك دفع الفروع التي تريد مشاركتها بأمر صريح.
// Your local branches aren't automatically synchronized to the remotes you write to -- you have to explicitly push the branches you want to share.
يسمح لك هذا أن تستعمل فروعا خصوصية للأعمال التي لا تريد مشاركتها، وألا تدفع إلا فروع المواضيع التي تريد التعاون عليها.
// That way, you can use private branches for work you don't want to share, and push up only the topic branches you want to collaborate on.

مثلا إذا كان لديك فرعا اسمه `serverfix` وتريد العمل عليه مع الآخرين، يمكنك دفعه بالطريقة نفسها التي دفعت بها فرعك الأول؛
// If you have a branch named `serverfix` that you want to work on with others, you can push it up the same way you pushed your first branch.
نفّذ `git push <remote> <branch>` (أي اسم المستودع البعيد ثم الفرع):(((git commands, push)))
// Run `git push <remote> <branch>`:(((git commands, push)))

[source,console]
----
$ git push origin serverfix
Counting objects: 24, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (15/15), done.
Writing objects: 100% (24/24), 1.91 KiB | 0 bytes/s, done.
Total 24 (delta 2), reused 0 (delta 0)
To https://github.com/schacon/simplegit
 * [new branch]      serverfix -> serverfix
----

هذا اختصار،
// This is a bit of a shortcut.
لأن جت يفك اسم الفرع `serverfix` إلى `refs/heads/serverfix:refs/heads/serverfix`، الذي يعني «ادفع فرعي المحلي `serverfix` إلى المستودع البعيد `origin` لتحدّث فرع `serverfix` عليه».
// Git automatically expands the `serverfix` branchname out to `refs/heads/serverfix:refs/heads/serverfix`, which means, "`Take my `serverfix` local branch and push it to update the remote's `serverfix` branch.`"
سنفصّل شرح جزء `refs/heads/` في <<ch10-git-internals#ch10-git-internals>>، ولكن عامةً يمكنك تركه.
// We'll go over the `refs/heads/` part in detail in <<ch10-git-internals#ch10-git-internals>>, but you can generally leave it off.
كذلك يمكنك تنفيذ `git push origin serverfix:serverfix` الذي يفعل الشيء نفسه؛ إنه يقول: «خذ فرعي المسمى `serverfix` واجعله فرع `serverfix` في المستودع البعيد».
// You can also do `git push origin serverfix:serverfix`, which does the same thing -- it says, "`Take my serverfix and make it the remote's serverfix.`"
هذه الصياغة مفيدة لدفع فرع محلي إلى فرع بعيد باسم مختلف.
// You can use this format to push a local branch into a remote branch that is named differently.
فمثلا إن لم تُرِده أن يسمى `serverfix` في المستودع البعيد، فنفّذ `git push origin serverfix:awesomebranch`، فهذا يدفع فرعك المحلي `serverfix` إلى فرع `awesomebranch` في المستودع البعيد.
// If you didn't want it to be called `serverfix` on the remote, you could instead run `git push origin serverfix:awesomebranch` to push your local `serverfix` branch to the `awesomebranch` branch on the remote project.

[NOTE]
.لا تكتب كلمة مرورك كل مرة
// .Don't type your password every time
====
إذا كنت تستعمل رابط HTTPS للدفع، فإن خادوم جت سيسألك عن اسم مستخدمك وكلمة مرورك للاستيثاق.
// If you're using an HTTPS URL to push over, the Git server will ask you for your username and password for authentication.
المعتاد أن عميل جت سيسألك عن هذا في الطرفية حتى يعرف الخادوم إذا ما كان مسموحا لك بالدفع.
// By default it will prompt you on the terminal for this information so the server can tell if you're allowed to push.

إذا لم تشأ أن تكتب كلمة مرورك في كل مرة تدفع فيها، فعليك إعداد «تذكُّر مؤقت للاستيثاق» ("`credential cache`").
// If you don't want to type it every single time you push, you can set up a "`credential cache`".
أسهل خيار هو جعله في ذاكرة الحاسوب لعدة دقائق، والذي يمكنك إعداده بالأمر `git config --global credential.helper cache`.
// The simplest is just to keep it in memory for a few minutes, which you can easily set up by running `git config --global credential.helper cache`.

لمعلومات أكثر عن خيارات تذكر الاستيثاق المتاحة، انظر <<ch07-git-tools#_credential_caching>>.
// For more information on the various credential caching options available, see <<ch07-git-tools#_credential_caching>>.
====

وفي المرة التالية التي يستحضر أحد زملائك من الخادوم، سيحصل على إشارة إلى حيث يشير فرع `serverfix` على الخادوم؛ سيجدها عنده في الفرع البعيد `origin/serverfix`:
// The next time one of your collaborators fetches from the server, they will get a reference to where the server's version of `serverfix` is under the remote branch `origin/serverfix`:

[source,console]
----
$ git fetch origin
remote: Counting objects: 7, done.
remote: Compressing objects: 100% (2/2), done.
remote: Total 3 (delta 0), reused 3 (delta 0)
Unpacking objects: 100% (3/3), done.
From https://github.com/schacon/simplegit
 * [new branch]      serverfix    -> origin/serverfix
----

من المهم ملاحظة أنك عندما تستحضر، يجلب لك هذا فروعًا جديدة متعقبة للبعيد، أي أنك لا تحصل تلقائيًّا على نسخ محلية منها يمكنك تعديلها.
// It's important to note that when you do a fetch that brings down new remote-tracking branches, you don't automatically have local, editable copies of them.
بلفظ آخر، لا تحصل آليًّا على فرع `serverfix` جديد في هذه الحالة: لم تُعطَ إلا إشارة `origin/serverfix` التي لا يمكنك التعديل فيها.
// In other words, in this case, you don't have a new `serverfix` branch -- you have only an `origin/serverfix` pointer that you can't modify.

لدمج هذا العمل في فرعك الحالي، يمكنك تنفيذ `git merge origin/serverfix`.
// To merge this work into your current working branch, you can run `git merge origin/serverfix`.
وإذا أردت فرع `serverfix` خاصًا بك تستطيع العمل فيه، يمكنك تفريعه من الفرع المتعقب للبعيد:
// If you want your own `serverfix` branch that you can work on, you can base it off your remote-tracking branch:

[source,console]
----
$ git checkout -b serverfix origin/serverfix
Branch serverfix set up to track remote branch serverfix from origin.
Switched to a new branch 'serverfix'
----

يعطيك هذا فرعًا محليًا يمكنك العمل فيه، والذي يبدأ من حيث يقف `origin/serverfix`.
// This gives you a local branch that you can work on that starts where `origin/serverfix` is.

[[_tracking_branches]]
==== تعقب الفروع
// ==== Tracking Branches

(((branches, tracking)))(((branches, upstream)))
إن سحب فرع محلي من فرع متعقب للبعيد ينشئ آليًّا ما يسمى «فرع متعقِّب» (والفرع الذي يتعقبه يسمى «الفرع المنبع»).
// Checking out a local branch from a remote-tracking branch automatically creates what is called a "`tracking branch`" (and the branch it tracks is called an "`upstream branch`").
الفروع المتعقبة هي فروع محلية ذات علاقة مباشرة بفرع بعيد.
// Tracking branches are local branches that have a direct relationship to a remote branch.
فإذا كنت في فرع متعقب وكتبت `git pull`، فسيعرف جت تلقائيا أي مستودع بعيد يستحضر منه وأي فرع يدمج فيه.
// If you're on a tracking branch and type `git pull`, Git automatically knows which server to fetch from and which branch to merge in.

عندما تستنسخ مستودعًا، ينشئ جت فرعًا باسم الفرع المبدئي فيه (مثل `master`) ويجعله يتعقب الفرع المبدئي في المستودع الأصل (`origin/master`).
// When you clone a repository, it generally automatically creates a `master` branch that tracks `origin/master`.
ولكن يمكنك إعداد فروع متعقبة أخرى إذا أردت، لتعقب مستودعات بعيدة أخرى، أو لتعقب فرع غير الرئيس.
// However, you can set up other tracking branches if you wish -- ones that track branches on other remotes, or don't track the `master` branch.
أيسر حالة مثلما رأيتَ آنفًا، عند اتحاد اسم الفرع المحلي والبعيد، أيْ `git checkout -b <branch> <remote>/<branch>`.
// The simple case is the example you just saw, running `git checkout -b <branch> <remote>/<branch>`.
وهذه العملية شائعة بما يكفي أن جت يتيح اختصارها بالخيار `--track`:
// This is a common enough operation that Git provides the `--track` shorthand:

[source,console]
----
$ git checkout --track origin/serverfix
Branch serverfix set up to track remote branch serverfix from origin.
Switched to a new branch 'serverfix'
----

وفي الحقيقة أن هذا شائع جدا حتى إن جت يتيح اختصارا لهذا الاختصار.
// In fact, this is so common that there's even a shortcut for that shortcut.
فإذا كان اسم الفرع الذي تريد سحبه، أولا غير موجود محليًّا بالفعل، وثانيا يطابق تماما اسما في مستودع بعيد واحد، فسينشئ لك جت فرعا متعقِّبا:
// If the branch name you're trying to checkout (a) doesn't exist and (b) exactly matches a name on only one remote, Git will create a tracking branch for you:

[source,console]
----
$ git checkout serverfix
Branch serverfix set up to track remote branch serverfix from origin.
Switched to a new branch 'serverfix'
----

ولإعداد فرع محلي باسم مختلف عن الفرع البعيد، فسهلٌ استعمال الصيغة الأولى مع اسم فرع محلي مختلف:
// To set up a local branch with a different name than the remote branch, you can easily use the first version with a different local branch name:

[source,console]
----
$ git checkout -b sf origin/serverfix
Branch sf set up to track remote branch serverfix from origin.
Switched to a new branch 'sf'
----

الآن، فرعك المحلي `sf` سيجذب آليًّا من `origin/serverfix`.
// Now, your local branch `sf` will automatically pull from `origin/serverfix`.

إذا كان لديك بالفعل فرعا محليا وتريد ضبطه ليجذب من فرع بعيد جذبته للتو، أو تريد تغيير الفرع المنبع الذي تتعقبه، استعمل الخيار `-u` أو `--set-upstream-to` مع أمر التفريع `git branch` لضبطه بأمر صريح في أي وقت.
// If you already have a local branch and want to set it to a remote branch you just pulled down, or want to change the upstream branch you're tracking, you can use the `-u` or `--set-upstream-to` option to `git branch` to explicitly set it at any time.

[source,console]
----
$ git branch -u origin/serverfix
Branch serverfix set up to track remote branch serverfix from origin.
----

[NOTE]
.الاسم المختصر للمنبع
// .Upstream shorthand
====
عندما يكون لديك فرع متعقب مضبوط، يمكنك الإشارة إلى فرعه المنبع بالاختصار `@{upstream}` أو `@{u}`.
// When you have a tracking branch set up, you can reference its upstream branch with the `@{upstream}` or `@{u}` shorthand.
فإذا كنت في `master` وكان يتعقب `origin/master`، يمكنك تنفيذ أمر مثل `git merge @{u}` بدلا من `git merge origin/master` إن أردت.(((@{u})))(((@{upstream})))
// So if you're on the `master` branch and it's tracking `origin/master`, you can say something like `git merge @{u}` instead of `git merge origin/master` if you wish.(((@{u})))(((@{upstream})))
====

لرؤية الفروع المتعقِّبة التي ضبطتها، استعمل الخيار `-vv` مع أمر التفريع `git branch`،
// If you want to see what tracking branches you have set up, you can use the `-vv` option to `git branch`.
ليسرد لك فروعك المحلية مع معلومات مزيدة فيها ما يتعقبه كل فرع وإذا كان فرعك متقدما عنه (`ahead`) أو متأخرا (`behind`) أو كليهما.
// This will list out your local branches with more information including what each branch is tracking and if your local branch is ahead, behind or both.

[source,console]
----
$ git branch -vv
  iss53     7e424c3 [origin/iss53: ahead 2] Add forgotten brackets
  master    1ae2a45 [origin/master] Deploy index fix
* serverfix f8674d9 [teamone/server-fix-good: ahead 3, behind 1] This should do it
  testing   5ea463a Try something new
----

فنرى هنا أن فرع `iss53` يتعقب `origin/iss53` وأنه «متقدم» (`ahead`) باثنين، أي أن لدينا إيداعين محليين ولم ندفعهما إلى الخادوم بعد.
// So here we can see that our `iss53` branch is tracking `origin/iss53` and is "`ahead`" by two, meaning that we have two commits locally that are not pushed to the server.
ونرى أيضا أن فرع `master` يتعقب `origin/master` وأنه محدَّث.
// We can also see that our `master` branch is tracking `origin/master` and is up to date.
ثم نرى بعدهما أن فرع `serverfix` يتعقب فرع `server-fix-good` على خادوم `teamone` وأنه متقدم عنه بثلاثة ومتأخر بواحد، أي أن لدى الخادوم إيداعا لم ندمجه في فرعنا بعد، وأن لدينا ثلاثة إيداعات محلية لم ندفعها إليه.
// Next we can see that our `serverfix` branch is tracking the `server-fix-good` branch on our `teamone` server and is ahead by three and behind by one, meaning that there is one commit on the server we haven't merged in yet and three commits locally that we haven't pushed.
ثم نرى في النهاية أن فرع `testing` لا يتعقب أي فرع بعيد.
// Finally we can see that our `testing` branch is not tracking any remote branch.

مهم ملاحظة أن هذه الأعداد ليست إلا منذ آخر استحضار (`fetch`) من كل خادوم نتعقبه.
// It's important to note that these numbers are only since the last time you fetched from each server.
فلا يحاول هذا الأمر الاتصال بالخواديم؛ إنما يخبرك بما يحفظه على حاسوبك عما فيها.
// This command does not reach out to the servers, it's telling you about what it has cached from these servers locally.
فإذا أردت من أعداد التقدم والتأخر أن تكون أحدث ما يكون، فعليك الاستحضار من جميع خواديمك البعيدة قبل تنفيذ هذا الأمر مباشرةً.
// If you want totally up to date ahead and behind numbers, you'll need to fetch from all your remotes right before running this.
ويمكنك فعل ذلك هكذا:
// You could do that like this:

[source,console]
----
$ git fetch --all; git branch -vv
----

==== الجذب
// ==== Pulling

(((pulling)))
نعلم أن أمر الاستحضار `git fetch` يستحضر التعديلات التي في المستودع البعيد وليست لديك بعد، ولكنه لا يعدّل مجلد عملك إطلاقا؛
// While the `git fetch` command will fetch all the changes on the server that you don't have yet, it will not modify your working directory at all.
إنما يجلب البيانات لك ويتركك تدمجها بنفسك.
// It will simply get the data for you and let you merge it yourself.
ولكن لدى جت أمر يسمى أمر الجذب `git pull`، وهذا الأمر عمليًّا يكافئ استحضارًا `git fetch` متبوعًا مباشرةً بدمج `git merge`، في معظم الحالات.
// However, there is a command called `git pull` which is essentially a `git fetch` immediately followed by a `git merge` in most cases.
فإذا كان لديك فرع متعقِّب مضبوط كما في الفصل السابق، إما بضبطه صراحةً وإما بأن يضبطه لك أمر الاستنساخ `git clone` أو أمر السحب `git checkout`، فإن أمر الجذب `git pull` سينظر أيّ مستودع وأيّ فرع يتعقبهما فرعك الحالي، ويستحضر ما في المستودع البعيد ويحاول دمجه في فرعك.
// If you have a tracking branch set up as demonstrated in the last section, either by explicitly setting it or by having it created for you by the `clone` or `checkout` commands, `git pull` will look up what server and branch your current branch is tracking, fetch from that server and then try to merge in that remote branch.

الأفضل عمومًا هو الاستخدام الصريح لأمرَي الاستحضار `fetch` والدمج `merge`، فالسحر الذي يقوم به أمر الجذب كثيرًا ما يكون مُلغِزًا.
// Generally it's better to simply use the `fetch` and `merge` commands explicitly as the magic of `git pull` can often be confusing.

[[_delete_branches]]
==== حذف فروع بعيدة
// ==== Deleting Remote Branches

(((branches, deleting remote)))
لنقُل إنك قضيت ما تريد من فرع بعيد، مثلا انتهيت أنت وزملاؤك من إضافة ميزة جديدة ودمجتموها في الفرع الرئيس.
// Suppose you're done with a remote branch -- say you and your collaborators are finished with a feature and have merged it into your remote's `master` branch (or whatever branch your stable codeline is in).
يمكنك حذف فرع بعيد بالخيار `--delete` مع أمر الدفع `git push`.
// You can delete a remote branch using the `--delete` option to `git push`.
فإذا أردت حذف فرع `serverfix` من الخادوم، يمكنك تنفيذ الأمر التالي:
// If you want to delete your `serverfix` branch from the server, you run the following:

[source,console]
----
$ git push origin --delete serverfix
To https://github.com/schacon/simplegit
 - [deleted]         serverfix
----

لا يفعل هذا الأمر سوى أنه يحذف الإشارة من على الخادوم.
// Basically all this does is to remove the pointer from the server.
ولكن خواديم جت عمومًا تبقى البيانات موجودة وقتًا، حتى يعمل جامع المهملات، مما يعني أنك إذا حذفته بالخطأ، فغالبًا ستستطيع استعادته بسَهولة.
// The Git server will generally keep the data there for a while until a garbage collection runs, so if it was accidentally deleted, it's often easy to recover.
