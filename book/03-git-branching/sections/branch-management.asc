[[_branch_management]]
=== ✨ إدارة الفروع
// === Branch Management

(((branches, managing)))
الآن وقد أنشأت فروعا ودمجتها وحذفتها، لنرَ أدوات إدارة فروع ستفيدك عندما تشرع في استعمال الفروع طوال الوقت.
// Now that you've created, merged, and deleted some branches, let's look at some branch-management tools that will come in handy when you begin using branches all the time.

ليس أمر التفريع `git branch` لإنشاء فروع وحذفها فحسب.(((git commands, branch)))
// The `git branch` command does more than just create and delete branches.(((git commands, branch)))
فإذا نفّذته بلا مُعامِلات، سيسرد لك فروعك الحالية:
// If you run it with no arguments, you get a simple listing of your current branches:

[source,console]
----
$ git branch
  iss53
* master
  testing
----

لاحظ مِحرف النجمة `*` أمام فرع `master`؛ إنه يعني أن هذا الفرع هو الفرع المسحوب حاليا (أي أنه الفرع الذي تشير إليه إشارة الرأس `HEAD`).
// Notice the `*` character that prefixes the `master` branch: it indicates the branch that you currently have checked out (i.e., the branch that `HEAD` points to).
يعني هذا أنك إذا أودعت الآن، فإن فرع `master` سيتقدم إلى الأمام بعملك الجديد.
// This means that if you commit at this point, the `master` branch will be moved forward with your new work.
لرؤية آخر إيداع في كل فرع، نفّذ `git branch -v`:
// To see the last commit on each branch, you can run `git branch -v`:

[source,console]
----
$ git branch -v
  iss53   93b412c Fix javascript issue
* master  7a98805 Merge branch 'iss53'
  testing 782fd34 Add scott to the author list in the readme
----

والخياران المفيدان `--merged` («مدموج») و `--no-merged` («غير مدموج») يصفّيان هذه القائمة فلا ترى إلا الفروع التي دمجتها أو التي لم تدمجها في الفرع الذي تقف فيه.
// The useful `--merged` and `--no-merged` options can filter this list to branches that you have or have not yet merged into the branch you're currently on.
فللفروع المدموجة في الفرع الحالي، نفّذ `git branch --merged`:
// To see which branches are already merged into the branch you're on, you can run `git branch --merged`:

[source,console]
----
$ git branch --merged
  iss53
* master
----

ترى `iss53` في القائمة لأنك دمجته سابقًا.
// Because you already merged in `iss53` earlier, you see it in your list.
والفروع التي في هذه القائمة وليس أمامها نجمة (`*`)، يمكنك في العموم حذفها بأمان بالأمر `git branch -d`؛ لن تفقد شيئًا بحذفها لأنك بالفعل ضممت ما فيها من عمل إلى فرع آخر.
// Branches on this list without the `*` in front of them are generally fine to delete with `git branch -d`; you've already incorporated their work into another branch, so you're not going to lose anything.

لرؤية جميع الفروع التي بها عمل غير مدموج بعد، نفّذ `git branch --no-merged`:
// To see all the branches that contain work you haven't yet merged in, you can run `git branch --no-merged`:

[source,console]
----
$ git branch --no-merged
  testing
----

يُظهر لك هذا الأمر فرعك الآخر.
// This shows your other branch.
ستفشل محاولة حذفه بالأمر `git branch -d` لأن به عملًا غير مدمج بعد:
// Because it contains work that isn't merged in yet, trying to delete it with `git branch -d` will fail:

[source,console]
----
$ git branch -d testing
error: The branch 'testing' is not fully merged.
If you are sure you want to delete it, run 'git branch -D testing'.
----

إن رغبت حقًا ويقينًا في حذف الفرع وفقد ما فيه من عمل، فأجبر جت على حذفه بالخيار `-D`، كما تخبرك الرسالة.
// If you really do want to delete the branch and lose that work, you can force it with `-D`, as the helpful message points out.

[TIP]
====
إذا لم تعطِ إيداعًا أو اسمَ فرعٍ إلى الخيارين `--merged` و ``--no-merged``، فإنهما، على الترتيب، سيسردان ما الذي دُمج أو لم يُدمج في الفرع _الحالي_.
// The options described above, `--merged` and `--no-merged` will, if not given a commit or branch name as an argument, show you what is, respectively, merged or not merged into your _current_ branch.

يمكنك دائما إعطاؤهما اسم فرع للسؤال عن حالة دمجه من غير أن تحتاج إلى الانتقال أولا إلى هذا الفرع بأمر السحب، مثلا: ما الذي لم يُدمج في فرع `master`؟
// You can always provide an additional argument to ask about the merge state with respect to some other branch without checking that other branch out first, as in, what is not merged into the `master` branch?
[source,console]
----
$ git checkout testing
$ git branch --no-merged master
  topicA
  featureB
----
====

==== تغيير اسم فرع
// ==== Changing a branch name

[CAUTION]
====
لا تغيّر اسم فرع ما زال الآخرون يستعمله.
// Do not rename branches that are still in use by other collaborators.
ولا تغيّر اسم فرع مثل `master` أو `main` أو `mainline` قبل أن تقرأ فصل <<_changing_master>>.
// Do not rename a branch like master/main/mainline without having read the section <<_changing_master>>.
====

هَبْ فرعًا لديك اسمه `bad-branch-name` وتريد جعله `corrected-branch-name` مع الإبقاء على تاريخه بالكامل.
// Suppose you have a branch that is called `bad-branch-name` and you want to change it to `corrected-branch-name`, while keeping all history.
وتريد أيضا تغيير اسمه على الخادوم البعيد (جت‌هب GitHub أو جت‌لاب GitLab أو غيرهما).
// You also want to change the branch name on the remote (GitHub, GitLab, other server).
كيف تفعل هذا؟
// How do you do this?

غيّر اسم الفرع محليًّا بالأمر `git branch --move` :
// Rename the branch locally with the `git branch --move` command:

[source, console]
----
$ git branch --move bad-branch-name corrected-branch-name
----

هذا يغيّر `bad-branch-name` إلى `corrected-branch-name`، ولكن هذا التغيير محليٌّ فقط حتى الآن.
// This replaces your `bad-branch-name` with `corrected-branch-name`, but this change is only local for now.
ولجعل الآخرين يرون الفرع الصحيح في المستودع البعيد، عليك دفعه:
// To let others see the corrected branch on the remote, push it:

[source,console]
----
$ git push --set-upstream origin corrected-branch-name
----

لنلقِ نظرةً على حالنا الآن:
// Now we'll take a brief look at where we are now:

[source, console]
----
$ git branch --all
* corrected-branch-name
  main
  remotes/origin/bad-branch-name
  remotes/origin/corrected-branch-name
  remotes/origin/main
----

لاحظ أنك في فرع `corrected-branch-name` وأنه متاح في المستودع البعيد.
// Notice that you're on the branch `corrected-branch-name` and it's available on the remote.
ولكنّ الفرع ذا الاسم الخاطئ متاح كذلك هناك، ولكن يمكنك حذفه بالأمر التالي:
// However, the branch with the bad name is also still present there but you can delete it by executing the following command:

[source,console]
----
$ git push origin --delete bad-branch-name
----

الآن قد حلّ اسم الفرع الصحيح محل اسم الفرع الخاطئ في كل مكان.
// Now the bad branch name is fully replaced with the corrected branch name.

[[_changing_master]]
===== تغيير اسم الفرع الرئيس
// ===== Changing the master branch name

[WARNING]
====
تغيير اسم فرع مثل `master` أو `main` أو `mainline` أو `default` سيُعطّل التكاملات والخدمات والأدوات المساعدة وبُريمِجات البناء والإصدار التي يستخدمها مستودعك.
// Changing the name of a branch like master/main/mainline/default will break the integrations, services, helper utilities and build/release scripts that your repository uses.
لذا عليك التشاور مع زملائك في المشروع قبل الإقدام على هذا الأمر.
// Before you do this, make sure you consult with your collaborators.
وعليك كذلك أن تبحث بحثًا وافيًا في مستودعك وتحدّث أيّ إشارة إلى الاسم القديم للفرع في الكود والبُريمِجات.
// Also, make sure you do a thorough search through your repo and update any references to the old branch name in your code and scripts.
====

غيّر اسم فرع `master` المحلي إلى `main` بالأمر:
// Rename your local `master` branch into `main` with the following command:

[source,console]
----
$ git branch --move master main
----

لم يعد لدينا أي فرع محلي `master`، لأننا غيّرنا اسمه إلى `main`.
// There's no local `master` branch anymore, because it's renamed to the `main` branch.

ولجعل الآخرين يرون فرع `main` الجديد، عليك دفعه إلى المستودع البعيد.
// To let others see the new `main` branch, you need to push it to the remote.
هذا يجعل الفرع الجديد متاحًا هناك:
// This makes the renamed branch available on the remote.

[source,console]
----
$ git push --set-upstream origin main
----

نجد الآن أنفسنا في الحالة التالية:
// Now we end up with the following state:

[source,console]
----
$ git branch --all
* main
  remotes/origin/HEAD -> origin/master
  remotes/origin/main
  remotes/origin/master
----

اختفى فرعك المحلي `master`، وحلّ محله الفرع `main`.
// Your local `master` branch is gone, as it's replaced with the `main` branch.
وصار `main` في المستودع البعيد.
// The `main` branch is present on the remote.
ولكن فرع `master` القديم بقى موجودًا في المستودع البعيد.
// However, the old `master` branch is still present on the remote.
فسيظل المشاركون الآخرون يتّخِذون فرع `master` أساسًا لأعمالهم، حتى تتّخذَ إجراءً آخر.
// Other collaborators will continue to use the `master` branch as the base of their work, until you make some further changes.

بين يديك الآن عددٌ من المهام لاجتياز تلك المرحلة الانتقالية:
// Now you have a few more tasks in front of you to complete the transition:

* على جميع المشروعات المعتمِدة على هذا المشروع تحديث كودها و/أو إعداداتها.
// * Any projects that depend on this one will need to update their code and/or configuration.
* عليك تحديث أي مِلفات إعدادات خاصة بالاختبارات.
// * Update any test-runner configuration files.
* عليك مواءمة بُريمِجات البناء والإصدار.
// * Adjust build and release scripts.
* عليك مواءمة إعدادات خادوم مستودعك، مثل الفرع المبدئي وقواعد الدمج والأمور الأخرى التي تعتمد على أسماء الفروع.
// * Redirect settings on your repo host for things like the repo's default branch, merge rules, and other things that match branch names.
* عليك تحديث الإشارات إلى الفرع القديم في التوثيق.
// * Update references to the old branch in documentation.
* عليك إغلاق أو دمج كل طلبات الجذب الموجهة إلى الفرع القديم.
// * Close or merge any pull requests that target the old branch.

بعد فعل جميع هذه المهام، والتيقن أن فرع `main` يقوم بعمله تمامًا مثل فرع `master`، يمكنك حذف فرع `master`:
// After you've done all these tasks, and are certain the `main` branch performs just as the `master` branch, you can delete the `master` branch:

[source, console]
----
$ git push origin --delete master
----
