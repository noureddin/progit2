=== ✨ أسس التفريع والدمج
// === Basic Branching and Merging

لننظر مثالا سهلا عن التفريع والدمج بأسلوب سير عمل قد تستعمله في الحقيقة.
// Let's go through a simple example of branching and merging with a workflow that you might use in the real world.
ستتبع هذه الخطوات:
// You'll follow these steps:

. تقوم ببعض الأعمال على موقع وب.
// . Do some work on a website.
. تنشئ فرعا لـ«قصة المستخدم» الجديدة التي تعمل عليها.
// . Create a branch for a new user story you're working on.
. تقوم ببعض الأعمال في هذا الفرع.
// . Do some work in that branch.

وبينما أنت هنا، تأتيك مكالمة بأن علة أخرى خطيرة تحتاج منك إصلاحا عاجلا.
// At this stage, you'll receive a call that another issue is critical and you need a hotfix.
فستفعل الآتي:
// You'll do the following:

. تنتقل إلى فرعك الإنتاجي ("production").
// . Switch to your production branch.
. تنشئ فرعا لإضافة الإصلاح العاجل.
// . Create a branch to add the hotfix.
. وبعد اختباره، تدمج فرع الإصلاح العاجل، وتدفعه إلى فرع الإنتاج.
// . After it's tested, merge the hotfix branch, and push to production.
. تعود إلى قصة المستخدم الأصلية وتكمل عملك عليها.
// . Switch back to your original user story and continue working.

[[_basic_branching]]
==== أسس التفريع
// ==== Basic Branching

(((branches, basic workflow)))
أولا، لنقُل أنك تعمل على مشروعك، ولديك بضعة إيداعات بالفعل في فرع `master`.
// First, let's say you're working on your project and have a couple of commits already on the `master` branch.

.تاريخ إيداعات بسيط
// .A simple commit history
image::images/basic-branching-1.png[تاريخ إيداعات بسيط]
// image::images/basic-branching-1.png[A simple commit history]

ثم قررت أنك ستعمل على المسألة رقم ٥٣ في نظام متابعة المسائل الذي تستخدمه شركتك.
// You've decided that you're going to work on issue #53 in whatever issue-tracking system your company uses.
فتنفّذ أمر `git checkout` مع الخيار `-b`، لإنشاء فرعٍ جديدٍ والانتقال إليه في الوقت نفسه:
// To create a new branch and switch to it at the same time, you can run the `git checkout` command with the `-b` switch:

[source,console]
----
$ git checkout -b iss53
Switched to a new branch "iss53"
----

وهذا اختصار للأمرين:
// This is shorthand for:

[source,console]
----
$ git branch iss53
$ git checkout iss53
----

.إنشاء إشارة إلى فرع جديد
// .Creating a new branch pointer
image::images/basic-branching-2.png[إنشاء إشارة إلى فرع جديد]

يمكنك العمل على موقعك وصنع بعض الإيداعات.
// You work on your website and do some commits.
فعل هذا يحرك فرع `iss53` إلى الأمام، لأنه الفرع المسحوب (أي أنه الفرع الذي تشير إليه إشارة الرأس `HEAD` لديك):
// Doing so moves the `iss53` branch forward, because you have it checked out (that is, your `HEAD` is pointing to it):

[source,console]
----
$ vim index.html
$ git commit -a -m 'Create new footer [issue 53]'
----

.تقدَّم فرع `iss53` بعملك عليه
// .The `iss53` branch has moved forward with your work
image::images/basic-branching-3.png[تقدَّم فرع `iss53` بعملك عليه]
// image::images/basic-branching-3.png[The `iss53` branch has moved forward with your work]

ثم تأتيك مكالمة الآن بأن الموقع به علة، وعليك حلها فورا.
// Now you get the call that there is an issue with the website, and you need to fix it immediately.
لا تحتاج مع جت أن تنشر إصلاحك لهذه العلة مع تعديلات `iss53` التي صنعتها، ولا تحتاج أيضا إلى بذل المجهود للتراجع عن هذه التعديلات حتى تستطيع العمل على إصلاح علة الموقع.
// With Git, you don't have to deploy your fix along with the `iss53` changes you've made, and you don't have to put a lot of effort into reverting those changes before you can work on applying your fix to what is in production.
ليس عليك إلا أن تنتقل عائدا إلى فرعك الرئيس `master`.
// All you have to do is switch back to your `master` branch.

ولكن، قبل هذا، عليك ملاحظة أن إن كان مجلد عملك أو منطقة تأهيلك فيهما تعديلات غير مودعة وتختلف عما في الفرع الذي تريد الانتقال إليه، فلن يسمح لك جت بالانتقال.
// However, before you do that, note that if your working directory or staging area has uncommitted changes that conflict with the branch you're checking out, Git won't let you switch branches.
من الأفضل دوما أن تجعل حالة العمل نظيفة قبل الانتقال بين الفروع.
// It's best to have a clean working state when you switch branches.
يمكن التحايل على هذا بطريقة أو بأخرى (تحديدا، التخبئة وتصحيح الإيداعات) والتي سنتطرق إليها فيما بعد في <<ch07-git-tools#_git_stashing>>.
// There are ways to get around this (namely, stashing and commit amending) that we'll cover later on, in <<ch07-git-tools#_git_stashing>>.
ولكن لنفترض الآن أنك أودعت كل تعديلاتك، حتى يتسنى لك الانتقال عائدا إلى فرعك الرئيس:
// For now, let's assume you've committed all your changes, so you can switch back to your `master` branch:

[source,console]
----
$ git checkout master
Switched to branch 'master'
----

ستجد الآن أن مجلد عملك مطابق تماما لما كان عليه قبل أن تبدأ العمل على المسألة رقم ٥٣، ويمكنك الآن التركيز على إصلاح العلة الجديدة.
// At this point, your project working directory is exactly the way it was before you started working on issue #53, and you can concentrate on your hotfix.
هذه النقطة مهمة ويجب تذكرها: عندما تنتقل من فرع إلى آخر، يعيد جت مجلد عملك إلى ما كان عليه آخر مرة أودعت فيها في هذا الفرع،
// This is an important point to remember: when you switch branches, Git resets your working directory to look like it did the last time you committed on that branch.
فيضيف ويحذف ويعدّل المِلفات آليا، حتى يجعل نسخة العمل مشابهة تماما لما كان عليه الفرع عند آخر إيداع تم فيه.
// It adds, removes, and modifies files automatically to make sure your working copy is what the branch looked like on your last commit to it.

عليك الآن العمل على الإصلاح العاجل.
// Next, you have a hotfix to make.
لننشئ فرع `hotfix` لتعمل عليه حتى تنتهي:
// Let's create a `hotfix` branch on which to work until it's completed:

[source,console]
----
$ git checkout -b hotfix
Switched to a new branch 'hotfix'
$ vim index.html
$ git commit -a -m 'Fix broken email address'
[hotfix 1fb7853] Fix broken email address
 1 file changed, 2 insertions(+)
----

.فرع الإصلاح العاجل (`hotfix`) مبني على الفرع الرئيس (`master`)
// .Hotfix branch based on `master`
image::images/basic-branching-4.png[فرع الإصلاح العاجل (`hotfix`) مبني على الفرع الرئيس (`master`)]

يمكنك الآن إجراء الاختبارات والتأكد من أن الإصلاح الذي صنعته هو المراد. ثم دمج فرع الإصلاح العاجل في الفرع الرئيس حتى تدفعه إلى الإنتاج.
// You can run your tests, make sure the hotfix is what you want, and finally merge the `hotfix` branch back into your `master` branch to deploy to production.
يمكنك فعل هذا بأمر الدمج `git merge`:(((git commands, merge)))
// You do this with the `git merge` command:(((git commands, merge)))

[source,console]
----
$ git checkout master
$ git merge hotfix
Updating f42c576..3a0874c
Fast-forward
 index.html | 2 ++
 1 file changed, 2 insertions(+)
----

ستلاحظ عبارة "`fast-forward`" («تسريع») في ناتج الدمج.
// You'll notice the phrase "`fast-forward`" in that merge.
هذا لأن الإيداع `C4` الذي يشير إليه فرع الإصلاح العاجل كان مباشرةً أمام الإيداع `C2` الذي تقف فيه، فلم يفعل جت سوى تحريك الإشارة إلى الأمام.
// Because the commit `C4` pointed to by the branch `hotfix` you merged in was directly ahead of the commit `C2` you're on, Git simply moves the pointer forward.
بلفظ آخر: عندما تريد دمج إيداع في إيداع آخر يمكن الوصول إليه بتتبع تاريخه، فإن جت لا يعقد الأمور بل يحرك الإشارة إلى الأمام، فلا أعمال مفترقة ليحاول دمجها -- يسمى هذا «تسريعًا» ("`fast-forward`").
// To phrase that another way, when you try to merge one commit with a commit that can be reached by following the first commit's history, Git simplifies things by moving the pointer forward because there is no divergent work to merge together -- this is called a "`fast-forward.`"

تعديلاتك الآن موجودة في لقطة الإيداع التي يشير إليها الفرع الرئيس، فيمكنك الآن نشرها.
// Your change is now in the snapshot of the commit pointed to by the `master` branch, and you can deploy the fix.

.تسريع `master` إلى `hotfix`
// .`master` is fast-forwarded to `hotfix`
image::images/basic-branching-5.png[تسريع `master` إلى `hotfix`]

بعد نشر إصلاحك شديد الأهمية، تكون مستعدا للعودة إلى عملك الذي كنت تفعله قبل هذه المقاطعة.
// After your super-important fix is deployed, you're ready to switch back to the work you were doing before you were interrupted.
ولكن عليك أولا حذف فرع `hotfix` لأنك لم تعد تحتاج إليه؛ فالفرع الرئيس يشير إلى الشيء نفسه.
// However, first you'll delete the `hotfix` branch, because you no longer need it -- the `master` branch points at the same place.
يمكنك حذفه بالخيار `-d` مع أمر التفريع `git branch`:
// You can delete it with the `-d` option to `git branch`:

[source,console]
----
$ git branch -d hotfix
Deleted branch hotfix (3a0874c).
----

يمكنك الآن العودة إلى فرع العمل الحالي الخاص بالمسألة رقم ٥٣، وإكمال العمل عليها.
// Now you can switch back to your work-in-progress branch on issue #53 and continue working on it.

[source,console]
----
$ git checkout iss53
Switched to branch "iss53"
$ vim index.html
$ git commit -a -m 'Finish the new footer [issue 53]'
[iss53 ad82d7a] Finish the new footer [issue 53]
1 file changed, 1 insertion(+)
----

.استكمال العمل على `iss53`
// .Work continues on `iss53`
image::images/basic-branching-6.png[استكمال العمل على `iss53`]

من الواجب ملاحظة أن مِلفات فرع `iss53` لا تحتوى على عملك في فرع `hotfix`.
// It's worth noting here that the work you did in your `hotfix` branch is not contained in the files in your `iss53` branch.
فإذا احتجت إلى جذبه إليها، ادمج فرع `master` في فرع `iss53` بالأمر `git merge master`، أو أجّله حتى تقرر جذب فرع `iss53` إلى `master` فيما بعد. FIXME
// If you need to pull it in, you can merge your `master` branch into your `iss53` branch by running `git merge master`, or you can wait to integrate those changes until you decide to pull the `iss53` branch back into `master` later.

[[_basic_merging]]
==== أسس الدمج
// ==== Basic Merging

(((branches, merging)))(((merging)))
إذا رأيت أن عملك على المسألة رقم ٥٣ قد اكتمل وصار جاهزا لدمجه في الفرع الرئيس،
// Suppose you've decided that your issue #53 work is complete and ready to be merged into your `master` branch.
فستدمج فرع `iss53` في فرع `master`، تماما مثلما دمجت فرع `hotfix` سابقا:
// In order to do that, you'll merge your `iss53` branch into `master`, much like you merged your `hotfix` branch earlier.
ليس عليك سوى سحب الفرع الذي تريد الدمج فيه ثم تنفيذ أمر الدمج:
// All you have to do is check out the branch you wish to merge into and then run the `git merge` command:

[source,console]
----
$ git checkout master
Switched to branch 'master'
$ git merge iss53
Merge made by the 'recursive' strategy.
index.html |    1 +
1 file changed, 1 insertion(+)
----

يبدو هذا مختلفا قليلا عن دمج `hotfix` الذي أجريتَه سابقا.
// This looks a bit different than the `hotfix` merge you did earlier.
ففي حالتنا هذه قد افترق تاريخ التطوير منذ نقطة سابقة. FIXME
// In this case, your development history has diverged from some older point.
ولأن الإيداع الأخير في الفرع الذي تقف فيه ليس سَلَفًا مباشرا (أب أو جد أو جد أعلى) للفرع الذي تريد دمجه، فإن على جت القيام ببعض العمل.
// Because the commit on the branch you're on isn't a direct ancestor of the branch you're merging in, Git has to do some work.
في هذه الحالة، يعمل جت دمجًا ثلاثيًا نموذجيًّا، للقطتين اللتين يشيران إليهما رأسَا الفرعين، مع السلف المشترك للاثنتين.
// In this case, Git does a simple three-way merge, using the two snapshots pointed to by the branch tips and the common ancestor of the two.

.اللقطات الثلاثة المستعملة في دمج نموذجي معتاد
// .Three snapshots used in a typical merge
image::images/basic-merging-1.png[اللقطات الثلاثة المستعملة في دمج نموذجي معتاد]

فبدلا من مجرد تحريك الإشارة إلى الأمام، ينشئ جت لقطة جديدة ناتجة عن هذا الدمج الثلاثي، وينشئ آليًّا إيداعًا جديدًا يشير إليها.
// Instead of just moving the branch pointer forward, Git creates a new snapshot that results from this three-way merge and automatically creates a new commit that points to it.
يسمى هذا «إيداع دمج»، ويتميز بأن له أكثر من أب.
// This is referred to as a merge commit, and is special in that it has more than one parent.

.إيداع دمج
// .A merge commit
image::images/basic-merging-2.png[إيداع دمج]

الآن قد دُمِج عملك، ولم تعد في حاجة إلى فرع `iss53`.
// Now that your work is merged in, you have no further need for the `iss53` branch.
فيمكنك غلق هذه المسألة في نظام متابعة المسائل، وحذف الفرع:
// You can close the issue in your issue-tracking system, and delete the branch:

[source,console]
----
$ git branch -d iss53
----

[[_basic_merge_conflicts]]
==== أسس نزاعات الدمج
// ==== Basic Merge Conflicts

(((merging, conflicts)))
لا تسير هذه العملية بسلاسة في بعض الأحيان.
// Occasionally, this process doesn't go smoothly.
فإذا عدّلت الجزء نفسه في الملف نفسه تعديلا مختلفا في الفرعين اللذين تنوي دمجهما، فلن يستطيع جت أن يدمجمهما دمجا نظيفا.
// If you changed the same part of the same file differently in the two branches you're merging, Git won't be able to merge them cleanly.
فإن كان إصلاحك للمسألة رقم ٥٣ عدّل الجزء نفسه من الملف الذي عدّلته في فرع الإصلاح العاجل، فستواجه نزاع دمج يشبه هذا:
// If your fix for issue #53 modified the same part of a file as the `hotfix` branch, you'll get a merge conflict that looks something like this:

[source,console]
----
$ git merge iss53
Auto-merging index.html
CONFLICT (content): Merge conflict in index.html
Automatic merge failed; fix conflicts and then commit the result.
----

لم ينشئ جت آليًّا إيداعَ دمجٍ جديدًا،
// Git hasn't automatically created a new merge commit.
بل أوقف العملية حتى تحل النزاع.
// It has paused the process while you resolve the conflict.
فإذا أردت رؤية الملفات غير المدموجة في أي وقت بعد نزاع الدمج، نفّذ أمر الحالة `git status`:
// If you want to see which files are unmerged at any point after a merge conflict, you can run `git status`:

[source,console]
----
$ git status
On branch master
You have unmerged paths.
  (fix conflicts and run "git commit")

Unmerged paths:
  (use "git add <file>..." to mark resolution)

    both modified:      index.html

no changes added to commit (use "git add" and/or "git commit -a")
----

ستظهر الملفات المتنازع عليها ولم تُدمج بعد أنها غير مدموجة "`unmerged`".
// Anything that has merge conflicts and hasn't been resolved is listed as unmerged.
ويضيف جت علامات معيارية لحل النزاعات إلى الملفات المتنازع عليها، حتى تتمكن من تحريرها يدويا وحل تلك النزاعات.
// Git adds standard conflict-resolution markers to the files that have conflicts, so you can open them manually and resolve those conflicts.
فستجد أن في ملفك جزءًا يشبه هذا:
// Your file contains a section that looks something like this:

[source,html]
----
<<<<<<< HEAD:index.html
<div id="footer">contact : email.support@github.com</div>
=======
<div id="footer">
 please contact us at support@github.com
</div>
>>>>>>> iss53:index.html
----

تجد نسخة `HEAD` (فرع `master`، لأنه الفرع الذي سحبته قبل أمر الدمج) في النصف الأعلى من هذه الك‍تلة (كل ما هو فوق سطر `=======`)، ونسخة `iss53` في النصف الأسفل منها.
// This means the version in `HEAD` (your `master` branch, because that was what you had checked out when you ran your merge command) is the top part of that block (everything above the `=======`), while the version in your `iss53` branch looks like everything in the bottom part.
وحتى تحل هذا النزاع، عليك اختيار أحد الجزأين أو دمج محتواهما بنفسك.
// In order to resolve the conflict, you have to either choose one side or the other or merge the contents yourself.
فمثلا قد تحله بتغيير الك‍تلة كلها إلى:
// For instance, you might resolve this conflict by replacing the entire block with this:

[source,html]
----
<div id="footer">
please contact us at email.support@github.com
</div>
----

يحمل هذا الحل شيئا من كلا الجزأين. أما الأسطر `<<<<<<<` و `=======` و `>>>>>>>` فقد أزلناها بالكامل.
// This resolution has a little of each section, and the `<<<<<<<`, `=======`, and `>>>>>>>` lines have been completely removed.
وبعد حل كل نزاع مثل هذا في كل ملف متنازع عليه، نفّذ أمر الإضافة `git add` على كل ملف لإعلام جت أنه قد حُلّ.
// After you've resolved each of these sections in each conflicted file, run `git add` on each file to mark it as resolved.
فتأهيل الملف في جت يعلن نزاعه محلولا.
// Staging the file marks it as resolved in Git.

وإذا أردت استعمال أداة رسومية لحل هذه المشاكل، فيمكنك تنفيذ `git mergetool`، والذي يشغّل أداة دمج رسومية مناسبة ويسير معك خلال النزاعات:(((git commands, mergetool)))
// If you want to use a graphical tool to resolve these issues, you can run `git mergetool`, which fires up an appropriate visual merge tool and walks you through the conflicts:(((git commands, mergetool)))

[source,console]
----
$ git mergetool

This message is displayed because 'merge.tool' is not configured.
See 'git mergetool --tool-help' or 'git help config' for more details.
'git mergetool' will now attempt to use one of the following tools:
opendiff kdiff3 tkdiff xxdiff meld tortoisemerge gvimdiff diffuse diffmerge ecmerge p4merge araxis bc3 codecompare vimdiff emerge
Merging:
index.html

Normal merge conflict for 'index.html':
  {local}: modified file
  {remote}: modified file
Hit return to start merge resolution tool (opendiff):
----

إذا أردت استعمال أداة دمج أخرى غير الأداة المبدئية (اختار جت في هذه الحالة أداة `opendiff` لأننا نفّذاه على نظام ماك)، فيمكنك رؤية قائمة بجميع الأدوات المدعومة في الأعلى بعد جملة "`one of the following tools`".
// If you want to use a merge tool other than the default (Git chose `opendiff` in this case because the command was run on macOS), you can see all the supported tools listed at the top after "`one of the following tools.`"
ليس عليك سوى ك‍تابة اسم الأداة التي تريدها.
// Just type the name of the tool you'd rather use.

[NOTE]
====
إذا احتجت أدوات متقدمة أكثر لحل النزاعات العويصة، فسنتحدث أكثر عن الدمج في <<ch07-git-tools#_advanced_merging>>.
// If you need more advanced tools for resolving tricky merge conflicts, we cover more on merging in <<ch07-git-tools#_advanced_merging>>.
====

بعد إغلاق أداة الدمج، فسيسألك جت عما إذا كان الدمج ناجحا.
// After you exit the merge tool, Git asks you if the merge was successful.
إذا أجبت بنعم، فسيؤهل الملف لك لإعلان أنه قد حُل.
// If you tell the script that it was, it stages the file to mark it as resolved for you.
ويمكنك عندئذٍ استعراض الحالة مجددا للتحقق أن جميع النزاعات قد حُلت:
// You can run `git status` again to verify that all conflicts have been resolved:

[source,console]
----
$ git status
On branch master
All conflicts fixed but you are still merging.
  (use "git commit" to conclude merge)

Changes to be committed:

    modified:   index.html
----

فإذا كنت راضيا عن هذا، وتأكدت من أن كل شيء كان عليه نزاع قد أُهِّل، نفّذ `git commit` لاختتام إيداع الدمج.
// If you're happy with that, and you verify that everything that had conflicts has been staged, you can type `git commit` to finalize the merge commit.
ورسالة الإيداع المبدئية تشبه هذا:
// The commit message by default looks something like this:

[source,console]
----
Merge branch 'iss53'

Conflicts:
    index.html
#
# It looks like you may be committing a merge.
# If this is not correct, please remove the file
#	.git/MERGE_HEAD
# and try again.


# Please enter the commit message for your changes. Lines starting
# with '#' will be ignored, and an empty message aborts the commit.
# On branch master
# All conflicts fixed but you are still merging.
#
# Changes to be committed:
#	modified:   index.html
#
----

فيها يمكنك شرح حلك للنزاع وتعليل تعديلاتك إن لم تكن واضحة، إذا ظننت أن هذا يفيد من يرى هذا الإيداع فيما بعد.
// If you think it would be helpful to others looking at this merge in the future, you can modify this commit message with details about how you resolved the merge and explain why you did the changes you made if these are not obvious.
