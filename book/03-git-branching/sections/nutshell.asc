[[_git_branches_overview]]
=== ✨ الفروع بإيجاز
// === Branches in a Nutshell

لنفهم حقًا طريقة التفريع في جت، علينا أن نتراجع خطوة إلى الخلف ونتدبر طريقته في تخزين البيانات.
// To really understand the way Git does branching, we need to take a step back and examine how Git stores its data.

كما قد تتذكر من <<ch01-getting-started#what_is_git_section>>، لا يخزن جت بياناته في صورة فروقات، بل في صورة لقطات.
// As you may remember from <<ch01-getting-started#what_is_git_section>>, Git doesn't store data as a series of changesets or differences, but instead as a series of _snapshots_.

وعندما تُودع، يخزن جت كائنَ إيداع فيه إشارة إلى لقطة المحتوى الذي أهّلته.
// When you make a commit, Git stores a commit object that contains a pointer to the snapshot of the content you staged.
وفيه كذلك اسم المؤلف وعنوان بريده ورسالة الإيداع والإشارات إلى الإيداعات السابقة له مباشرةً (الإيداعات الآباء): لا أب للإيداع المبدئي، وأب واحد للإيداعات العادية، وأبوين أو أكثر لإيداعات الدمج، وهي الإيداعات الناتجة من دمج فرعين أو أكثر.
// This object also contains the author's name and email address, the message that you typed, and pointers to the commit or commits that directly came before this commit (its parent or parents): zero parents for the initial commit, one parent for a normal commit, and multiple parents for a commit that results from a merge of two or more branches.

حتى نستطيع تصور هذا، لنفترض أن لديك مجلدًا به ثلاثة ملفات، وأنك أهّلتها جميعها ثم أودعتها.
// To visualize this, let's assume that you have a directory containing three files, and you stage them all and commit.
يحسب تأهيل الملفات بصمة كل ملف (بصمة {شاه١} التي ذكرناها في <<ch01-getting-started#what_is_git_section>>)، ويخزن نسخة الملف هذه في المستودع (وهي ما يسميها جت «ك‍تلة رقمية» ("`blob`")، ونسميها «ك‍تلة» اختصارا)، ويضيف تلك البصمة إلى منطقة التأهيل:
// Staging the files computes a checksum for each one (the SHA-1 hash we mentioned in <<ch01-getting-started#what_is_git_section>>), stores that version of the file in the Git repository (Git refers to them as _blobs_), and adds that checksum to the staging area:

[source,console]
----
$ git add README test.rb LICENSE
$ git commit -m 'Initial commit'
----

عندما تودع بأمر `git commit`، فإن جت يحسب أيضا بصمات كل مجلد ومجلد فرعي (في هذه الحالة، مجلد جذر المشروع فقط)، ويخزنها في صورة كائنات أشجار في المستودع.
// When you create the commit by running `git commit`, Git checksums each subdirectory (in this case, just the root project directory) and stores them as a tree object in the Git repository.
ثم ينشئ جت كائنَ إيداعٍ فيه بيانات وصفية وإشارة إلى شجرة جذر المشروع، حتى يستطيع إعادة إنشاء تلك اللقطة عند الحاجة.(((git commands, commit)))
// Git then creates a commit object that has the metadata and a pointer to the root project tree so it can re-create that snapshot when needed.(((git commands, commit)))

صار في مستودعك الآن خمسة كائنات: ثلاث _ك‍تل_ (كلٌ منها يمثل محتويات ملف من الثلاثة)، و__شجرة__ واحدة (تسرد محتويات المجلد وما الك‍تل التي تشير إليها أسماء الملفات)، و__إيداع__ واحد (فيه إشارة إلى شجرة الجذر تلك وكذلك البيانات الوصفية للإيداع).
// Your Git repository now contains five objects: three _blobs_ (each representing the contents of one of the three files), one _tree_ that lists the contents of the directory and specifies which file names are stored as which blobs, and one _commit_ with the pointer to that root tree and all the commit metadata.

.إيداعٌ وشجرته
// .A commit and its tree
image::images/commit-and-tree.png[إيداعٌ وشجرته]
// image::images/commit-and-tree.png[A commit and its tree]

إذا أجريت تعديلات وأودعتها، فإن إيداعك التالي سيخزن إشارةً إلى الإيداع السابق له مباشرةً.
// If you make some changes and commit again, the next commit stores a pointer to the commit that came immediately before it.

.إيداعات وآباؤها
// .Commits and their parents
image::images/commits-and-parents.png[إيداعات وآباؤها]
// image::images/commits-and-parents.png[Commits and their parents]

فإنما الفرع في جت هو إشارة متحركة تشير إلى أحد هذه الإيداعات.
// A branch in Git is simply a lightweight movable pointer to one of these commits.
والفرع المبدئي في جت يُسمى `master`.
// The default branch name in Git is `master`.
فعندما تشرع في صنع الإيداعات، فإن جت يعطيك فرعا رئيسا يسمى `master` ويشير إلى آخر إيداع صنعته.
// As you start making commits, you're given a `master` branch that points to the last commit you made.
ويتقدم فرع `master` تلقائيًا مع كل إيداعٍ تودِعه.
// Every time you commit, the `master` branch pointer moves forward automatically.

[NOTE]
====
فرع `master` في جت ليس مميزًا.(((master)))
// The "`master`" branch in Git is not a special branch.(((master)))
فهو تمامًا مثل أي فرع آخر.
// It is exactly like any other branch.
والسبب الوحيد لوجوده في أغلب المستودعات أن أمر `git init` ينشئه بهذا الاسم المبدئي وأكثر الناس لا يبالون بتغييره.
// The only reason nearly every repository has one is that the `git init` command creates it by default and most people don't bother to change it.
====

.فرع وتاريخ إيداعاته
// .A branch and its commit history
image::images/branch-and-history.png[فرع وتاريخ إيداعاته]
// image::images/branch-and-history.png[A branch and its commit history]

[[_create_new_branch]]
==== إنشاء فرع جديد
// ==== Creating a New Branch

(((branches, creating)))
ماذا يحدث عندما تنشئ فرعًا جديدًا؟
// What happens when you create a new branch?
الإجابة: ينشئ جت إشارة جديدة لك لتحركها كما تشاء.
// Well, doing so creates a new pointer for you to move around.
لنقُل إنك أردت إنشاء فرع جديد اسمه `testing`.
// Let's say you want to create a new branch called `testing`.
تفعل هذا بأمر التفريع، `git branch`:(((git commands, branch)))
// You do this with the `git branch` command:(((git commands, branch)))

[source,console]
----
$ git branch testing
----

ينشئ هذا إشارةً إلى الإيداع الذي تقف عنده الآن.
// This creates a new pointer to the same commit you're currently on.

.فرعان يشيران إلى سلسلة الإيداعات نفسها
// .Two branches pointing into the same series of commits
image::images/two-branches.png[فرعان يشيران إلى سلسلة الإيداعات نفسها]
// image::images/two-branches.png[Two branches pointing into the same series of commits]

كيف يعرف جت في أيّ فرع أنت الآن؟
// How does Git know what branch you're currently on?
إنه يحتفظ بإشارة مخصوصة تسمى «إشارة الرأس» (`HEAD`).
// It keeps a special pointer called `HEAD`.
لاحظ أن هذه مختلفة كثيرًا عن مفهوم `HEAD` في الأنظمة الأخرى مثل Subversion و CVS.
// Note that this is a lot different than the concept of `HEAD` in other VCSs you may be used to, such as Subversion or CVS.
في جت، هذه إشارة إلى الفرع المحلي الذي تقف فيه الآن.
// In Git, this is a pointer to the local branch you're currently on.
في حالتنا هذه، ما زلتَ واقفًا في فرع `master`.
// In this case, you're still on `master`.
فما على أمر `git branch` إلا إنشاء فرع جديد؛ ليس عليه الانتقال إليه.
// The `git branch` command only _created_ a new branch -- it didn't switch to that branch.

.إشارة الرأس `HEAD` تشير إلى فرع
// .HEAD pointing to a branch
image::images/head-to-master.png[إشارة الرأس `HEAD` تشير إلى فرع]
// image::images/head-to-master.png[HEAD pointing to a branch]

يمكنك رؤية هذا بسهولة بأمر السجل، والذي يُظهر لك ما تشير إليه إشارات الفروع،
// You can easily see this by running a simple `git log` command that shows you where the branch pointers are pointing.
وذلك بالخيار `--decorate`.
// This option is called `--decorate`.

[source,console]
----
$ git log --oneline --decorate
f30ab (HEAD -> master, testing) Add feature #32 - ability to add new formats to the central interface
34ac2 Fix bug #1328 - stack overflow under certain conditions
98ca9 Initial commit
----

يمكنك رؤية فرعَي `master` و `testing` عند إيداع `f30ab`.
// You can see the `master` and `testing` branches that are right there next to the `f30ab` commit.

[[_switching_branches]]
==== الانتقال بين الفروع
// ==== Switching Branches

(((branches, switching)))
للانتقال إلى فرع موجود، استخدم أمر السحب `git checkout`.(((git commands, checkout)))
// To switch to an existing branch, you run the `git checkout` command.(((git commands, checkout)))
هيا بنا نتنقل إلى فرعنا الجديد `testing`:
// Let's switch to the new `testing` branch:

[source,console]
----
$ git checkout testing
----

يحرك هذا الأمر إشارة الرأس لتشير إلى فرع `testing`.
// This moves `HEAD` to point to the `testing` branch.

.إشارة الرأس تشير إلى الفرع الحالي
// .HEAD points to the current branch
image::images/head-to-testing.png[إشارة الرأس تشير إلى الفرع الحالي]
// image::images/head-to-testing.png[HEAD points to the current branch]

ما دلالة هذا؟
// What is the significance of that?
لنصنع إيداعًا آخر إذًا.
// Well, let's do another commit:

[source,console]
----
$ vim test.rb
$ git commit -a -m 'Make a change'
----

.فرع الرأس يتقدم عند صنع إيداع
// .The HEAD branch moves forward when a commit is made
image::images/advance-testing.png[فرع الرأس يتقدم عند صنع إيداع]
// image::images/advance-testing.png[The HEAD branch moves forward when a commit is made]

هذا يدعو للتفكر، لأن الآن فرع `testing` قد تقدم، بينما قعد فرع `master` في مكانه مشيرًا إلى الإيداع القديم نفسه عندما انتقلنا إلى الفرع الجديد بأمر السحب.
// This is interesting, because now your `testing` branch has moved forward, but your `master` branch still points to the commit you were on when you ran `git checkout` to switch branches.
لنعد إلى فرع `master`:
// Let's switch back to the `master` branch:

[source,console]
----
$ git checkout master
----

[NOTE]
.لا يُظهر أمر السجل _جميع_ الفروع _طوال_ الوقت
// .`git log` doesn't show _all_ the branches _all_ the time
====
إذا نفذت `git log` الآن، فستتساءل أين ذهب فرع `testing` الذي أنشأته، لأنه لن يظهر في ناتجه.
// If you were to run `git log` right now, you might wonder where the "testing" branch you just created went, as it would not appear in the output.

لم يتبخر الفرع، ولكن جت لا يعلم أنك مهتمٌ به الآن، ولا يُظهر لك جت إلا ما يظن أنك مهتم به.
// The branch hasn't disappeared; Git just doesn't know that you're interested in that branch and it is trying to show you what it thinks you're interested in.
بلفظ آخر، لا يُظهر لك أمر السجل بطبيعته إلا تاريخ الفرع الذي تقف فيه حاليًا.
// In other words, by default, `git log` will only show commit history below the branch you've checked out.

لإظهار تاريخ فرع آخر، عليك طلب ذلك صراحةً، مثل `git log testing`.
// To show commit history for the desired branch you have to explicitly specify it: `git log testing`.
ولإظهار جميع الفروع، اطلب ذلك من `git log` بالخيار `--all`.
// To show all of the branches, add `--all` to your `git log` command.
====

.تتحرك إشارة الرأس عندما تنتقل إلى فرع آخر
// .HEAD moves when you checkout
image::images/checkout-master.png[تتحرك إشارة الرأس عندما تنتقل إلى فرع آخر]
// image::images/checkout-master.png[HEAD moves when you checkout]

فَعَل هذا الأمر فعلين:
// That command did two things.
أعاد إشارة الرأس لتشير إلى فرع `master`، وأرجع الملفات في مجلد العمل إلى حالها كما كانت في اللقطة التي يشير إليها `master`.
// It moved the HEAD pointer back to point to the `master` branch, and it reverted the files in your working directory back to the snapshot that `master` points to.
هذا يعني أيضا أن التغييرات التي ستصنعها الآن ستُبنى على نسخة قديمة من المشروع.
// This also means the changes you make from this point forward will diverge from an older version of the project.
أي أنه عمليًّا يتراجع عما فعلت في فرع `testing` لكي تستطيع السير في اتجاه آخر.
// It essentially rewinds the work you've done in your `testing` branch so you can go in a different direction.

[NOTE]
.الانتقال بين الفروع يغيّر الملفات التي في مجلد عملك
// .Switching branches changes files in your working directory
====
مهمٌ ملاحظة أنك عندما تنتقل إلى فرع آخر في جت، فإن الملفات التي في مجلد عملك ستتغير.
// It's important to note that when you switch branches in Git, files in your working directory will change.
فإذا انتقلت إلى فرع قديم، سيعود مجلد عملك إلى ما كان عليه عند آخر إيداع في هذا الفرع.
// If you switch to an older branch, your working directory will be reverted to look like it did the last time you committed on that branch.
وإن لم يستطع جت تغيير الملفات تغييرا نظيفا، FIXME فلن يسمح لك بالتبديل أصلا.
// If Git cannot do it cleanly, it will not let you switch at all.
// جيدا، بدون مشاكل، تماما، بنظافة
====

لنُجري بعض التعديلات ونودع مجددًا:
// Let's make a few changes and commit again:

[source,console]
----
$ vim test.rb
$ git commit -a -m 'Make other changes'
----

الآن افترق تاريخ مشروعك (انظر <<divergent_history>>).
// Now your project history has diverged (see <<divergent_history>>).
فلقد أنشأتَ فرعًا وانتقلت إليه وعملت فيه قليلا، ثم عدت إلى الفرع الرئيس وعملت فيه عملا آخر.
// You created and switched to a branch, did some work on it, and then switched back to your main branch and did other work.
كلا هذين التغييرين منعزلان في فرعين منفصلين: يمكنك التنقل بينهما ذهابًا وإيابًا ثم دمجهما معًا عندما تكون مستعدًا.
// Both of those changes are isolated in separate branches: you can switch back and forth between the branches and merge them together when you're ready.
وكل هذا فعلتَه بسَهولة بأوامر التفريع `branch` والسحب `checkout` والإيداع `commit`.
// And you did all that with simple `branch`, `checkout`, and `commit` commands.

[[divergent_history]]
.تاريخ مفترِق
// .Divergent history
image::images/advance-master.png[تاريخ مفترِق]
// image::images/advance-master.png[Divergent history]

يمكنك أيضا رؤية هذا بسهولة بأمر السجل،
// You can also see this easily with the `git log` command.
فإذا نفّذت `git log --oneline --decorate --graph --all` فسيُظهر لك تاريخ إيداعاتك ومواضع إشارات فروعك وكيف افترق تاريخك.
// If you run `git log --oneline --decorate --graph --all` it will print out the history of your commits, showing where your branch pointers are and how your history has diverged.

[source,console]
----
$ git log --oneline --decorate --graph --all
* c2b9e (HEAD, master) Make other changes
| * 87ab2 (testing) Make a change
|/
* f30ab Add feature #32 - ability to add new formats to the central interface
* 34ac2 Fix bug #1328 - stack overflow under certain conditions
* 98ca9 Initial commit of my project
----

ولأن الفرع في جت ليس إلا ملفًا هيّنًا فيه ٤٠ حرفًا تمثّل بصمة الإيداع الذي يشير إليه الفرع، فإن إنشاء الفروع وإزالتها عمليتان رخيصتان سريعتان.
// Because a branch in Git is actually a simple file that contains the 40 character SHA-1 checksum of the commit it points to, branches are cheap to create and destroy.
فعملية إنشاء فرع جديد تماثل في سرعتها ويسرها عملية ك‍تابة ٤١ بايتًا إلى ملف (وهم ٤٠ محرفًا للبصمة ثم محرف نهاية السطر).
// Creating a new branch is as quick and simple as writing 41 bytes to a file (40 characters and a newline).

هذا اختلاف عظيم عن طريقة التفريع في معظم الأنظمة القديمة لإدارة النسخ، والتي يُنسخ فيها جميع ملفات المشروع إلى مجلد آخر.
// This is in sharp contrast to the way most older VCS tools branch, which involves copying all of the project's files into a second directory.
قد يحتاج هذا عدة ثوانٍ أو حتى دقائق، حسب حجم المشروع. ولكن تلك العملية في جت دائمًا عملية آنيّة.
// This can take several seconds or even minutes, depending on the size of the project, whereas in Git the process is always instantaneous.
وأيضا لأننا نسجّل آباء الإيداعات عندما نودع، فإن إيجاد قاعدة مناسبة للدمج هي عملية يفعلها جت من أجلنا آليًّا، وهي سهلة جدا عموما.
// Also, because we're recording the parents when we commit, finding a proper merge base for merging is automatically done for us and is generally very easy to do.
تشجّع هذه الميزات المطورين على إنشاء فروع واستعمالها بكثرة.
// These features help encourage developers to create and use branches often.

لنرَ لماذا عليك فعل هذا.
// Let's see why you should do so.

[NOTE]
.إنشاء فرع جديد والانتقال إليه في خطوة واحدة
// .Creating a new branch and switching to it at the same time
====
من المعتاد أن ترغب في الانتقال إلى فرع جديد فور إنشائه -- يمكنك إنشاء فرع والانتقال إليه بأمر واحد: `git checkout -b <اسم&zwnj;الفرع&zwnj;الجديد>`.
// It's typical to create a new branch and want to switch to that new branch at the same time -- this can be done in one operation with `git checkout -b <newbranchname>`.
====

[NOTE]
====
ابتداءً من النسخة 2.23 من جت يمكنك استعمال أمر التبديل بدلًا من أمر السحب من أجل:
// From Git version 2.23 onwards you can use `git switch` instead of `git checkout` to:

- الانتقال إلى فرع موجود: `git switch testing-branch`.
// - Switch to an existing branch: `git switch testing-branch`.
- إنشاء فرع جديد والانتقال إليه: `git switch -c new-branch`.
// - Create a new branch and switch to it: `git switch -c new-branch`.
  الخيار `-c` للإنشاء، ويمكنك استخدام الخيار الكامل: `--create`.
//   The `-c` flag stands for create, you can also use the full flag: `--create`.
- العودة إلى الفرع المسحوب سابقًا: `git switch -`.
// - Return to your previously checked out branch: `git switch -`.
====
