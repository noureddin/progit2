[[_rebasing]]
=== ✨ إعادة التأسيس
// === Rebasing

(((rebasing)))
توجد طريقتان في جت لضم التعديلات من فرع إلى آخر: الدمج `merge` وإعادة التأسيس `rebase`.
// In Git, there are two main ways to integrate changes from one branch into another: the `merge` and the `rebase`.
سنتعلم في هذا الفصل ما هي إعادة التأسيس، وكيف نفعلها، ولماذا هي أداة مذهلة فعلا، ومتى لن تود استخدامها.
// In this section you'll learn what rebasing is, how to do it, why it's a pretty amazing tool, and in what cases you won't want to use it.

==== أسس إعادة التأسيس
// ==== The Basic Rebase

إذا عدت إلى مثال سابق في <<_basic_merging>>، ستجد أن عملك افترق إلى إيداعات في فرعين مختلفين.
// If you go back to an earlier example from <<_basic_merging>>, you can see that you diverged your work and made commits on two different branches.

.تاريخ بسيط مفترق
// .Simple divergent history
image::images/basic-rebase-1.png[تاريخ بسيط مفترق]

أسهل طريقة لضم الفرعين، كما ناقشنا بالفعل، هي أمر الدمج `merge`،
// The easiest way to integrate the branches, as we've already covered, is the `merge` command.
والذي يقوم بدمج ثلاثي بين آخر لقطتين في الفرعين (`C3` و `C4`) وآخر سلف مشترك لهما (`C2`)، وينشئ لقطة جديدة (وإيداعًا).
// It performs a three-way merge between the two latest branch snapshots (`C3` and `C4`) and the most recent common ancestor of the two (`C2`), creating a new snapshot (and commit).

[[rebasing-merging-example]]
.الدمج لضم تاريخ العمل المفترق
// .Merging to integrate diverged work history
image::images/basic-rebase-2.png[الدمج لضم تاريخ العمل المفترق]

لكن توجد طريقة أخرى: يمكنك أخذ رُقعة التعديلات ("`patch`") التي صنعتها في هذا الإيداع (`C4`) وإعادة تطبيقها على الإيداع الآخر (`C3`).
// However, there is another way: you can take the patch of the change that was introduced in `C4` and reapply it on top of `C3`.
هذه ما نسميها «إعادة التأسيس» ("`rebasing`") في جت.
// In Git, this is called _rebasing_.
فبأمر إعادة التأسيس `rebase` يمكنك أخذ جميع التعديلات التي أودعتها في فرعٍ ما، وإعادة صنعها في فرع آخر.(((git commands, rebase)))
// With the `rebase` command, you can take all the changes that were committed on one branch and replay them on a different branch.(((git commands, rebase)))

في هذا المثال سنسحب فرع `experiment`، ثم نعيد تأسيسه على الفرع الرئيس `master`.
// For this example, you would check out the `experiment` branch, and then rebase it onto the `master` branch as follows:

[source,console]
----
$ git checkout experiment
$ git rebase master
First, rewinding head to replay your work on top of it...
Applying: added staged command
----

تتم هذه العملية بالذهاب إلى السلف المشترك للفرعين (الفرع الحالي الذي تقف فيه وتريد إعادة تأسيسه، والفرع الذي تريد إعادة التأسيس عليه)،
// This operation works by going to the common ancestor of the two branches (the one you're on and the one you're rebasing onto),
وحساب التعديلات التي تمت في كل إيداع في الفرع الحالي وحفظها في ملفات مؤقتة،
//+ getting the diff introduced by each commit of the branch you're on, saving those diffs to temporary files,
ثم ضبط الفرع الحالي إلى الإيداع الذي عنده الفرع الذي تريد إعادة التأسيس عليه،
//+ resetting the current branch to the same commit as the branch you are rebasing onto,
وأخيرا تطبيق كل تعديل عليه بالترتيب.
//+ and finally applying each change in turn.

.إعادة تأسيس تعديلات `C4` على `C3`
// .Rebasing the change introduced in `C4` onto `C3`
image::images/basic-rebase-3.png[إعادة تأسيس تعديلات `C4` على `C3`]

يمكنك الآن العودة إلى الفرع الرئيس وعمل دمج تسريع ("`fast-forward`").
// At this point, you can go back to the `master` branch and do a fast-forward merge.

[source,console]
----
$ git checkout master
$ git merge experiment
----

.تسريع فرع `master`
// .Fast-forwarding the `master` branch
image::images/basic-rebase-4.png[تسريع فرع `master`]

اللقطة التي يشير إليها إيداع `C4'` الآن مطابقة تماما لتلك التي كان يشير إليها `C5` في <<rebasing-merging-example,مثال الدمج>>.
// Now, the snapshot pointed to by `C4'` is exactly the same as the one that was pointed to by `C5` in <<rebasing-merging-example,the merge example>>.
لا فرق في الناتج النهائي، ولكن تعطينا إعادة التأسيس تاريخًا أنظف.
// There is no difference in the end product of the integration, but rebasing makes for a cleaner history.
فإذا نظرت إلى سجل فرع مُعاد تأسيسه، ستجده تاريخًا خطيًّا: يبدو أن كل العمل تم على التوالي، ولو أنه في الأصل قد تم على التوازي.
// If you examine the log of a rebased branch, it looks like a linear history: it appears that all the work happened in series, even when it originally happened in parallel.

غالبا ستفعل هذا لضمان أن إيداعاتك ستُطبّق بنظافة على فرعٍ بعيد -- مثلا في مشروع تريد المشاركة فيه لكنك لست مطورًا فيه.
// Often, you'll do this to make sure your commits apply cleanly on a remote branch -- perhaps in a project to which you're trying to contribute but that you don't maintain.
فستعمل في هذه الحالة في فرع، ثم تعيد تأسيسه على `origin/master` عندما تكون جاهزًا لتسليم رُقعتك إليهم.
// In this case, you'd do your work in a branch and then rebase your work onto `origin/master` when you were ready to submit your patches to the main project.
فهكذا لن يُجهِد المطورين ضمُ عملك، فما الأمر إلا تسريعًا، أو تطبيقًا نظيفًا للرقعة.
// That way, the maintainer doesn't have to do any integration work -- just a fast-forward or a clean apply.

لاحظ أن اللقطة التي يشير إليها الإيداع النهائي، سواء كان آخر الإيداعات المعاد تأسيسها أو كان الإيداع النهائي لدمج، هي اللقطة نفسها؛ ليس الاختلاف إلا في التاريخ.
// Note that the snapshot pointed to by the final commit you end up with, whether it's the last of the rebased commits for a rebase or the final merge commit after a merge, is the same snapshot -- it's only the history that is different.
فإعادة التأسيس تعيد صنع تعديلات تاريخ عمل في تاريخ عمل آخر بترتيبها نفسه، لكن الدمج يدمج آخر نقطتين معًا.
// Rebasing replays changes from one line of work onto another in the order they were introduced, whereas merging takes the endpoints and merges them together.

==== إعادات تأسيس شيقة أكثر
// ==== More Interesting Rebases

يمكنك أيضا جعل إعادة التأسيس تطبّق التعديلات على فرع غير «الفرع المستهدف».
// You can also have your rebase replay on something other than the rebase target branch.
لنرَ مثلا تاريخا مثل «<<rbdiag_e>>».
// Take a history like <<rbdiag_e>>, for example.
لقد أنشأت فرع موضوع (`server`) لإضافة ميزات في جزء الخادوم في مشروعك، وصنعت إيداعا.
// You branched a topic branch (`server`) to add some server-side functionality to your project, and made a commit.
بعدئذٍ أنشأت فرعا من هذا الفرع لعمل تعديلات في جزء العميل (`client`) وصنعت بضعة إيداعات.
// Then, you branched off that to make the client-side changes (`client`) and committed a few times.
ثم في آخر الأمر عدت إلى فرع `server` وصنعت بضعة إيداعات أخرى.
// Finally, you went back to your `server` branch and did a few more commits.

[[rbdiag_e]]
.تاريخ فيه فرع موضوع متفرع من فرع موضوع آخر
// .A history with a topic branch off another topic branch
image::images/interesting-rebase-1.png[تاريخ فيه فرع موضوع متفرع من فرع موضوع آخر]

لنقُل إنك قررت أنك تريد دمج تعديلاتك الخاصة بجزء العميل في المسار الرئيس لكي تصدرها، ولكنك تريد الإبقاء على تعديلات جزء الخادوم حتى تختبرها أكثر.
// Suppose you decide that you want to merge your client-side changes into your mainline for a release, but you want to hold off on the server-side changes until it's tested further.
إن التعديلات التي في `client` وليست في `server` (وهي `C8` و `C9`) تستطيع إعادة تطبيقها على فرع `master` بالخيار `--onto` مع أمر `git rebase`:
// You can take the changes on `client` that aren't on `server` (`C8` and `C9`) and replay them on your `master` branch by using the `--onto` option of `git rebase`:

[source,console]
----
$ git rebase --onto master server client
----

إنما يقول هذا: «احسب فروقات فرع `client` (التعديلات التي سُجّلت فيه) منذ أن افترق عن فرع `server`، ثم أعد تطبيقها في فرع `client` كأنه قد تفرّع من فرع `master` وليس من `server`.»
// This basically says, "`Take the `client` branch, figure out the patches since it diverged from the `server` branch, and replay these patches in the `client` branch as if it was based directly off the `master` branch instead.`"
صعبة قليلا، لكن النتيجة عظيمة.
// It's a bit complex, but the result is pretty cool.

.إعادة تأسيس فرع موضوع على فرع موضوع آخر
// .Rebasing a topic branch off another topic branch
image::images/interesting-rebase-2.png[إعادة تأسيس فرع موضوع على فرع موضوع آخر]

عندئذٍ يمكنك تسريع الفرع الرئيس `master` (انظر «<<rbdiag_g>>»):
// Now you can fast-forward your `master` branch (see <<rbdiag_g>>):

[source,console]
----
$ git checkout master
$ git merge client
----

[[rbdiag_g]]
.تسريع الفرع الرئيس لضم تعديلات فرع `client`
// .Fast-forwarding your `master` branch to include the `client` branch changes
image::images/interesting-rebase-3.png[تسريع الفرع الرئيس لضم تعديلات فرع `client`]

لنقُل إنك قررت جذب فرع `server` كذلك.
// Let's say you decide to pull in your `server` branch as well.
يمكنك إعادة تأسيس فرع `server` على الفرع الرئيس بلا حاجة إلى سحبه أولا، بالأمر `git rebase <basebranch> <topicbranch>` (أي الفرع الأساس ثم فرع الموضوع)، وهذا يسحب لك فرع الموضوع (`server` في حالتنا) ويعيد تطبيق ما فيه من عمل على الفرع الأساس (`master`):
// You can rebase the `server` branch onto the `master` branch without having to check it out first by running `git rebase <basebranch> <topicbranch>` -- which checks out the topic branch (in this case, `server`) for you and replays it onto the base branch (`master`):

[source,console]
----
$ git rebase master server
----

هذا يُعيد تطبيق العمل الذي في فرع الخادوم `server` على العمل الذي في الفرع الرئيس `master`، كما يظهر في «<<rbdiag_h>>».
// This replays your `server` work on top of your `master` work, as shown in <<rbdiag_h>>.

[[rbdiag_h]]
.إعادة تأسيس فرع `server` على الفرع الرئيس
// .Rebasing your `server` branch on top of your `master` branch
image::images/interesting-rebase-4.png[إعادة تأسيس فرع `server` على الفرع الرئيس]

عندئذٍ يمكنك تسريع الفرع الأساس (`master`):
// Then, you can fast-forward the base branch (`master`):

[source,console]
----
$ git checkout master
$ git merge server
----

ثم تستطيع حذف الفرعين `client` و `server` لأن كل ما فيهما قد ضُمَّ بالفعل ولم تعد بحاجة إليهما، فيصير تاريخك في نهاية هذه العملية كما في «<<rbdiag_i>>»:
// You can remove the `client` and `server` branches because all the work is integrated and you don't need them anymore, leaving your history for this entire process looking like <<rbdiag_i>>:

[source,console]
----
$ git branch -d client
$ git branch -d server
----

[[rbdiag_i]]
.تاريخ الإيداعات في النهاية
// .Final commit history
image::images/interesting-rebase-5.png[تاريخ الإيداعات في النهاية]

[[_rebase_peril]]
==== محذورات إعادة التأسيس
// ==== The Perils of Rebasing

(((rebasing, perils of)))
ولكن… نعيم إعادة التأسيس ليس بغير عيوب، والتي يمكن اختصارها في سطر واحد:
// Ahh, but the bliss of rebasing isn't without its drawbacks, which can be summed up in a single line:

*لا تعد تأسيس إيداعات لها وجود خارج مستودعك فربما قد بنى الناس عليها عملا.*
// *Do not rebase commits that exist outside your repository and that people may have based work on.*

إذا اتبعت هذه النصيحة الإرشادية، فستكون بخير.
// If you follow that guideline, you'll be fine.
وإن لم تفعل، فسيكرهك الناس ويحتقرك الأهل والأصحاب.
// If you don't, people will hate you, and you'll be scorned by friends and family.

فعندما تعيد التأسيس، فإنك تهجر الإيداعات الموجودة وتصنع إيداعات جديدة شبيهة بالقديمة لكن مختلفة عنها.
// When you rebase stuff, you're abandoning existing commits and creating new ones that are similar but different.
وإذا دفعت هذه الإيداعات إلى مستودعٍ ما وجذبها الآخرون وبنوا عليها أعمالا، ثم جئت فأعدت ك‍تابة هذه الإيداعات بأمر `git rebase` ثم دفعتها من جديد، فسيضطر زملاؤك إلى إعادة دمج أعمالهم، وستؤول الأمور إلى فوضى عندما تحاول جذب أعمالهم إلى عملك.
// If you push commits somewhere and others pull them down and base work on them, and then you rewrite those commits with `git rebase` and push them up again, your collaborators will have to re-merge their work and things will get messy when you try to pull their work back into yours.

لنرَ كيف يمكن لإعادة تأسيس عملٍ منشور أن تسبب مشاكل.
// Let's look at an example of how rebasing work that you've made public can cause problems.
لنقُل إنك استنسخت من خادوم مركزي، ثم بنيت عليه عملا.
// Suppose you clone from a central server and then do some work off that.
سيبدو تاريخ إيداعك مثل هذا:
// Your commit history looks like this:

.استنسخ مستودعا، وابنِ عملا عليه
// .Clone a repository, and base some work on it
image::images/perils-of-rebasing-1.png[استنسخ مستودعا، وابنِ عملا عليه]

ثم جاء شخصٌ آخر وصنع المزيد من الإيداعات، والتي شملت دمجًا، ثم دفعها إلى الخادوم المركزي.
// Now, someone else does more work that includes a merge, and pushes that work to the central server.
فقمت باستحضار (`fetch`) الفرع البعيد الجديد ودمجه في عملك، فصار تاريخك مثل الآتي:
// You fetch it and merge the new remote branch into your work, making your history look something like this:

.استحضر المزيد من الإيداعات، وادمجها في عملك
// .Fetch more commits, and merge them into your work
image::images/perils-of-rebasing-2.png[استحضر المزيد من الإيداعات، وادمجها في عملك]

بعدئذ، قرر الذي دفع العمل المدموج أن يتراجع ويعيد تأسيس عمله بدل دمجه، فدفع بالقوة (`git push --force`) لإعادة ك‍تابة التاريخ على الخادوم.
// Next, the person who pushed the merged work decides to go back and rebase their work instead; they do a `git push --force` to overwrite the history on the server.
ثم استحضرت (`fetch`) من هذا الخادوم، جالبًا الإيداعات الجديدة.
// You then fetch from that server, bringing down the new commits.

[[_pre_merge_rebase_work]]
.شخصٌ يدفع إيداعات معاد تأسيسها، هاجرًا بذلك الإيداعات التي بنيت عليها عملك
// .Someone pushes rebased commits, abandoning commits you've based your work on
image::images/perils-of-rebasing-3.png[شخصٌ يدفع إيداعات معاد تأسيسها، هاجرًا بذلك الإيداعات التي بنيت عليها عملك]

كلاكما الآن في مأزق.
// Now you're both in a pickle.
فإذا جذبت، ستصنع إيداع دمج يضم كلا التاريخين، وسيبدو مستودعك مثل هذا:
// If you do a `git pull`, you'll create a merge commit which includes both lines of history, and your repository will look like this:

[[_merge_rebase_work]]
.عندما تدمج العمل نفسه مجددا في إيداع دمج جديد
// .You merge in the same work again into a new merge commit
image::images/perils-of-rebasing-4.png[عندما تدمج العمل نفسه مجددا في إيداع دمج جديد]

فإذا نظرت في السجل `git log` عندما يصير تاريخك كهذا، فسترى إيداعين متطابقين في اسم المؤلف وتاريخ الإيداع ورسالته، فيسبب اللَبس.
// If you run a `git log` when your history looks like this, you'll see two commits that have the same author, date, and message, which will be confusing.
وأضف إلى ذلك أنك إذا دفعت هذا التاريخ إلى الخادوم، فستعيد تقديم كل هذه الإيداعات المعاد تأسيسها إلى الخادوم المركزي من جديد، والذي سيسبّب لبسًا لأكثر للناس.
// Furthermore, if you push this history back up to the server, you'll reintroduce all those rebased commits to the central server, which can further confuse people.
يمكننا الافتراض أن المطور الآخر لا يريد الإيداعين `C4` و `C6` في التاريخ، ولذا أعاد تأسيسهما.
// It's pretty safe to assume that the other developer doesn't want `C4` and `C6` to be in the history; that's why they rebased in the first place.

[[_rebase_rebase]]
==== أعد التأسيس عندما تعيد التأسيس
// ==== Rebase When You Rebase

إذا *وجدت* نفسك في مثل هذا الموقف، فلدى جت وسائل سحرية أخرى قد تساعدك.
// If you *do* find yourself in a situation like this, Git has some further magic that might help you out.
فلو أن زميلك دفع بالقوة تعديلاتٍ تعيد ك‍تابة عمل بنيتَ عليه، فالتحدي هو أن تعرف ما هو عملك وما الذي أعاد ك‍تابته ذاك الشخص.
// If someone on your team force pushes changes that overwrite work that you've based work on, your challenge is to figure out what is yours and what they've rewritten.

الخبر الجميل أن جت لا يحسب للإيداع وحده بصمة {شاه١}، ولكن يحسبها أيضا للرُقعة (الفروقات) التي صنعها ذلك الإيداع.
// It turns out that in addition to the commit SHA-1 checksum, Git also calculates a checksum that is based just on the patch introduced with the commit.
وهذه البصمة تسمى «معرِّف الرقعة» ("`patch-id`").
// This is called a "`patch-id`".

فإذا جذبت عملا معاد ك‍تابته وأعدت تأسيسه على الإيداعات الجديدة من زميلك، فغالبا سينجح جت في تمييز ما هو عملك الفريد ويطبّقه على الفرع الجديد.
// If you pull down work that was rewritten and rebase it on top of the new commits from your partner, Git can often successfully figure out what is uniquely yours and apply them back on top of the new branch.

فمثلا في الموقف الافتراضي السابق، لو أننا أعدنا التأسيس (بالأمر `git rebase teamone/master`)، بدل الدمج عندما كنا في خطوة «<<_pre_merge_rebase_work>>»، فإن جت سوف:
// For instance, in the previous scenario, if instead of doing a merge when we're at <<_pre_merge_rebase_work>> we run `git rebase teamone/master`, Git will:

* يحدد العمل الذي تفرّد به فرعنا (`C2`،{ع} `C3`،{ع} `C4`،{ع} `C6`،{ع} `C7`)
// * Determine what work is unique to our branch (`C2`, `C3`, `C4`, `C6`, `C7`)
* يحدد ما الذي ليس بإيداعات دمج (`C2`،{ع} `C3`،{ع} `C4`)
// * Determine which are not merge commits (`C2`, `C3`, `C4`)
* يحدد ما الذي لم تُعد ك‍تابته في الفرع المستهدف (فقط `C2` و `C3`، لأن `C4` له رقعة `C4'` نفسها)
// * Determine which have not been rewritten into the target branch (just `C2` and `C3`, since `C4` is the same patch as `C4'`)
* يطبّق هذه الإيداعات على فرع `teamone/master`
// * Apply those commits to the top of `teamone/master`

فبدلا مما رأينا في «<<_merge_rebase_work>>»، سنحصل على نتيجة مثل «<<_rebase_rebase_work>>».
// So instead of the result we see in <<_merge_rebase_work>>, we would end up with something more like <<_rebase_rebase_work>>.

[[_rebase_rebase_work]]
.أعد التأسيس على عمل معاد تأسيسه ومدفوع بالقوة
// .Rebase on top of force-pushed rebase work
image::images/perils-of-rebasing-5.png[أعد التأسيس على عمل معاد تأسيسه ومدفوع بالقوة]

لن ينجح هذا إلا إذا كان الإيداعان `C4` و `C4'` اللذين صنعهما زميلك لهما الرقعة نفسها تقريبا،
// This only works if `C4` and `C4'` that your partner made are almost exactly the same patch.
وإلا فلن يعرف جت عندما يعيد التأسيس أنهما متطابقين وسيضيف رقعة أخرى شبيهة بالإيداع `C4` (والتي غالبا ستفشل في أن تُطبَّق بنظافة، لأن تعديلاتها ستكون مطبقة بالفعل ولو جزئيا).
// Otherwise the rebase won't be able to tell that it's a duplicate and will add another `C4`-like patch (which will probably fail to apply cleanly, since the changes would already be at least somewhat there).

ويمكنك أن تختصر هذا باستعمال خيار إعادة التأسيس `--rebase` مع أمر الجذب، أي تنفيذ `git pull --rebase` بدلا من `git pull` المجرد.
// You can also simplify this by running a `git pull --rebase` instead of a normal `git pull`.
أو يمكنك فعل ذلك يدويا بالاستحضار `git fetch` ثم إعادة التأسيس، أي تنفيذ `git rebase teamone/master` في هذه الحالة.
// Or you could do it manually with a `git fetch` followed by a `git rebase teamone/master` in this case.

وإذا كنت تستخدم `git pull` وتريد جعل خيار `--rebase` خيارًا مفترضًا دومًا، يمكنك تفعيل قيمة التهيئة `pull.rebase` بأمر مثل `git config --global pull.rebase true`.
// If you are using `git pull` and want to make `--rebase` the default, you can set the `pull.rebase` config value with something like `git config --global pull.rebase true`.

إذا كنت أبدا لا تعيد تأسيس إلا الإيداعات التي لم تغادر حاسوبك، فستكون بخير.
// If you only ever rebase commits that have never left your own computer, you'll be just fine.
وإن كنت تعيد تأسيس إيداعات قد دفعتها، ولكن لم يبنِ عليها أحدٌ آخر إيداعاتٍ، فستكون بخير أيضا.
// If you rebase commits that have been pushed, but that no one else has based commits from, you'll also be fine.
أما إن كنت تعيد تأسيس إيداعات قد دفعتها إلى العالَم وربما بنى عليها الناس أعمالا، فقد تجد نفسك في ورطة مُغيظة منهِكة، ثم ازدراء زملائك لك.
// If you rebase commits that have already been pushed publicly, and people may have based work on those commits, then you may be in for some frustrating trouble, and the scorn of your teammates.

إن وجدت أنت أو زميلٌ لك أن ذلك ضروري يومًا ما، تأكد أن الجميع يعرفون استخدام `git pull --rebase`، لكي تحاول جعل معاناة ما بعد الحادثة أقل سوءًا ولو قليلا.
// If you or a partner does find it necessary at some point, make sure everyone knows to run `git pull --rebase` to try to make the pain after it happens a little bit simpler.

==== بين إعادة التأسيس والدمج
// ==== Rebase vs. Merge

(((rebasing, vs. merging)))(((merging, vs. rebasing)))
الآن وقد رأيت إعادة التأسيس والدمج عمليًّا، قد تتساءل أيهما أفضل.
// Now that you've seen rebasing and merging in action, you may be wondering which one is better.
قبل أن نستطيع الإجابة عن هذا السؤال، لنرجع إلى الوراء قليلا ونتحدث عن معنى التاريخ.
// Before we can answer this, let's step back a bit and talk about what history means.

إحدى وجهتَي النظر أن تاريخ إيداعات مستودعك هي *سجل لما حدث فعلا.*
// One point of view on this is that your repository's commit history is a *record of what actually happened.*
أي أنها وثيقة تاريخية، ولها قيمة في ذاتها، ويجب ألا يُعبث بها.
// It's a historical document, valuable in its own right, and shouldn't be tampered with.
فمن هذا المنظور، يكاد يُعدّ تغيير تاريخ الإيداعات استهزاءً ومسبّة، لأنك _تكذب_ بشأن ما حدث فعلا.
// From this angle, changing the commit history is almost blasphemous; you're _lying_ about what actually transpired.
إذًا ماذا لو كانت لدينا فوضى من إيداعات الدمج؟
// So what if there was a messy series of merge commits?
هكذا جرت الأمور، ويجب أن يحتفظ بها المستودع من أجل الأجيال القادمة.
// That's how it happened, and the repository should preserve that for posterity.

وجهة النظر المقابلة هي أن تاريخ الإيداعات هو *قصة صناعة مشروعك.*
// The opposing point of view is that the commit history is the *story of how your project was made.*
ولأنك لا تنشر المسودة الأولى من ك‍تاب، فلم إذًا تنشر عملًا أشعث أغبر؟
// You wouldn't publish the first draft of a book, so why show your messy work?
ففي أثناء عملك على مشروع، قد تحتاج سجلا لجميع عثراتك وطرقك المسدودة. ولكن عندما يحين وقت إظهار عملك إلى العالم، فقد تود أن تحكي قصةً متماسكة عن كيفية الوصول من «أ» إلى «ب».
// When you're working on a project, you may need a record of all your missteps and dead-end paths, but when it's time to show your work to the world, you may want to tell a more coherent story of how to get from A to B.
ولذلك يستخدم أصحاب هذا المذهب أدوات مثل إعادة التأسيس وتصفية الفروع لإعادة ك‍تابة إيداعاتهم قبل دمجها في الفرع الرئيس،
// People in this camp use tools like `rebase` and `filter-branch` to rewrite their commits before they're merged into the mainline branch.
يستخدمون `rebase` و `filter-branch` ليحكون القصة بالطريقة الأنسب للقراء في المستقبل.
// They use tools like `rebase` and `filter-branch`, to tell the story in the way that's best for future readers.

لنعد الآن إلى السؤال عن التفضيل بين الدمج وإعادة التأسيس: لعلك وجدت أنه أعقد من أن تكون له إجابة يسيرة.
// Now, to the question of whether merging or rebasing is better: hopefully you'll see that it's not that simple.
فإن جت أداةٌ قوية، ويتيح لك فعل الكثير بتاريخ مستودعك، ولكن كل فريق وكل مشروع هو حالة خاصة.
// Git is a powerful tool, and allows you to do many things to and with your history, but every team and every project is different.
الآن وقد علمت الأسلوبين وطريقة عملهما، عليك أن تقرر بنفسك ما الأنسب لحالتك الخاصة.
// Now that you know how both of these things work, it's up to you to decide which one is best for your particular situation.

ويمكنك الجمع بين ميزات كليهما: أعد تأسيس التعديلات المحلية قبل دفعها حتى تنظف عملك، ولكن لا تعد أبدًا تأسيس أي شيء دفعته إلى مستودعٍ ما.
// You can get the best of both worlds: rebase local changes before pushing to clean up your work, but never rebase anything that you've pushed somewhere.
