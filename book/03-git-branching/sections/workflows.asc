=== ✨ أساليب العمل التفريعية
// === Branching Workflows

بما أنك الآن تعلم أسس التفريع والدمج، ماذا يمكنك أو يجدر بك فعله بهما؟
// Now that you have the basics of branching and merging down, what can or should you do with them?
سنتناول في هذا الفصل بعض أشهر أساليب العمل التي يجعلها هذا التفريع الخفيف ممكنة، لكي تقرر إذا ما كنت تود أن تجعلها جزءًا من دورة التطوير التي تتبعها.
// In this section, we'll cover some common workflows that this lightweight branching makes possible, so you can decide if you would like to incorporate them into your own development cycle.

==== الفروع طويلة العمر
// ==== Long-Running Branches

(((branches, long-running)))
يستعمل جت دمجا ثلاثيا غير معقد، فيسهّل الدمج بين فرعين مرات عديدة عبر مدة زمنية طويلة.
// Because Git uses a simple three-way merge, merging from one branch into another multiple times over a long period is generally easy to do.
يتيح لك هذا وجود عدد من الفروع المفتوحة دائما لتستعملها لمراحل مختلفة من دورة التطوير، لأنك تستطيع أن تدمج باستمرار فيما بينها.
// This means you can have several branches that are always open and that you use for different stages of your development cycle; you can merge regularly from some of them into others.

الكثيرون من المطورين مستخدمي جت يعتمدون هذا النهج في أسلوب سير العمل، فيخصصون مثلا الفرع الرئيس للمصدر المستقر تماما وحسب، أو للذي أُصدر فعلا، أو للذي سيُصدر.
// Many Git developers have a workflow that embraces this approach, such as having only code that is entirely stable in their `master` branch -- possibly only code that has been or will be released.
ويكون لديهم فرعا موازيا اسمه `develop` أو `next` مثلا، ليعملوا منه أو ليستعملوه لاختبار الاستقرار، فليس بالضرورة أن يكون مستقرا دوما، ولكن عند استقراره، يمكن دمجه في الفرع الرئيس.
// They have another parallel branch named `develop` or `next` that they work from or use to test stability -- it isn't necessarily always stable, but whenever it gets to a stable state, it can be merged into `master`.
ويستعملون هذا الفرع ليجذبوا فيه فروع المواضيع (الفروع قصيرة العمر، مثل فرع `iss53` المذكور سابقا) عندما تكون جاهزة، لضمان اجتيازها جميع الاختبارات وأنها لا تُحدِث عللًا.
// It's used to pull in topic branches (short-lived branches, like your earlier `iss53` branch) when they're ready, to make sure they pass all the tests and don't introduce bugs.

نحن فعليا نتحدث عن إشارات ترتقي في سلّم ايداعاتك.
// In reality, we're talking about pointers moving up the line of commits you're making.
فالفروع المستقرة في أسفله، أما طليعة التطوير ففي أعلاه.
// The stable branches are farther down the line in your commit history, and the bleeding-edge branches are farther up the history.

.منظور خطي لتفريع الاستقرار المتزايد
// .A linear view of progressive-stability branching
image::images/lr-branches-1.png[منظور خطي لتفريع الاستقرار المتزايد]
// image::images/lr-branches-1.png[A linear view of progressive-stability branching]

لعل الأسهل تصور أنها صومعات عمل منعزلة، فتتخرج دفعة من الإيداعات إلى صومعة أخرى أكثر استقرارا عندما تجتاز جميع الاختبارات.
// It's generally easier to think about them as work silos, where sets of commits graduate to a more stable silo when they're fully tested.

[[lrbranch_b]]
.منظور «صومعي» لتفريع الاستقرار المتزايد
// .A "`silo`" view of progressive-stability branching
image::images/lr-branches-2.png[منظور «صومعي» لتفريع الاستقرار المتزايد]
// image::images/lr-branches-2.png[A “silo” view of progressive-stability branching]

يمكنك فعل هذا بعدة مستويات من الاستقرار.
// You can keep doing this for several levels of stability.
فلدى بعض المشروعات الكبيرة فرع `proposed` أو `pu` («تحديثات مقترحة») ويدمجوا فيه فروعا قد لا تكون جاهزة لأن تكون في فرع `next` أو `master`.
// Some larger projects also have a `proposed` or `pu` (proposed updates) branch that has integrated branches that may not be ready to go into the `next` or `master` branch.
فالأمر أن فروعك في مستويات مختلفة من الاستقرار، فعندما يصل أحدها إلى مستوى استقرار أعلى، فإنه يُدمج في الفرع الأعلى.
// The idea is that your branches are at various levels of stability; when they reach a more stable level, they're merged into the branch above them.
ونكرر: ليس ضروريا استعمال عدد من الفروع طويلة العمر، ولكنه كثيرا ما يفيد، خصوصا عندما تتعامل مع مشروعات معقدة أو كبيرة جدا.
// Again, having multiple long-running branches isn't necessary, but it's often helpful, especially when you're dealing with very large or complex projects.

[[_topic_branch]]
==== فروع المواضيع
// ==== Topic Branches

(((branches, topic)))
لكن فروع المواضيع تفيد جميع المشروعات بغض النظر عن حجمها.
// Topic branches, however, are useful in projects of any size.
فرع الموضوع هو فرع قصير العمر تنشئه وتستعمله لميزة واحدة أو ما يخصها من عمل.
// A topic branch is a short-lived branch that you create and use for a single particular feature or related work.
لعلك لم تفعل هذا قط مع نظام إدارة نسخ آخر، لأن التفريع والدمج غالبا ما يكونا بطيئين جدا في الأنظمة الأخرى.
// This is something you've likely never done with a VCS before because it's generally too expensive to create and merge branches.
ولكن الشائع مع جت هو إنشاء فروع والعمل عليها ودمجها وحذفها عدة مرات في اليوم الواحد.
// But in Git it's common to create, work on, merge, and delete branches several times a day.

وقد رأيت هذا في الفصل السابق في فرعَي `iss53` و `hotfix` اللذين أنشأتهما،
// You saw this in the last section with the `iss53` and `hotfix` branches you created.
فقد صنعت بضعة إيداعات فيهما ثم حذفتهما فور دمجهما في فرعك الرئيس.
// You did a few commits on them and deleted them directly after merging them into your main branch.
يسمح لك هذا الأسلوب بـ«تبديل السياق» سريعا وبالكامل، لأنك قسّمت عملك إلى صومعات، وكل صومعة (فرع) ليس فيها إلا التعديلات التي تخص موضوعا واحدا،فيسهّل ذلك رؤيتها عند المراجعة (code review) وغير ذلك.
// This technique allows you to context-switch quickly and completely -- because your work is separated into silos where all the changes in that branch have to do with that topic, it's easier to see what has happened during code review and such.
ويمكنك إبقاء التعديلات هناك دقائق أو أياما أو شهورا، ثم دمجها عندما تكون جاهزة، بغض النظر عن ترتيب إنشائها أو العمل عليها.
// You can keep the changes there for minutes, days, or months, and merge them in when they're ready, regardless of the order in which they were created or worked on.

لنقُل مثلا إنك عملت (في `master`)، ثم تفرّعت لإصلاح علة (`iss91`)، وعملت عليها قليلا، ثم تفرّعت مجددا (من الفرع الثاني) لتجرب طريقة أخرى لإصلاح العلة نفسها (`iss91v2`)، ثم عدت إلى فرعك الرئيس (`master`) وعملت فيه قليلا، ثم تفرّعت منه لتجربة شيء لست واثقا أنه جيد (فرع `dumbidea`).
// Consider an example of doing some work (on `master`), branching off for an issue (`iss91`), working on it for a bit, branching off the second branch to try another way of handling the same thing (`iss91v2`), going back to your `master` branch and working there for a while, and then branching off there to do some work that you're not sure is a good idea (`dumbidea` branch).
سيبدو تاريخ إيداعك الآن مثل هذا:
// Your commit history will look something like this:

.فروع مواضيع متعددة
// .Multiple topic branches
image::images/topic-branches-1.png[فروع مواضيع متعددة]

لنقُل إنك الآن وجدت إصلاحك الثاني للعلة (`iss91v2`) أفضل، وأنك أريت زملاءك فرع `dumbidea` فأخبروك أنه عبقري.
// Now, let's say you decide you like the second solution to your issue best (`iss91v2`); and you showed the `dumbidea` branch to your coworkers, and it turns out to be genius.
فيمكنك إذًا إلقاء فرع `iss91` الأصلي (وفقد الإيداعين `C5` و `C6`)، ودمج الفرعين الآخرين في الفرع الرئيس.
// You can throw away the original `iss91` branch (losing commits `C5` and `C6`) and merge in the other two.
سيبدو تاريخك الآن كهذا:
// Your history then looks like this:

.التاريخ بعد دمج `dumbidea` و `iss91v2`
// .History after merging `dumbidea` and `iss91v2`
image::images/topic-branches-2.png[التاريخ بعد دمج `dumbidea` و `iss91v2`]

سنتحدث بتفصيل أكبر عن مختلف أساليب سير العمل الممكنة في مشروعات جت في <<ch05-distributed-git#ch05-distributed-git>>، فعليك قراءة هذا الفصل قبل أن تقرر أي أسلوب تفريع سيتبعه مشروعك التالي.
// We will go into more detail about the various possible workflows for your Git project in <<ch05-distributed-git#ch05-distributed-git>>, so before you decide which branching scheme your next project will use, be sure to read that chapter.

من المهم تذكر أنك عندما تفعل أيًّا من هذا فإن هذه الفروع تبقى محلية بالكامل.
// It's important to remember when you're doing all this that these branches are completely local.
فعندما تتفرّع وتدمج، يحدث كل شيء داخل مستودع جت الخاص بك وحسب؛ لا يحدث أي تواصل مع الخادوم.
// When you're branching and merging, everything is being done only in your Git repository -- there is no communication with the server.
