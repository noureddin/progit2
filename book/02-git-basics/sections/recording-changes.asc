=== ✨ تسجيل التعديلات في المستودع
// === Recording Changes to the Repository

الآن لديك مستودع جت أصيل على حاسوبك، وأمامك نسخة مسحوبة من جميع ملفاته، أي «نسخة عمل».
// At this point, you should have a _bona fide_ Git repository on your local machine, and a checkout or _working copy_ of all of its files in front of you.
غالبا ستود البدء بعمل تعديلات وإيداع لقطات من هذه التعديلات في مستودعك كل مرة يصل مشروعك إلى مرحلة تريد تسجيلها.
// Typically, you'll want to start making changes and committing snapshots of those changes into your repository each time the project reaches a state you want to record.

تذكر أن كل ملف في مجلد العمل لديك يمكن أن يكون في حالة من اثنتين: _متعقَّب_ أو _غير متعقَّب_.
// Remember that each file in your working directory can be in one of two states: _tracked_ or _untracked_.
الملفات المتعقبة هي الملفات التي كانت في اللقطة الأخيرة أو أي ملف أُهِّل حديثًا. ويمكن أن تكون غير معدَّلة، أو معدلة، أو مؤهلة.
// Tracked files are files that were in the last snapshot, as well as any newly staged files; they can be unmodified, modified, or staged.
باختصار، الملفات المتعقبة هي الملفات التي يعرفها جت.
// In short, tracked files are files that Git knows about.

الملفات غير المتعقبة هي كل شيء آخر: أيّ ملفات في مجلد عملك لم تكن ضمن لقطتك الأخيرة وليست في منطقة التأهيل.
// Untracked files are everything else -- any files in your working directory that were not in your last snapshot and are not in your staging area.
عندما تستنسخ مستودعا أول مرة، تكون جميع ملفاتك متعقبة وغير معدلة، لأن جت سَحَبها لك للتو ولم تعدّل فيها شيئا بعد.
// When you first clone a repository, all of your files will be tracked and unmodified because Git just checked them out and you haven't edited anything.

وعندما تبدأ في تعديل الملفات، سيراها جت معدلة، لأنك غيّرتها عما كانت عليه في إيداعك الأخير.
// As you edit files, Git sees them as modified, because you've changed them since your last commit.
وعندما تشرع في العمل، ستنتقي من هذه الملفات ما تؤهله ثم تودِع هذه التعديلات المؤهلة، ثم تعيد الكَرَّة.
// As you work, you selectively stage these modified files and then commit all those staged changes, and the cycle repeats.

.دورة حياة حالة ملفاتك
// .The lifecycle of the status of your files
image::images/lifecycle-AR.png[دورة حياة حالة ملفاتك]
// image::images/lifecycle.png[The lifecycle of the status of your files]

[[_checking_status]]
==== فحص حالة ملفاتك
// ==== Checking the Status of Your Files

الأداة الرئيسية التي تستعملها لتحديد أي الملفات في أي حالة هي أمر الحالة، `git status`.(((git commands, status)))
// The main tool you use to determine which files are in which state is the `git status` command.(((git commands, status)))
إذا نفّذت هذا الأمر مباشرةً بعد استنساخ، سترى شيئا مثل هذا:
// If you run this command directly after a clone, you should see something like this:

[source,console]
----
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
nothing to commit, working tree clean
----

هذا يعني أن لديك مجلد عمل نظيف؛ أي أن لا ملف من ملفاتك المتعقبة معدل.
// This means you have a clean working directory; in other words, none of your tracked files are modified.
وأيضا لا يرى جت أي ملفات غير متعقبة، وإلا لَسَرَدها هنا.
// Git also doesn't see any untracked files, or they would be listed here.
وأخيرا، يخبرك هذا الأمر أي فرع أنت فيه، ويعلِمك أنه لم يختلف عن أخيه الفرع الذي في المستودع البعيد.
// Finally, the command tells you which branch you're on and informs you that it has not diverged from the same branch on the server.
ذلك الفرع حتى الآن هو دائما `master`، وهو المبدئي؛ لا تحتاج أن تقلق بشأنه هنا.
// For now, that branch is always `master`, which is the default; you won't worry about it here.
سيناقش <<ch03-git-branching#ch03-git-branching>> الفروع والإشارات بالتفصيل.
// <<ch03-git-branching#ch03-git-branching>> will go over branches and references in detail.

[NOTE]
====
غيّرت شركة جت‌هب (GitHub) اسم المستودع المبدئي من `master` إلى `main` في منتصف عام ٢٠٢٠، ثم تبعتها خدمات استضافة جت الأخرى.
// GitHub changed the default branch name from `master` to `main` in mid-2020, and other Git hosts followed suit.
لذلك قد تجد أن اسم الفرع المبدئي هو `main` في المستودعات التي أُنشئت حديثًا، وليس `master`.
// So you may find that the default branch name in some newly created repositories is `main` and not `master`.
وأيضا يمكنك تغيير اسم الفرع المبدئي (كما رأيت في <<ch01-getting-started#_new_default_branch>>)، فربما ترى اسمًا آخر للفرع المبدئي.
// In addition, the default branch name can be changed (as you have seen in <<ch01-getting-started#_new_default_branch>>), so you may see a different name for the default branch.

ولكن ما زال جت نفسه يستعمل `master` اسمًا للفرع المبدئي، لذلك فهذا ما سنستعمل خلال الك‍تاب.
// However, Git itself still uses `master` as the default, so we will use it throughout the book.
====


لنقُل أنك أضفت ملفًا جديدًا إلى مشروعك، مثلا ملف `README` («اقرأني») صغير.
// Let's say you add a new file to your project, a simple `README` file.
إذا لم يكن هذا الملف موجودًا من قبل، ونفّذت أمر الحالة `git status`، فسترى ملفك غير المتعقب هكذا:
// If the file didn't exist before, and you run `git status`, you see your untracked file like so:

[source,console]
----
$ echo 'My Project' > README
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Untracked files:
  (use "git add <file>..." to include in what will be committed)

    README

nothing added to commit but untracked files present (use "git add" to track)
----

نرى أن ملفك الجديد غير متعقب، لأنه تحت عنوان "`Untracked files`" («ملفات غير متعقبة») في ناتج الحالة.
// You can see that your new `README` file is untracked, because it's under the "`Untracked files`" heading in your status output.
«غير متعقب» لا يعني إلا أن جت يرى ملفًا لم يكن في اللقطة السابقة (الإيداع الأخير)، ولم تؤهله بعد. ولن يبدأ جت في ضمه إلى لقطات الإيداعات إلا بعد أن تخبره بذلك بأمر صريح.
// Untracked basically means that Git sees a file you didn't have in the previous snapshot (commit), and which hasn't yet been staged; Git won't start including it in your commit snapshots until you explicitly tell it to do so.
إنه لا يفعل ذلك لكيلا تضم بالخطأ ملفات رقمية مولدة أو ملفات أخرى لم تشأ ضمها أصلا.
// It does this so you don't accidentally begin including generated binary files or other files that you did not mean to include.
ولكنك تريد ضم `README`، فهيا بنا نبدأ تعقب هذا الملف.
// You do want to start including `README`, so let's start tracking the file.

[[_tracking_files]]
==== تعقب ملفات جديدة
// ==== Tracking New Files

لبدء تعقب ملف جديد، استخدم أمر الإضافة `git add`.(((git commands, add)))
// In order to begin tracking a new file, you use the command `git add`.(((git commands, add)))
مثلا لبدء تعقب ملف `README`، نفّذ هذا:
// To begin tracking the `README` file, you can run this:

[source,console]
----
$ git add README
----

إذا نفذت أمر الحالة مجددا، سترى ملف `README` قد صار متعقبا ومؤهلا للإيداع:
// If you run your status command again, you can see that your `README` file is now tracked and staged to be committed:

[source,console]
----
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)

    new file:   README

----

نعرف أنه مؤهلٌ لأنه تحت عنوان "`Changes to be committed`" («تعديلات ستُودَع»).
// You can tell that it's staged because it's under the "`Changes to be committed`" heading.
إذا أودعت الآن، فإن نسخة الملف وقت تنفيذ أمر الإضافة `git add` هي التي ستكون في اللقطة التاريخية التالية.
// If you commit at this point, the version of the file at the time you ran `git add` is what will be in the subsequent historical snapshot.
تذكر أنك عندما نفذت أمر الابتداء `git init` سابقا، أتبعته بأمر الإضافة `git add <ملفات>` والذي بدأ تعقب الملفات التي في مجلدك.(((git commands, init)))(((git commands, add)))
// You may recall that when you ran `git init` earlier, you then ran `git add <files>` -- that was to begin tracking files in your directory.(((git commands, init)))(((git commands, add)))
أمر الإضافة `git add` يأخذ مسار ملف أو مجلد. فإن كان مجلدًا فإنه يضيف جميع الملفات التي فيه وفي أي مجلد فرعي فيه.
// The `git add` command takes a path name for either a file or a directory; if it's a directory, the command adds all the files in that directory recursively.

==== تأهيل ملفات معدلة
// ==== Staging Modified Files

لنعدّل ملفًا جعلناه متعقبًا بالفعل.
// Let's change a file that was already tracked.
إذا عدّلت الملف المتعقب `CONTRIBUTING.md` ونفذت أمر الحالة مجددًا، فترى ما يشبه هذا:
// If you change a previously tracked file called `CONTRIBUTING.md` and then run your `git status` command again, you get something that looks like this:

[source,console]
----
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    new file:   README

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md

----

يظهر اسم الملف `CONTRIBUTING.md` تحت عنوان "`Changes not staged for commit`" («تعديلات غير مؤهلة للإيداع») -- والذي يعني أن ملفًا متعقبًا قد تغيّر في مجلد العمل، ولكنه لم يؤهل بعد.
// The `CONTRIBUTING.md` file appears under a section named "`Changes not staged for commit`" -- which means that a file that is tracked has been modified in the working directory but not yet staged.
لتأهيله، نفذ أمر الإضافة `git add`.
// To stage it, you run the `git add` command.
يُستخدم أمر الإضافة لأغراض عديدة: لبدء تعقب ملفات جديدة، ولتأهيل الملفات، ولأفعال أخرى مثل إعلان حل الملفات في نزاعات الدمج.
// `git add` is a multipurpose command -- you use it to begin tracking new files, to stage files, and to do other things like marking merge-conflicted files as resolved.
ربما من المفيد أن تعتبرها بمعنى «أضف تحديدا هذا المحتوى إلى الإيداع التالي» بدلا من «أضف هذا الملف إلى المشروع».(((git commands, add)))
// It may be helpful to think of it more as "`add precisely this content to the next commit`" rather than "`add this file to the project`".(((git commands, add)))
لننفذ `git add` الآن لتأهيل ملف `CONTRIBUTING.md` ثم ننفذ `git status` مجددا:
// Let's run `git add` now to stage the `CONTRIBUTING.md` file, and then run `git status` again:

[source,console]
----
$ git add CONTRIBUTING.md
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    new file:   README
    modified:   CONTRIBUTING.md

----

كلا الملفين مؤهلان وسيكونان في إيداعك التالي.
// Both files are staged and will go into your next commit.
لنقُل أنك تذكرت الآن تعديلًا طفيفًا أردته في ملف `CONTRIBUTING.md` قبل إيداعه.
// At this point, suppose you remember one little change that you want to make in `CONTRIBUTING.md` before you commit it.
ستفتح الملف مجددا، وتصنع تعديلك، وتحفظه وتغلقه. الآن أنت جاهز للإيداع.
// You open it again and make that change, and you're ready to commit.
ولكن، لننفذ `git status` مرة أخرى:
// However, let's run `git status` one more time:

[source,console]
----
$ vim CONTRIBUTING.md
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    new file:   README
    modified:   CONTRIBUTING.md

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md

----

يا للهول!
// What the heck?
لقد صار `CONTRIBUTING.md` مسرودًا أنه مؤهلا _وكذلك_ غير مؤهل.
// Now `CONTRIBUTING.md` is listed as both staged _and_ unstaged.
كيف يُعقل هذا؟
// How is that possible?
يتضح أن جت يؤهل الملف تماما كما هو عندما تنفذ `git add`.
// It turns out that Git stages a file exactly as it is when you run the `git add` command.
فإذا أودعت الآن، فإن ما سيودع هو نسخة `CONTRIBUTING.md` التي كانت موجودة عندما نفذت أمر الإضافة `git add` آخر مرة، وليس نسخة الملف الظاهرة لديك في مجلد العمل عندما تنفذ أمر الإيداع `git commit`.
// If you commit now, the version of `CONTRIBUTING.md` as it was when you last ran the `git add` command is how it will go into the commit, not the version of the file as it looks in your working directory when you run `git commit`.
فإن عدّلت ملفًا بعد تنفيذ أمر الإضافة، فتحتاج إلى تنفيذه مرة أخرى لتأهيل النسخة الأخيرة من الملف:
// If you modify a file after you run `git add`, you have to run `git add` again to stage the latest version of the file:

[source,console]
----
$ git add CONTRIBUTING.md
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    new file:   README
    modified:   CONTRIBUTING.md
----

==== الحالة الموجزة
// ==== Short Status

مع كون ناتج أمر الحالة `git status` شاملًا، إلا أنه كثير الكلام.
// While the `git status` output is pretty comprehensive, it's also quite wordy.
يتيح جت أيضا خيارا للحالة الموجزة، مما يتيح لك رؤية تعديلاتك بإيجاز:
// Git also has a short status flag so you can see your changes in a more compact way.
إذا نفذت `git status -s` أو `git status --short`، فسيعطيك الأمر ناتجًا أقصر كثيرا:
// If you run `git status -s` or `git status --short` you get a far more simplified output from the command:

[source,console]
----
$ git status -s
 M README
MM Rakefile
A  lib/git.rb
M  lib/simplegit.rb
?? LICENSE.txt
----

أمام الملفات الجديدة التي لم تُتعقب علامتا `??`. والملفات الجديدة المؤهلة أمامها `A` (اختصار «أضيف»). والملفات المعدّلة أمامها `M` (اختصار «معدّل»). وهكذا.
// New files that aren't tracked have a `??` next to them, new files that have been added to the staging area have an `A`, modified files have an `M` and so on.
ويوجد عمودان في الناتج أمام أسماء الملفات: العمود الأيسر يوضّح حالته في منطقة التأهيل، والعمود الأيمن يوضّح حالته في شجرة العمل.
// There are two columns to the output -- the left-hand column indicates the status of the staging area and the right-hand column indicates the status of the working tree.
لذا ففي ناتج مثالنا هذا، ملف `README` معدّل في مجلد العمل ولكنه ليس مؤهلا بعد، ولكن ملف `lib/simplegit.rb` معدّل ومؤهل.
// So for example in that output, the `README` file is modified in the working directory but not yet staged, while the `lib/simplegit.rb` file is modified and staged.
وملف `Rakefile` معدّل ومؤهل ثم معدّل مرة أخرى، ففيه تعديلات مؤهلة وتعديلات غير مؤهلة.
// The `Rakefile` was modified, staged and then modified again, so there are changes to it that are both staged and unstaged.

[[_ignoring]]
==== تجاهل ملفات
// ==== Ignoring Files

سيكون لديك غالبا فئة من الملفات التي لا تريد من جت أن يضيفها آليًا ولا حتى أن يخبرك أنها غير متعقبة.
// Often, you'll have a class of files that you don't want Git to automatically add or even show you as being untracked.
هذه غالبا ملفات موّلدة آليًا مثل ملفات السجلات أو ملفات مبنية.
// These are generally automatically generated files such as log files or files produced by your build system.
يمكنك في مثل هذه الحالات إنشاء ملف يسمى `.gitignore` (يبدأ بنقطة، لجعله مخفيا) والذي يسرد أنماط أسماء هذه الملفات ليتجاهلها.(((ignoring files)))
// In such cases, you can create a file listing patterns to match them named `.gitignore`.(((ignoring files)))
هذا مثال على ملف `.gitignore` :
// Here is an example `.gitignore` file:

[source,console]
----
$ cat .gitignore
*.[oa]
*~
----

يطلب السطر الأول من جت أن يتجاهل أي ملفات ينتهي اسمها بـ "`.o`" أو "`.a`" -- ملفات الكائنات وملفات المكتبات المضغوطة التي قد تُنتج أثناء بناء مصدرك البرمجي.
// The first line tells Git to ignore any files ending in "`.o`" or "`.a`" -- object and archive files that may be the product of building your code.
ويطلب السطر الثاني من جت أن يتجاهل جميع الملفات التي ينتهي اسمها بعلامة التلدة (`~`)، التي تستعملها محررات نصوص عديدة مثل Emacs لتمييز الملفات المؤقتة.
// The second line tells Git to ignore all files whose names end with a tilde (`~`), which is used by many text editors such as Emacs to mark temporary files.
يمكنك أيضا إضافة مجلد `log` أو `tmp` أو `pid`، أو الوثائق المولدة آليًا، إلخ.
// You may also include a log, tmp, or pid directory; automatically generated documentation; and so on.
إعداد ملف التجاهل `.gitignore` لمستودعك الجديد قبل الانطلاق في المشروع هو تفكير حسن عموما، لكيلا تودع بالخطأ ملفات يقينا لا تريدها في مستودعك.
// Setting up a `.gitignore` file for your new repository before you get going is generally a good idea so you don't accidentally commit files that you really don't want in your Git repository.

إليك قواعد الأنماط التي تستطيع استعمالها في ملف التجاهل:
// The rules for the patterns you can put in the `.gitignore` file are as follows:

* تُهمل الأسطر الفارغة أو الأسطر البادئة بعلامة `#`.
// * Blank lines or lines starting with `#` are ignored.
* يمكن استعمال أنماط توسيع المسارات (glob) المعتادة (ستُوّضح بالتفصيل)، وستُطبق في جميع مجلدات شجرة العمل.
// * Standard glob patterns work, and will be applied recursively throughout the entire working tree.
* يمكنك بدء الأنماط بفاصلة مائلة (`/`) لمطابقة الملفات أو المجلدات في المجلد الحالي فقط، وليس أي مجلد فرعي.
// * You can start patterns with a forward slash (`/`) to avoid recursivity.
* يمكنك إنهاء الأنماط بفاصلة مائلة (`/`) لتحديد مجلد.
// * You can end patterns with a forward slash (`/`) to specify a directory.
* يمكنك نفي نمط ببدئه بعلامة تعجب (`!`).
// * You can negate a pattern by starting it with an exclamation point (`!`).

تشبه أنماط glob نسخة مُيسَّرة من «التعابير النمطية»، وتستعملها الصدفات.
// Glob patterns are like simplified regular expressions that shells use.
فتُطابق النجمة (`\*`) صفر أو أكثر من المحارف؛ ويُطابق `[abc]` أي حرف داخل القوسين المربعين (أي `a` أو `b` أو `c` في هذه الحالة)؛ وتُطابق علامة الاستفهام الغربية (`?`) مِحرَفًا واحدًا؛ ولمطابقة مدًى من المحارف، نكتب أول مِحرف وآخر مِحرف (بترتيبهما في Unicode) داخل قوسين مربعين وبينهما شرطة، فمثلا لمطابقة رقمًا من الأرقام المغربية (من `0` إلى `9`) نكتب `[0-9]`.
// An asterisk (`\*`) matches zero or more characters; `[abc]` matches any character inside the brackets (in this case a, b, or c); a question mark (`?`) matches a single character; and brackets enclosing characters separated by a hyphen (`[0-9]`) matches any character between them (in this case 0 through 9).
يمكنك أيضا استخدام نجمتين لمطابقة أي عدد من المجلدات الفرعية، فمثلا يطابق النمط `a/**/z` كلًا من `a/z` و `a/b/z` و `a/b/c/z` وهكذا.
// You can also use two asterisks to match nested directories; `a/**/z` would match `a/z`, `a/b/z`, `a/b/c/z`, and so on.

إليك مثال آخر على ملف `.gitignore` :
// Here is another example `.gitignore` file:

[source]
----
{عر}###⭅ تجاهل كل الملفات ذات الامتداد a #{نه}
*.a

{عر}###⭅ لكن تعقب lib.a، حتى لو كنت تتجاهل جميع ملفات a بالأعلى #{نه}
!lib.a

{عر}###⭅ تجاهل فقط TODO في المجلد الحالي، وليس subdir/TODO مثلا #{نه}
/TODO

{عر}###⭅ تجاهل أي مجلد اسمه build وكل شيء داخله #{نه}
build/

{عر}###⭅ تجاهل doc/notes.txt، وليس doc/server/arch.txt #{نه}
doc/*.txt

{عر}###⭅ تجاهل جميع pdf في مجلد doc أو أي مجلد فرعي فيه #{نه}
doc/**/*.pdf
----

////
[source]
----
# ignore all .a files
*.a

# but do track lib.a, even though you're ignoring .a files above
!lib.a

# only ignore the TODO file in the current directory, not subdir/TODO
/TODO

# ignore all files in any directory named build
build/

# ignore doc/notes.txt, but not doc/server/arch.txt
doc/*.txt

# ignore all .pdf files in the doc/ directory and any of its subdirectories
doc/**/*.pdf
----
////

[TIP]
====
إذا أردت نقطة بداية لمشروعك، FIXME فإن جت‌هب يرعى قائمةً شاملة نسبيًا من أمثلة ملفات التجاهل الحسنة لعشرات المشروعات واللغات في https://github.com/github/gitignore[^].
// GitHub maintains a fairly comprehensive list of good `.gitignore` file examples for dozens of projects and languages at https://github.com/github/gitignore[^] if you want a starting point for your project.
====

[NOTE]
====
قد يكون لدى المستودع في الحالات البسيطة ملف تجاهل واحد في مجلد الجذر، والذي يطبق على المستودع بجميع مجلداته الفرعية.
// In the simple case, a repository might have a single `.gitignore` file in its root directory, which applies recursively to the entire repository.
ولكن ممكن كذلك وجود ملفات تجاهل أخرى في مجلدات فرعية.
// However, it is also possible to have additional `.gitignore` files in subdirectories.
وملفات التجاهل الداخلية هذه لا تطبق قواعدها إلا على الملفات التي في مجلداتها.
// The rules in these nested `.gitignore` files apply only to the files under the directory where they are located.
ومثلا لدى مستودع نواة لينكس ٢٠٦ ملف تجاهل.
// The Linux kernel source repository has 206 `.gitignore` files.

يخرج عن نطاق الك‍تاب الغوص في تفاصيل ملفات التجاهل المتعددة؛ انظر `man gitignore` للتفاصيل.
// It is beyond the scope of this book to get into the details of multiple `.gitignore` files; see `man gitignore` for the details.
====

[[_git_diff_staged]]
==== رؤية تعديلاتك المؤهلة وغير المؤهلة
// ==== Viewing Your Staged and Unstaged Changes

إذا كنت تجد ناتج أمر الحالة `git status` شديد الغموض -- تريد معرفة ما الذي عدّلته على وجه التحديد، وليس مجرد أسماء الملفات التي تعدّلت -- فيمكنك استخدام أمر الفرق `git diff`.(((git commands, diff)))
// If the `git status` command is too vague for you -- you want to know exactly what you changed, not just which files were changed -- you can use the `git diff` command.(((git commands, diff)))
نتناوله بالتفصيل فيما بعد، لكنك في الغالب تستخدمه لإجابة أحد التساؤلين: ما الذي عدّلته ولم تؤهله بعد؟
// We'll cover `git diff` in more detail later, but you'll probably use it most often to answer these two questions: What have you changed but not yet staged?
وما الذي أهّلته وعلى وشك إيداعه؟
// And what have you staged that you are about to commit?
وبالرغم من أن أمر الحالة `git status` يجيبهما إجابةً عامة جدا بسرد أسماء الملفات، إلا أن أمر الفرق `git diff` يُظهر لك بالتحديد السطور المضافة والمزالة: الرُقعة، إن جاز التعبير.
// Although `git status` answers those questions very generally by listing the file names, `git diff` shows you the exact lines added and removed -- the patch, as it were.

لنقُل أنك عدّلت ملف `README` مجددا وأهّلته، ثم عدّلت ملف `CONTRIBUTING.md` من غير تأهيله.
// Let's say you edit and stage the `README` file again and then edit the `CONTRIBUTING.md` file without staging it.
إذا نفذت أمر الحالة، سترى من جديد شيئا مثل هذا:
// If you run your `git status` command, you once again see something like this:

[source,console]
----
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    modified:   README

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md
----

لرؤية ما الذي عدّلته ولم تؤهله بعد، اكتب `git diff` من غير أي معاملات أخرى:
// To see what you've changed but not yet staged, type `git diff` with no other arguments:

[source,console]
----
$ git diff
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index 8ebb991..643e24f 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -65,7 +65,8 @@ branch directly, things can get messy.
 Please include a nice description of your changes when you submit your PR;
 if we have to read the whole diff to figure out why you're contributing
 in the first place, you're less likely to get feedback and have your change
-merged in.
+merged in. Also, split your changes into comprehensive chunks if your patch is
+longer than a dozen lines.

 If you are starting to work on a particular area, feel free to submit a PR
 that highlights your work in progress (and note in the PR title that it's
----

يقارن هذا الأمر بين محتويات مجلد العمل ومنطقة التأهيل،
// That command compares what is in your working directory with what is in your staging area.
ويُخبرك الناتج بما عدّلته ولم تؤهله بعد.
// The result tells you the changes you've made that you haven't yet staged.

إذا أردت رؤية ما الذي أهّلته ليكون في الإيداع التالي، يمكنك استخدام `git diff --staged`.
// If you want to see what you've staged that will go into your next commit, you can use `git diff --staged`.
يقارن هذا الأمر بين تعديلاتك المؤهلة وإيداعك الأخير:
// This command compares your staged changes to your last commit:

[source,console]
----
$ git diff --staged
diff --git a/README b/README
new file mode 100644
index 0000000..03902a1
--- /dev/null
+++ b/README
@@ -0,0 +1 @@
+My Project
----

مهمٌ ملاحظة أن `git diff` وحده لا يُظهر جميع التعديلات التي تمت بعد الإيداع الأخير -- إنما التعديلات غير المؤهلة فقط.
// It's important to note that `git diff` by itself doesn't show all changes made since your last commit -- only changes that are still unstaged.
فإذا أهّلت جميع تعديلاتك، فلن يعطيك `git diff` أي ناتج.
// If you've staged all of your changes, `git diff` will give you no output.

مثالٌ آخر: إذا أهّلت ملف `CONTRIBUTING.md` ثم عدّلته، يمكنك استخدام أمر الفرق لمعرفة التعديلات على الملف التي أُهّلِت والتعديلات التي لم تؤهل.
// For another example, if you stage the `CONTRIBUTING.md` file and then edit it, you can use `git diff` to see the changes in the file that are staged and the changes that are unstaged.
فإذا كانت بيئتنا تبدو هكذا:
// If our environment looks like this:

[source,console]
----
$ git add CONTRIBUTING.md
$ echo '# test line' >> CONTRIBUTING.md
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    modified:   CONTRIBUTING.md

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md
----

يمكننا إذًا استخدام `git diff` لرؤية ما الذي لم يؤهل بعد:
// Now you can use `git diff` to see what is still unstaged:

[source,console]
----
$ git diff
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index 643e24f..87f08c8 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -119,3 +119,4 @@ at the
 ## Starter Projects

 See our [projects list](https://github.com/libgit2/libgit2/blob/development/PROJECTS.md).
+# test line
----

واستخدام `git diff --cached` لرؤية ما الذي أهّلته حتى الآن (الخياران `--staged` و `--cached` مترادفان):
// and `git diff --cached` to see what you've staged so far (`--staged` and `--cached` are synonyms):

[source,console]
----
$ git diff --cached
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index 8ebb991..643e24f 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -65,7 +65,8 @@ branch directly, things can get messy.
 Please include a nice description of your changes when you submit your PR;
 if we have to read the whole diff to figure out why you're contributing
 in the first place, you're less likely to get feedback and have your change
-merged in.
+merged in. Also, split your changes into comprehensive chunks if your patch is
+longer than a dozen lines.

 If you are starting to work on a particular area, feel free to submit a PR
 that highlights your work in progress (and note in the PR title that it's
----

[NOTE]
.فروقات جت باستخدام أداة خارجية
// .Git Diff in an External Tool
====
سنستمر في استخدام أمر الفرق `git diff` بطرائق متنوعة خلال الك‍تاب.
// We will continue to use the `git diff` command in various ways throughout the rest of the book.
ولكن توجد طريقة أخرى لرؤية هذه الفروقات إذا كنت تفضل برنامج عرض فروقات خارجي أو رسومي.
// There is another way to look at these diffs if you prefer a graphical or external diff viewing program instead.
يمكنك باستخدام `git difftool` بدلا من `git diff` أن ترى هذه الفروقات في برنامج مثل emerge أو vimdiff أو برامج كثيرة أخرى (بما فيها البرامج التجارية).
// If you run `git difftool` instead of `git diff`, you can view any of these diffs in software like emerge, vimdiff and many more (including commercial products).
نفذ `git difftool --tool-help` لترى ما المتاح على نظامك.
// Run `git difftool --tool-help` to see what is available on your system.
====

[[_committing_changes]]
==== إيداع تعديلاتك
// ==== Committing Your Changes

الآن وقد هيّأت منطقة تأهيلك كما تحب، يمكنك أن تودع تعديلاتك.
// Now that your staging area is set up the way you want it, you can commit your changes.
تذكر أنه لن يُحفظ في هذا الإيداع أي شي ما زال غير مؤهل -- أيْ أيّ ملفات أنشأتها أو عدّلتها ولم تنفذ `git add` عليها بعدما عدلتها؛
// Remember that anything that is still unstaged -- any files you have created or modified that you haven't run `git add` on since you edited them -- won't go into this commit.
بل ستبقى ملفات معدلة على القرص.
// They will stay as modified files on your disk.
لنقُل أنك عندما نفذت أمر `git status` رأيت أن كل شيء مؤهل، لذا فأنت الآن مستعد لإيداع تعديلاتك.(((git commands, status)))
// In this case, let's say that the last time you ran `git status`, you saw that everything was staged, so you're ready to commit your changes.(((git commands, status)))
أسهل طريقة للإيداع هي ك‍تابة `git commit`:(((git commands, commit)))
// The simplest way to commit is to type `git commit`:(((git commands, commit)))

[source,console]
----
$ git commit
----

فعل هذا يفتح محررك المختار.
// Doing so launches your editor of choice.

[NOTE]
====
يعيّن «محررَك المختار» متغيرُ بيئة المحرر، `EDITOR`، في صدفتك، والذي غالبا يكون `vim` أو `emacs`. مع أنك تستطيع جعله أي شيء تريده بالأمر `git config --global core.editor` كما رأيت في <<ch01-getting-started#ch01-getting-started>>(((editor, changing default)))(((git commands, config)))
// This is set by your shell's `EDITOR` environment variable -- usually vim or emacs, although you can configure it with whatever you want using the `git config --global core.editor` command as you saw in <<ch01-getting-started#ch01-getting-started>>.(((editor, changing default)))(((git commands, config)))
====

يُظهر المحرر النصَ التالي (المثال من Vim):
// The editor displays the following text (this example is a Vim screen):

[source]
----

# Please enter the commit message for your changes. Lines starting
# with '#' will be ignored, and an empty message aborts the commit.
# On branch master
# Your branch is up-to-date with 'origin/master'.
#
# Changes to be committed:
#	new file:   README
#	modified:   CONTRIBUTING.md
#
~
~
~
".git/COMMIT_EDITMSG" 9L, 283C
----

والتي يترجم أولها إلى: «أدخل رسالة الإيداع لتعديلاتك. الأسطر البادئة بعلامة `#` ستُهمل، ورسالة فارغة ستلغي الإيداع.»

نرى أن رسالة الإيداع المبدئية تشمل ناتج أمر الحالة الأحدث في صورة تعليق، وأن بها سطر فارغ في أولها.
// You can see that the default commit message contains the latest output of the `git status` command commented out and one empty line on top.
يمكنك إزالة هذه التعليقات وك‍تابة رسالة إيداعك، أو تركها في مكانها لتتذكر ماذا تودع.
// You can remove these comments and type your commit message, or you can leave them there to help you remember what you're committing.

[NOTE]
====
إذا احتجت تذكيرًا أشد تفصيلًا بما عدّلت، يمكنك إمرار الخيار `-v` لأمر الإيداع، `git commit`.
// For an even more explicit reminder of what you've modified, you can pass the `-v` option to `git commit`.
يضع هذا فروقات تعديلاتك في المحرر، كي ترى بالتحديد ما التعديلات الذاهبة للإيداع.
// Doing so also puts the diff of your change in the editor so you can see exactly what changes you're committing.
====

عندما تحفظ وتغلق المحرر، سيصنع جت إيداعك بالرسالة التي كتبتها (باستثناء الفروقات والتعليقات، أي الأسطر البادئة بعلامة `#`).
// When you exit the editor, Git creates your commit with that commit message (with the comments and diff stripped out).

يمكنك عوضًا عن ذلك ك‍تابة رسالة إيداعك في أمر الإيداع نفسه، بالخيار `-m`، مثل هذا:
// Alternatively, you can type your commit message inline with the `commit` command by specifying it after a `-m` flag, like this:

[source,console]
----
$ git commit -m "Story 182: fix benchmarks for speed"
[master 463dc4f] Story 182: fix benchmarks for speed
 2 files changed, 2 insertions(+)
 create mode 100644 README
----

الآن قد صنعت إيداعك الأول!
// Now you've created your first commit!
نرى أن الإيداع أعطاك بعض المعلومات عن نفسه، مثل الفرع الذي أودعت فيه (`master`)، وبصمة الإيداع (`463dc4f`)، وعدد الملفات المعدّلة (`2 files changed`)، وإحصاءات عن السطور المضافة والمزالة في هذا الإيداع (`2 insertion(+)`).
// You can see that the commit has given you some output about itself: which branch you committed to (`master`), what SHA-1 checksum the commit has (`463dc4f`), how many files were changed, and statistics about lines added and removed in the commit.

تذكر أن هذا الإيداع يسجل اللقطة التي أعددتها في منطقة تأهيلك.
// Remember that the commit records the snapshot you set up in your staging area.
أيّ شيء عدّلته ولم تؤهله سيظل جالسًا في مجلد العمل وهو معدَّل؛ يمكنك صنع إيداع آخر لإضافته إلى تاريخ مشروعك.
// Anything you didn't stage is still sitting there modified; you can do another commit to add it to your history.
في كل مرة تصنع إيداعًا، تسجل من مشروعك لقطة يمكنك إرجاع مشروعك إليها أو المقارنة معها فيما بعد.
// Every time you perform a commit, you're recording a snapshot of your project that you can revert to or compare to later.

==== تخطي منطقة التأهيل
// ==== Skipping the Staging Area

(((staging area, skipping)))
مع أن منطقة التأهيل مفيدة لدرجة مدهشة في صياغة الإيداعات كما تشاء بالضبط، إلا أنها أحيانا أعقد مما تحتاج في سير عملك.
// Although it can be amazingly useful for crafting commits exactly how you want them, the staging area is sometimes a bit more complex than you need in your workflow.
يوفر لك جت اختصار سهلًا متى أردت تخطي منطقة التأهيل:
// If you want to skip the staging area, Git provides a simple shortcut.
إضافة الخيار `-a` إلى أمر `git commit` يجعل جت يؤهل من تلقاء نفسه كل ملف متعقب قبل هذا الإيداع، مما يتيح لك تخطي مرحلة الإضافة:
// Adding the `-a` option to the `git commit` command makes Git automatically stage every file that is already tracked before doing the commit, letting you skip the `git add` part:

[source,console]
----
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md

no changes added to commit (use "git add" and/or "git commit -a")
$ git commit -a -m 'Add new benchmarks'
[master 83e38c7] Add new benchmarks
 1 file changed, 5 insertions(+), 0 deletions(-)
----

لاحظ أنك لم تحتجْ إلى تنفيذ `git add` على ملف `CONTRIBUTING.md` في هذه الحالة قبل الإيداع،
// Notice how you don't have to run `git add` on the `CONTRIBUTING.md` file in this case before you commit.
لأن خيار `-a` يضم جميع الملفات المعدلة.
// That's because the `-a` flag includes all changed files.
هذا مريح، لكن احذر: قد يضم هذا الخيار تعديلات غير مرغوب فيها.
// This is convenient, but be careful; sometimes this flag will cause you to include unwanted changes.

[[_removing_files]]
==== إزالة ملفات
// ==== Removing Files

(((files, removing)))
لإزالة ملف من جت، عليك أن تزيله من ملفاتك المتعقبة (أو بتعبير أدق، من منطقة تأهيلك)، ثم تودع.
// To remove a file from Git, you have to remove it from your tracked files (more accurately, remove it from your staging area) and then commit.
يفعل أمر الإزالة `git rm` هذا، وأيضا يزيل الملف من مجلد عملك حتى لا تراه ملفًا غير متعقب في المرة القادمة.
// The `git rm` command does that, and also removes the file from your working directory so you don't see it as an untracked file the next time around.

إذا أزلت الملف من مجلد عملك فقط، سيظهر تحت عنوان "`Changes not staged for commit`" («تعديلات غير مؤهلة للإيداع») في ناتج أمر الحالة:
// If you simply remove the file from your working directory, it shows up under the "`Changes not staged for commit`" (that is, _unstaged_) area of your `git status` output:

[source,console]
----
$ rm PROJECTS.md
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes not staged for commit:
  (use "git add/rm <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

        deleted:    PROJECTS.md

no changes added to commit (use "git add" and/or "git commit -a")
----

عندئذٍ تنفيذك أمر `git rm` يؤهل إزالة الملف:
// Then, if you run `git rm`, it stages the file's removal:

[source,console]
----
$ git rm PROJECTS.md
rm 'PROJECTS.md'
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    deleted:    PROJECTS.md
----

عندما تودع في المرة القادمة ستجد أن الملف قد ذهب ولم يعد متعقبًا.
// The next time you commit, the file will be gone and no longer tracked.
وإذا كنت قد عدّلت الملف أو كنت قد أضفته بالفعل إلى منطقة التأهيل، فعليك فرض الإزالة بالخيار `-f`.
// If you modified the file or had already added it to the staging area, you must force the removal with the `-f` option.
هذه ميزة أمان لكيلا تزيل بالخطأ بيانات لم تسجلها بعد في لقطة ولا يمكن استردادها من جت.
// This is a safety feature to prevent accidental removal of data that hasn't yet been recorded in a snapshot and that can't be recovered from Git.

أمرٌ آخر مفيد قد تود فعله هو إبقاء الملف في شجرة عملك لكن إزالته من منطقة تأهيلك.
// Another useful thing you may want to do is to keep the file in your working tree but remove it from your staging area.
بلفظ آخر، تريد أن ينسى جت وجوده ولا يتعقبه ولكن يبقيه لك على قرصك.
// In other words, you may want to keep the file on your hard drive but not have Git track it anymore.
هذا مفيد خصوصا إن نسيت إضافة شيء إلى ملف التجاهل `.gitignore` ثم أهّلته بالخطأ، مثل ملف سجل كبير أو مجموعة من الملفات المبنية.
// This is particularly useful if you forgot to add something to your `.gitignore` file and accidentally staged it, like a large log file or a bunch of `.a` compiled files.
استعمل الخيار `--cached` لهذا:
// To do this, use the `--cached` option:

[source,console]
----
$ git rm --cached README
----

يمكنك إعطاء الأمر أسماء ملفات أو مجلدات أو أنماط توسيع المسارات (glob).
// You can pass files, directories, and file-glob patterns to the `git rm` command.
يعني هذا أن بإمكانك فعل أشياء مثل:
// That means you can do things such as:

[source,console]
----
$ git rm log/\*.log
----

لاحظ الشرطة المائلة الخلفية (`\`) قبل النجمة `*`؛
// Note the backslash (`\`) in front of the `*`.
هذا ضروري، لأن جت يقوم بنفسه بتوسيع أسماء الملفات بعد أن تقوم صدفتك بتوسيعها. فبغير النجمة ستوسع الصدفة أسماء الملفات قبل أن يراها جت.
// This is necessary because Git does its own filename expansion in addition to your shell's filename expansion.
يحذف هذا الأمر جميع الملفات ذات الامتداد `.log` في مجلد `log/`.
// This command removes all files that have the `.log` extension in the `log/` directory.
أو يمكنك فعل شيء مثل هذا:
// Or, you can do something like this:

[source,console]
----
$ git rm \*~
----

يحذف هذا الأمر جميع الملفات المنتهي اسمها بعلامة التلدة (`~`).
// This command removes all files whose names end with a `~`.

[[_git_mv]]
==== نقل ملفات
// ==== Moving Files

(((files, moving)))
لا يتعقب جت حركة الملفات تعقبًا صريحًا، خلافا لكثير من أنظمة إدارة النسخ الأخرى.
// Unlike many other VCSs, Git doesn't explicitly track file movement.
فإذا غيّرت اسم ملف في جت، لا يخزن جت بيانات وصفية تخبره أنك غيرته.
// If you rename a file in Git, no metadata is stored in Git that tells it you renamed the file.
لكن جت ذكي جدا في تخمين ذلك وهو أمام الأمر الواقع -- سنتعامل مع اكتشاف نقل الملفات بعد قليل.
// However, Git is pretty smart about figuring that out after the fact -- we'll deal with detecting file movement a bit later.

لذا فقد تجد أنه من المحيّر وجود أمر «نقل» (`mv`) في جت.
// Thus it's a bit confusing that Git has a `mv` command.
فإذا أردت تغيير اسم ملف في جت، يمكنك طلبه هكذا:
// If you want to rename a file in Git, you can run something like:

[source,console]
----
$ git mv file_from file_to
----

وسيعمل كما ينبغي.
// and it works fine.
وفي الحقيقة، إذا نفذت أم‍را مثل هذا، ونظرت إلى الحالة، سترى أن جت يعتبره تغيير اسم ملف:
// In fact, if you run something like this and look at the status, you'll see that Git considers it a renamed file:

[source,console]
----
$ git mv README.md README
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    renamed:    README.md -> README
----

ولكن هذا مكافئ لتنفيذ شيء مثل هذا:
// However, this is equivalent to running something like this:

[source,console]
----
$ mv README.md README
$ git rm README.md
$ git add README
----

يخمن جت في سِرِّه أن الاسم قد تغير، لذا فلا يهم إن غيّرت اسمه بهذه الطريقة أو عبر نظام التشغيل أو مدير الملفات (مثلا بأمر النظام `mv`).
// Git figures out that it's a rename implicitly, so it doesn't matter if you rename a file that way or with the `mv` command.
الفرق الحقيقي الوحيد هو أن `git mv` أمر واحد وليس ثلاثة؛ إنه وسيلة راحة.
// The only real difference is that `git mv` is one command instead of three -- it's a convenience function.
والأهم أنك تستطيع استخدام أي أداة تريدها لتغيير أسماء الملفات، ثم تتعامل مع الإضافة والإزالة في جت فيما بعد، قبل الإيداع.
// More importantly, you can use any tool you like to rename a file, and address the `add`/`rm` later, before you commit.
