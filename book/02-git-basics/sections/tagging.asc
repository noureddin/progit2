[[_git_tagging]]
=== ✨ الوسوم
// === Tagging

(((tags)))
مثل معظم أنظمة إدارة النسخ، يستطيع جت وسم المراحل المهمة في تاريخ المشروع.
// Like most VCSs, Git has the ability to tag specific points in a repository's history as being important.
يستعمل الناس هذه الآلية في الغالب لتمييز الإصدارات (`v1.0` و `v2.0` وهكذا).
// Typically, people use this functionality to mark release points (`v1.0`, `v2.0` and so on).
سنتعلم في هذا الفصل كيف نسرد الوسوم الموجودة وكيف ننشئ وسومًا ونحذفها وما أنواع الوسوم المختلفة.
// In this section, you'll learn how to list existing tags, how to create and delete tags, and what the different types of tags are.

==== سرد وسومك
// ==== Listing Your Tags

سرد الوسوم الموجودة في مستودع جت سهل جدا؛
// Listing the existing tags in Git is straightforward.
فقط اكتب `git tag` (اختياريًا مع `-l` أو `--list`):(((git commands, tag)))
// Just type `git tag` (with optional `-l` or `--list`):(((git commands, tag)))

[source,console]
----
$ git tag
v1.0
v2.0
----

يسرد لك هذا الأمر الوسوم بترتيب أبجدي؛ أي أن ترتيب عرضها ليس له أهمية حقيقية.
// This command lists the tags in alphabetical order; the order in which they are displayed has no real importance.

يمكنك أيضا البحث عن الوسوم التي تطابق نمطًا معينًا.
// You can also search for tags that match a particular pattern.
يحتوي مستودع مصدر جت مثلا على أكثر من خمسمئة وسم.
// The Git source repo, for instance, contains more than 500 tags.
فإذا كنت مهتمًا برؤية سلسلة 1.8.5 فقط، فنفذ هذا:
// If you're interested only in looking at the 1.8.5 series, you can run this:

[source,console]
----
$ git tag -l "v1.8.5*"
v1.8.5
v1.8.5-rc0
v1.8.5-rc1
v1.8.5-rc2
v1.8.5-rc3
v1.8.5.1
v1.8.5.2
v1.8.5.3
v1.8.5.4
v1.8.5.5
----

[NOTE]
.سرد الوسوم بأنماط يحتاج الخيار `-l` أو `--list`
// .Listing tag wildcards requires `-l` or `--list` option
====
إذا لم تُرِد إلا قائمة الوسوم بكاملها، فتنفيذ `git tag` يفترض أنك تريد سرد الوسوم فيعطيك إياه؛ استخدام `-l` أو `--list` في هذه الحالة اختياري.
// If you want just the entire list of tags, running the command `git tag` implicitly assumes you want a listing and provides one; the use of `-l` or `--list` in this case is optional.

لكن إذا أعطيته نمطًا لمطابقة وسوم عديدة، فيجب عليك استخدام خيار السرد: `-l` أو `--list`.
// If, however, you're supplying a wildcard pattern to match tag names, the use of `-l` or `--list` is mandatory.
====

==== إنشاء وسوم
// ==== Creating Tags

يدعم جت نوعين من الوسوم: _خفيفة_، و__معنونة__.
// Git supports two types of tags: _lightweight_ and _annotated_.

الوسم الخفيف كأنه فرع لا يتغيّر: مجرد إشارة إلى إيداع معين.
// A lightweight tag is very much like a branch that doesn't change -- it's just a pointer to a specific commit.

لكن على النقيض، الوسوم المعنونة هي كائنات كاملة في قاعدة بيانات جت؛
// Annotated tags, however, are stored as full objects in the Git database.
يحسب جت بصمتها، ويسجل معها اسم الواسم، وبريده، وتاريخ الوسم، ورسالته، ويمكن توقيعها وتوثيقها باستعمال GNU Privacy Guard&lrm; (GPG).
// They're checksummed; contain the tagger name, email, and date; have a tagging message; and can be signed and verified with GNU Privacy Guard (GPG).
من الأفضل في العموم إنشاء وسوم معنونة حتى تتمتع بكل هذه المعلومات، لكن إذا أردت وسمًا مؤقتًا أو لسبب ما لم تشأ الاحتفاظ بكل هذه المعلومات، فلا تزال الوسوم الخفيفة متاحة.
// It's generally recommended that you create annotated tags so you can have all this information; but if you want a temporary tag or for some reason don't want to keep the other information, lightweight tags are available too.

[[_annotated_tags]]
==== الوسوم المعنونة
// ==== Annotated Tags

(((tags, annotated)))
إنشاء الوسوم المعنونة في جت يسير.
// Creating an annotated tag in Git is simple.
الطريقة الأسهل هي إضافة `-a` إلى أمر الوسم:(((git commands, tag)))
// The easiest way is to specify `-a` when you run the `tag` command:(((git commands, tag)))

[source,console]
----
$ git tag -a v1.4 -m "my version 1.4"
$ git tag
v0.1
v1.3
v1.4
----

والخيار `-m` يعيّن رسالة الوسم، التي تخزّن معه.
// The `-m` specifies a tagging message, which is stored with the tag.
وإذا لم تعيّن رسالة للوسم المعنون، فإن جت سيفتح لك محررك حتى تكتبها فيه.
// If you don't specify a message for an annotated tag, Git launches your editor so you can type it in.

يمكنك أيضا رؤية تاريخ الوسم مع الإيداع الموسوم بأمر الإظهار `git show`:
// You can see the tag data along with the commit that was tagged by using the `git show` command:

[source,console]
----
$ git show v1.4
tag v1.4
Tagger: Ben Straub <ben@straub.cc>
Date:   Sat May 3 20:19:12 2014 -0700

my version 1.4

commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    Change version number
----

يُظهر لك هذا معلومات الواسم وتاريخ وسم الإيداع ورسالة الوسم، ثم معلومات الإيداع نفسه.
// That shows the tagger information, the date the commit was tagged, and the annotation message before showing the commit information.

==== الوسوم الخفيفة
// ==== Lightweight Tags

(((tags, lightweight)))
طريقة أخرى لوسم الإيداعات هي باستعمال الوسوم الخفيفة.
// Another way to tag commits is with a lightweight tag.
هذا يعني تخزين بصمة الإيداع في ملف؛ لا معلومات أخرى تُخزّن.
// This is basically the commit checksum stored in a file -- no other information is kept.
لإنشاء وسم خفيف، لا تعطِ أمر الوسم أيًّا من الخيارات `-a` أو `-s` أو `-m`؛ أعطه فقط اسم الوسم:
// To create a lightweight tag, don't supply any of the `-a`, `-s`, or `-m` options, just provide a tag name:

[source,console]
----
$ git tag v1.4-lw
$ git tag
v0.1
v1.3
v1.4
v1.4-lw
v1.5
----

تنفيذ `git show` على مثل هذا الوسم لن يعطيك معلومات الوسم الإضافية،(((git commands, show)))
// This time, if you run `git show` on the tag, you don't see the extra tag information.(((git commands, show)))
بل يُظهر فقط معلومات الإيداع:
// The command just shows the commit:

[source,console]
----
$ git show v1.4-lw
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    Change version number
----

==== الوسم لاحقًا
// ==== Tagging Later

يمكنك أيضا وسم إيداعات قديمة تخطيتها.
// You can also tag commits after you've moved past them.
لنفترض مثلا أن تاريخ إيداعاتك يبدو هكذا:
// Suppose your commit history looks like this:

[source,console]
----
$ git log --pretty=oneline
15027957951b64cf874c3557a0f3547bd83b3ff6 Merge branch 'experiment'
a6b4c97498bd301d84096da251c98a07c7723e65 Create write support
0d52aaab4479697da7686c15f77a3d64d9165190 One more thing
6d52a271eda8725415634dd79daabbc4d9b6008e Merge branch 'experiment'
0b7434d86859cc7b8c3d5e1dddfed66ff742fcbc Add commit function
4682c3261057305bdd616e23b64b0857d832627b Add todo file
166ae0c4d3f420721acbb115cc33848dfcc2121a Create write support
9fceb02d0ae598e95dc970b74767f19372d61af8 Update rakefile
964f16d36dfccde844893cac5b347e7b3d44abbc Commit the todo
8a5cbc430f1a9c3d00faaeffd07798508422908a Update readme
----

الآن لنفترض أنك نسيت وسم المشروع عند `v1.2`، والتي كانت عند إيداع "`Update rakefile`".
// Now, suppose you forgot to tag the project at v1.2, which was at the "`Update rakefile`" commit.
يمكنك فعل هذا بعدما حدث ما حدث.
// You can add it after the fact.
لوسم ذلك الإيداع، اكتب في نهاية أمر الوسم بصمةَ الإيداع (أو جزءًا من أولها):
// To tag that commit, you specify the commit checksum (or part of it) at the end of the command:

[source,console]
----
$ git tag -a v1.2 9fceb02
----

والآن ستجد أنك قد وسمت الإيداع:(((git commands, tag)))
// You can see that you've tagged the commit:(((git commands, tag)))

[source,console]
----
$ git tag
v0.1
v1.2
v1.3
v1.4
v1.4-lw
v1.5

$ git show v1.2
tag v1.2
Tagger: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Feb 9 15:32:16 2009 -0800

version 1.2
commit 9fceb02d0ae598e95dc970b74767f19372d61af8
Author: Magnus Chacon <mchacon@gee-mail.com>
Date:   Sun Apr 27 20:43:35 2008 -0700

    Update rakefile
...
----

[[_sharing_tags]]
==== مشاركة الوسوم
// ==== Sharing Tags

لا ينقل أمر الدفع، بطبيعته، الوسومَ إلى المستودعات البعيدة.(((git commands, push)))
// By default, the `git push` command doesn't transfer tags to remote servers.(((git commands, push)))
فعليك دفعها بأمر صريح بعد إنشائها.
// You will have to explicitly push tags to a shared server after you have created them.
تشبه هذه العملية كثيرًا عملية مشاركة الفروع البعيدة -- نفّذ `git push origin <اسم&zwnj;الوسم>`.
// This process is just like sharing remote branches -- you can run `git push origin <tagname>`.

[source,console]
----
$ git push origin v1.5
Counting objects: 14, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (12/12), done.
Writing objects: 100% (14/14), 2.05 KiB | 0 bytes/s, done.
Total 14 (delta 3), reused 0 (delta 0)
To git@github.com:schacon/simplegit.git
 * [new tag]         v1.5 -> v1.5
----

وإذا كانت لديك العديد من الوسوم التي تريد دفعها جملةً واحدة، فيمكنك إضافة خيار الوسوم `--tags` إلى أمر الدفع `git push`،
// If you have a lot of tags that you want to push up at once, you can also use the `--tags` option to the `git push` command.
لينقل إلى المستودع البعيد جميع وسومك التي ليست هناك بالفعل.
// This will transfer all of your tags to the remote server that are not already there.

[source,console]
----
$ git push origin --tags
Counting objects: 1, done.
Writing objects: 100% (1/1), 160 bytes | 0 bytes/s, done.
Total 1 (delta 0), reused 0 (delta 0)
To git@github.com:schacon/simplegit.git
 * [new tag]         v1.4 -> v1.4
 * [new tag]         v1.4-lw -> v1.4-lw
----

والآن، عندما يستنسخ أحدهم مستودعك أو يجذب منه، فسيحصل على جميع وسومك أيضا.
// Now, when someone else clones or pulls from your repository, they will get all your tags as well.

[NOTE]
.يدفع أمر الدفع كلا النوعين من الوسوم
// .`git push` pushes both types of tags
====
سيدفع `git push <البعيد> --tags` الوسوم الخفيفة والوسوم المعنونة.
// `git push <remote> --tags` will push both lightweight and annotated tags.
لا يوجد حاليا خيار لدفع الوسوم الخفيفة فقط، لكن الأمر `git push <البعيد> --follow-tags` سيدفع الوسوم المعنونة فقط إلى الخادوم البعيد.
// There is currently no option to push only lightweight tags, but if you use `git push <remote> --follow-tags` only annotated tags will be pushed to the remote.
====

==== حذف الوسوم
// ==== Deleting Tags

لحذف وسم من مستودعك المحلي، نفذ `git tag -d <اسم&zwnj;الوسم>`.
// To delete a tag on your local repository, you can use `git tag -d <tagname>`.
مثلا، يمكننا حذف الوسم الخفيف الذي أنشأناه سابقًا كالتالي:
// For example, we could remove our lightweight tag above as follows:

[source,console]
----
$ git tag -d v1.4-lw
Deleted tag 'v1.4-lw' (was e7d5add)
----

لاحظ أن هذا لا يحذف الوسم من أي مستودع بعيد.
// Note that this does not remove the tag from any remote servers.
توجد طريقتان شائعتان لحذف وسم ما من مستودع بعيد:
// There are two common variations for deleting a tag from a remote server.

الطريقة الأولى هي `git push <البعيد> :refs/tags/<اسم&zwnj;الوسم>`:
// The first variation is `git push <remote> :refs/tags/<tagname>`:

[source,console]
----
$ git push origin :refs/tags/v1.4-lw
To /git@github.com:schacon/simplegit.git
 - [deleted]         v1.4-lw
----

لاستيعاب ما تفعله هذه الطريقة يمكن ترى أنها تدفع القيمة الفارغة التي قبل النقطتين الرأسيتين إلى اسم الوسم على المستودع البعيد، فعمليًّا تحذفه.
// The way to interpret the above is to read it as the null value before the colon is being pushed to the remote tag name, effectively deleting it.

الطريقة الأخرى (والبديهية أكثر) لحذف وسم من مستودع بعيد، هي:
// The second (and more intuitive) way to delete a remote tag is with:

[source,console]
----
$ git push origin --delete <اسم‌الوسم>
----

==== سحب الوسوم
// ==== Checking out Tags

إذا أردت رؤية نُسخ الملفات التي يشير إليها وسمٌ ما، يمكنك سحب هذا الوسم بأمر `git checkout`، مع إن هذا يضع مستودعك في حالة "`detached HEAD`"، والتي لها بعض الآثار الجانبية السيئة:
// If you want to view the versions of files a tag is pointing to, you can do a `git checkout` of that tag, although this puts your repository in "`detached HEAD`" state, which has some ill side effects:

[source,console]
----
$ git checkout v2.0.0
Note: switching to 'v2.0.0'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at 99ada87... Merge pull request #89 from schacon/appendix-final

$ git checkout v2.0-beta-0.1
Previous HEAD position was 99ada87... Merge pull request #89 from schacon/appendix-final
HEAD is now at df3f601... Add atlas.json and cover image
----

في حالة "`detached HEAD`"، إذا أجريت تعديلات وصنعت إيداعًا، فإن الوسم سيبقى كما هو، وإيداعك الجديد لن ينتمي إلى أي فرع ولن يمكن الوصول إليه أبدا، إلا ببصمته.
// In "`detached HEAD`" state, if you make changes and then create a commit, the tag will stay the same, but your new commit won't belong to any branch and will be unreachable, except by the exact commit hash.
لذا، فإن احتجت إجراء تعديلات -- مثلا لإصلاح علة في نسخة قديمة -- فغالبا ستحتاج إلى إنشاء فرع:
// Thus, if you need to make changes -- say you're fixing a bug on an older version, for instance -- you will generally want to create a branch:

[source,console]
----
$ git checkout -b version2 v2.0.0
Switched to a new branch 'version2'
----

إذا فعلت هذا ثم صنعت إيداعًا، فإن فرع `version2` سيكون مختلفًا عن وسم `v2.0.0` لأنه سيكون متقدمًا عنه بتعديلاتك، لذا كن حذرًا.
// If you do this and make a commit, your `version2` branch will be slightly different than your `v2.0.0` tag since it will move forward with your new changes, so do be careful.
