[[_undoing]]
=== ✨ التراجع عن الأفعال
// === Undoing Things

قد تحتاج في أي مرحلة إلى التراجع عن فعلٍ ما.
// At any stage, you may want to undo something.
سنرى هنا بعض الأدوات الأساسية للتراجع عن تعديلاتك.
// Here, we'll review a few basic tools for undoing changes that you've made.
كن حذرًا، لأن بعض هذه التراجعات لا يمكن التراجع عنها فيما بعد.
// Be careful, because you can't always undo some of these undos.
هذه من المناطق القليلة في جت التي يمكنك أن تفقد فيها شيئا من عملك إذا فعلت شيئا خطأ.
// This is one of the few areas in Git where you may lose some work if you do it wrong.

واحد من أشهر التراجعات هو عندما تودع قبل الأوان وتنسى إضافة ملفات أو تخطئ في رسالة إيداعك.
// One of the common undos takes place when you commit too early and possibly forget to add some files, or you mess up your commit message.
إذا أردت إعادة هذا الإيداع، فقم بالتعديلات التي نسيتها، وأهّلها، ثم أودع مجددا مع خيار التصحيح `--amend`:
// If you want to redo that commit, make the additional changes you forgot, stage them, and commit again using the `--amend` option:

[source,console]
----
$ git commit --amend
----

يأخذ هذا الأمر منطقة تأهيلك ويستخدمها للإيداع.
// This command takes your staging area and uses it for the commit.
وإذا لم تقم بأي تعديلات منذ إيداعك الأخير (مثلا نفذت هذا الأمر مباشرةً بعد إيداعك السابق)، فإن لقطتك ستتطابق تمامًا بلا اختلاف، ولن تتغيّر سوى رسالة الإيداع.
// If you've made no changes since your last commit (for instance, you run this command immediately after your previous commit), then your snapshot will look exactly the same, and all you'll change is your commit message.

سيظهر لك محرر رسالة الإيداع، ولكنك ستجد فيه رسالة الإيداع السابقة
// The same commit-message editor fires up, but it already contains the message of your previous commit.
في انتظارك لتعدّلها إن شئت أو تغيّرها تمامًا.
// You can edit the message the same as always, but it overwrites your previous commit.

مثلا، إذا أودعت ثم أدركت أنك نسيت تأهيل تعديلات على ملف تريدها في هذا الإيداع، يمكنك فعل شيء مثل هذا:
// As an example, if you commit and then realize you forgot to stage the changes in a file you wanted to add to this commit, you can do something like this:

[source,console]
----
$ git commit -m 'Initial commit'
$ git add forgotten_file
$ git commit --amend
----

ستجد في النهاية إيداعًا واحدًا؛ فالإيداع الثاني يحل محل الأول.
// You end up with a single commit -- the second commit replaces the results of the first.

[NOTE]
====
مهمٌ فهم أنك عندما تصحح إيداعك الأخير، فإنك لا تصلحه ولكن _تستبدله_ برُمّتِه وتضع مكانه إيداعًا جديدًا محسَّنًا وتزيح القديم عن الطريق.
// It's important to understand that when you're amending your last commit, you're not so much fixing it as _replacing_ it entirely with a new, improved commit that pushes the old commit out of the way and puts the new commit in its place.
في الحقيقة، هذا كأن الإيداع السابق لم يحدث أصلًا، ولن يظهر في تاريخ مستودعك.
// Effectively, it's as if the previous commit never happened, and it won't show up in your repository history.

الفائدة الواضحة لتصحيح الإيداعات هو التحسينات الطفيفة للإيداع الأخير، بغير إزحام تاريخ مستودعك برسائل إيداعات من نوعية «عذرا، نسيت إضافة ملف» أو «سحقا، خطأ مطبعي في الإيداع السابق، أصلحته».
// The obvious value to amending commits is to make minor improvements to your last commit, without cluttering your repository history with commit messages of the form, "`Oops, forgot to add a file`" or "`Darn, fixing a typo in last commit`".
====

[NOTE]
====
لا تصحح إلا الإيدعات التي لا تزال محلية ولم تُدفع بعد إلى أي مكان آخر.
// Only amend commits that are still local and have not been pushed somewhere.
فتصحيح إيداع قد دُفع بالفعل ثم فرض الدفع (`git push --force`) سيسبب مشاكل للمتعاونين معك.
// Amending previously pushed commits and force pushing the branch will cause problems for your collaborators.
لمعرفة ما سيحدث إن فعلت هذا وكيف تتعافي إذا كنت الطرف المتلقي، اقرأ <<_rebase_peril>>.
// For more on what happens when you do this and how to recover if you're on the receiving end read <<_rebase_peril>>.
====

[[_unstaging]]
==== إلغاء تأهيل ملف مؤهل
// ==== Unstaging a Staged File

سيوضح الفصلان التاليان كيف تتعامل مع التعديلات في منطقة تأهيلك ومجلد عملك.
// The next two sections demonstrate how to work with your staging area and working directory changes.
الجميل أن الأمر الذي تستخدمه لمعرفة حالة إحدى هاتين المنطقتين يذكّرك أيضا بكيفية التراجع عن تعديلاتهما.
// The nice part is that the command you use to determine the state of those two areas also reminds you how to undo changes to them.
لنقُل مثلا أنك عدّلت ملفين وأردت إيداع كلٍ منهما في إيداع منفصل، ولكنك كتبت خطأً `git add *` فأهّلت كليهما.
// For example, let's say you've changed two files and want to commit them as two separate changes, but you accidentally type `git add *` and stage them both.
كيف يمكنك إلغاء تأهيل أحدهما؟
// How can you unstage one of the two?
أمر الحالة يذكّرك:
// The `git status` command reminds you:

[source,console]
----
$ git add *
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    renamed:    README.md -> README
    modified:   CONTRIBUTING.md
----

مباشرةً تحت "`Changes to be committed`" («تعديلات ستُودَع») تجده يقول استخدم `git reset HEAD <ملفات>` لإلغاء التأهيل.
// Right below the "`Changes to be committed`" text, it says use `git reset HEAD <file>...` to unstage.
فلنعمل بهذه النصيحة إذًا، لإلغاء تأهيل ملف `CONTRIBUTING.md`:
// So, let's use that advice to unstage the `CONTRIBUTING.md` file:

[source,console]
----
$ git reset HEAD CONTRIBUTING.md
Unstaged changes after reset:
M	CONTRIBUTING.md
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    renamed:    README.md -> README

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md
----

هذا الأمر غريب قليلًا، لكنه يعمل.
// The command is a bit strange, but it works.
ملف `CONTRIBUTING.md` معدّل لكنه عاد من جديد غير مؤهل.
// The `CONTRIBUTING.md` file is modified but once again unstaged.

[NOTE]
=====
صدقًا إن `git reset` أمر خطير، خصوصا مع الخيار `--hard`.
// It's true that `git reset` can be a dangerous command, especially if you provide the `--hard` flag.
مع ذلك، فإن الملف الذي في مجلد عملك لم يُمس في الموقف الموضح بالأعلى، لذا فهذا الأمر آمن نسبيا في مثل هذا الموقف.
// However, in the scenario described above, the file in your working directory is not touched, so it's relatively safe.
=====

هذا الأمر السحري هو كل ما تحتاج معرفته الآن عن أمر الإرجاع `git reset`.
// For now this magic invocation is all you need to know about the `git reset` command.
سنغوص في <<ch07-git-tools#_git_reset>> في تفاصيل أعمق كثيرا عن أمر الإرجاع وماذا يفعل وكيف تتقنه لتفعل أفعالا شيقة وممتعة جدا.
// We'll go into much more detail about what `reset` does and how to master it to do really interesting things in <<ch07-git-tools#_git_reset>>.

==== إعادة ملف معدل إلى حالته قبل التعديل
// ==== Unmodifying a Modified File

ماذا لو أدركت أنك لم تعد تريد تعديل ملف `CONTRIBUTING.md` من الأساس؟
// What if you realize that you don't want to keep your changes to the `CONTRIBUTING.md` file?
كيف يمكنك إرجاعه إلى حالته عند الإيداع الأخير (أو الاستنساخ الأول، أو كيفما حصلت عليه في مجلد عملك)؟
// How can you easily unmodify it -- revert it back to what it looked like when you last committed (or initially cloned, or however you got it into your working directory)?
لحسن الحظ، يخبرك أمر الحالة بهذا أيضا.
// Luckily, `git status` tells you how to do that, too.
في ناتج المثال الأخير، كان جزء التعديلات غير المؤهلة هكذا:
// In the last example output, the unstaged area looks like this:

[source,console]
----
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md
----

فيخبرك أن تستخدم الأمر `git checkout \-- <ملفات>` لتجاهل التعديلات التي في مجلد عملك.
// It tells you pretty explicitly how to discard the changes you've made.
لنفعل ما يخبرنا به:
// Let's do what it says:

[source,console]
----
$ git checkout -- CONTRIBUTING.md
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    renamed:    README.md -> README

----

كما ترى، أُلغيت التعديلات.
// You can see that the changes have been reverted.

[IMPORTANT]
=====
من المهم جدا فهم أن `git checkout \-- <ملفات>` أمر خطير؛
// It's important to understand that `git checkout \-- <file>` is a dangerous command.
أي تعديلات محلية قمت بها على هذا الملف قد ضاعت، فقد أزال جت للتو هذا الملف ووضع مكانه آخر نسخة مؤهلة أو مودعة منه.
// Any local changes you made to that file are gone -- Git just replaced that file with the last staged or committed version.
إياك أبدا أن تستعمل هذا الأمر، إلا أن تكون واعيا أشد الوعي أنك لا تريد هذه التعديلات المحلية غير المحفوظة.
// Don't ever use this command unless you absolutely know that you don't want those unsaved local changes.
=====

إذا أردت الإبقاء على تعديلاتك على هذا الملف لكنك لا تزال تريد إزاحته جانبًا الآن، فسنشرح التخبئة والتفريع في <<ch03-git-branching#ch03-git-branching>>؛ هاتان الطريقتان في العموم أفضل.
// If you would like to keep the changes you've made to that file but still need to get it out of the way for now, we'll go over stashing and branching in <<ch03-git-branching#ch03-git-branching>>; these are generally better ways to go.

تذكر أن أي شيء تودعه في جت يمكن شِبه دائمًا استعادته.
// Remember, anything that is _committed_ in Git can almost always be recovered.
حتى الإيداعات في الفروع المحذوفة أو الإيداعات المبدلة بخيار التصحيح (`--amend`) يمكن استعادتها (انظر <<ch10-git-internals#_data_recovery>> لاستعادة البيانات).
// Even commits that were on branches that were deleted or commits that were overwritten with an `--amend` commit can be recovered (see <<ch10-git-internals#_data_recovery>> for data recovery).
مع ذلك، أي شيء تفقده لم يكن مودعًا، صعب أن تراه مرة أخرى.
// However, anything you lose that was never committed is likely never to be seen again.

[[undoing_git_restore]]
==== التراجع بأمر الاستعادة git restore
// ==== Undoing things with git restore

أضافت النسخة 2.23.0 من جت أمرًا جديدًا: `git restore`.
// Git version 2.23.0 introduced a new command: `git restore`.
هذا في الأصل بديل لأمر الإرجاع `git reset` الذي ناقشناه للتو.
// It's basically an alternative to `git reset` which we just covered.
ابتداءً من النسخة 2.23.0 من جت، سيستخدم جت أمر الاستعادة `git restore` بدلا من أمر الإرجاع `git reset` في الكثير من عمليات التراجع.
// From Git version 2.23.0 onwards, Git will use `git restore` instead of `git reset` for many undo operations.

لنرتد على آثارنا قَصصًا ونعيد الكرّة ونتراجع بأمر الاستعادة `git restore` بدلًا من أمر الإرجاع `git reset`.
// Let's retrace our steps, and undo things with `git restore` instead of `git reset`.

===== إلغاء تأهيل ملف مؤهل بأمر الاستعادة
// ===== Unstaging a Staged File with git restore

سيوضح الفصلان التاليان كيف تتعامل مع التعديلات في منطقة تأهيلك ومجلد عملك بأمر الاستعادة `git restore`.
// The next two sections demonstrate how to work with your staging area and working directory changes with `git restore`.
الجميل أن الأمر الذي تستخدمه لمعرفة حالة إحدى هاتين المنطقتين يذكّرك أيضا بكيفية التراجع عن تعديلاتهما.
// The nice part is that the command you use to determine the state of those two areas also reminds you how to undo changes to them.
لنقُل مثلا أنك عدّلت ملفين وأردت إيداع كلٍ منهما في إيداع منفصل، ولكنك كتبت خطأً `git add *` فأهّلت كليهما.
// For example, let's say you've changed two files and want to commit them as two separate changes, but you accidentally type `git add *` and stage them both.
كيف يمكنك إلغاء تأهيل أحدهما؟
// How can you unstage one of the two?
أمر الحالة يذكّرك:
// The `git status` command reminds you:

[source,console]
----
$ git add *
$ git status
On branch master
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
	modified:   CONTRIBUTING.md
	renamed:    README.md -> README

----

مباشرةً تحت "`Changes to be committed`" («تعديلات ستُودَع») تجده يقول استخدم `git restore --staged <ملفات>` لإلغاء التأهيل.
// Right below the "`Changes to be committed`" text, it says use `git restore --staged <file>...` to unstage.
فلنعمل بهذه النصيحة إذًا، لإلغاء تأهيل ملف `CONTRIBUTING.md`:
// So, let's use that advice to unstage the `CONTRIBUTING.md` file:

[source,console]
----
$ git restore --staged CONTRIBUTING.md
$ git status
On branch master
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
	renamed:    README.md -> README

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   CONTRIBUTING.md

----

ملف `CONTRIBUTING.md` معدّل لكنه عاد من جديد غير مؤهل.
// The `CONTRIBUTING.md` file is modified but once again unstaged.

===== إعادة ملف معدل إلى حالته قبل التعديل بأمر الاستعادة
// ===== Unmodifying a Modified File with git restore

ماذا لو أدركت أنك لم تعد تريد تعديل ملف `CONTRIBUTING.md` من الأساس؟
// What if you realize that you don't want to keep your changes to the `CONTRIBUTING.md` file?
كيف يمكنك إرجاعه إلى حالته عند الإيداع الأخير (أو الاستنساخ الأول، أو كيفما حصلت عليه في مجلد عملك)؟
// How can you easily unmodify it -- revert it back to what it looked like when you last committed (or initially cloned, or however you got it into your working directory)?
لحسن الحظ، يخبرك أمر الحالة بهذا أيضا.
// Luckily, `git status` tells you how to do that, too.
في ناتج المثال الأخير، كان جزء التعديلات غير المؤهلة هكذا:
// In the last example output, the unstaged area looks like this:

[source,console]
----
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   CONTRIBUTING.md

----

فيخبرك أن تستخدم الأمر `git restore <ملفات>` لتجاهل التعديلات التي في مجلد عملك.
// It tells you pretty explicitly how to discard the changes you've made.
لنفعل ما يخبرنا به:
// Let's do what it says:

[source,console]
----
$ git restore CONTRIBUTING.md
$ git status
On branch master
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
	renamed:    README.md -> README

----

[IMPORTANT]
=====
من المهم جدا فهم أن `git restore <ملفات>` أمر خطير؛
// It's important to understand that `git restore <file>` is a dangerous command.
أي تعديلات محلية قمت بها على هذا الملف قد ضاعت، فقد أزال جت للتو هذا الملف ووضع مكانه آخر نسخة مؤهلة أو مودعة منه.
// Any local changes you made to that file are gone -- Git just replaced that file with the last staged or committed version.
إياك أبدا أن تستعمل هذا الأمر، إلا أن تكون واعيا أشد الوعي أنك لا تريد هذه التعديلات المحلية غير المحفوظة.
// Don't ever use this command unless you absolutely know that you don't want those unsaved local changes.
=====
