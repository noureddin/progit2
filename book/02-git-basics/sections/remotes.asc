[[_remote_repos]]
=== ✨ التعامل مع المستودعات البعيدة
// === Working with Remotes

حتى تستطيع التعاون في أي مشروع يستخدم جت، تحتاج إلى معرفة كيف تدير مستودعاتك البعيدة.
// To be able to collaborate on any Git project, you need to know how to manage your remote repositories.
المستودعات البعيدة هي نُسخ من مشروعك، وهذه النسخ مستضافة على الإنترنت أو على شبكة داخلية.
// Remote repositories are versions of your project that are hosted on the Internet or network somewhere.
يمكن أن يكون لديك عددًا منها، وكل واحد منها غالبًا يسمح لك إما بالقراءة فحسب («القراءة فقط»)، وإما بالتحرير كذلك («القراءة والك‍تابة»).
// You can have several of them, each of which generally is either read-only or read/write for you.
والتعاون مع الآخرين يشمل إدارة هذه المستودعات البعيدة ودفع البيانات إليها وجذبها منها عندما تحتاج إلى مشاركة العمل.
// Collaborating with others involves managing these remote repositories and pushing and pulling data to and from them when you need to share work.
وإدارة المستودعات البعيدة تشمل معرفة كيف تضيفها في مستودعك وكيف تزيلها إن لم تعد صالحة وكيف تدير العديد من الفروع البعيدة وكيف تجعل الفروع البعيدة متعقَّبة أو غير متعقَّبة، وغير ذلك.
// Managing remote repositories includes knowing how to add remote repositories, remove remotes that are no longer valid, manage various remote branches and define them as being tracked or not, and more.
سنتناول في هذا الفصل بعضًا من مهارات الإدارة هذه.
// In this section, we'll cover some of these remote-management skills.

[NOTE]
.المستودعات البعيدة قد تكون على جهازك المحلي
// .Remote repositories can be on your local machine.
====
من الممكن جدا أن تعمل مع مستودع «بعيد» ("`remote`")، ولكنه في الحقيقة على الجهاز الذي تستخدمه نفسه.
// It is entirely possible that you can be working with a "`remote`" repository that is, in fact, on the same host you are.
كلمة «بعيد» لا تعني بالضرورة أن المستودع في مكانٍ ما آخر على الشبكة أو الإنترنت، ولكنها تعني فقط أنه في مكان آخر.
// The word "`remote`" does not necessarily imply that the repository is somewhere else on the network or Internet, only that it is elsewhere.
فالعمل مع مستودع بعيد مثل هذا ما زال يحتاج جميع عمليات الدفع والجذب والاستحضار المعتادة مثل أي مستودع بعيد آخر.
// Working with such a remote repository would still involve all the standard pushing, pulling and fetching operations as with any other remote.
====

==== سرد مستودعاتك البعيدة
// ==== Showing Your Remotes

لسرد المستودعات البعيدة التي هيأتها، استخدم أمر البعيد `git remote`.(((git commands, remote)))
// To see which remote servers you have configured, you can run the `git remote` command.(((git commands, remote)))
فإنه يُظهر لك الاسم المختصر لكل بعيد في مستودعك.
// It lists the shortnames of each remote handle you've specified.
وإذا استنسخت مستودعا، فإنك على الأقل سترى `origin` («الأصل»)، وهو الاسم الذي يعطيه جت للمستودع الذي استنسخت منه:
// If you've cloned your repository, you should at least see `origin` -- that is the default name Git gives to the server you cloned from:

[source,console]
----
$ git clone https://github.com/schacon/ticgit
Cloning into 'ticgit'...
remote: Reusing existing pack: 1857, done.
remote: Total 1857 (delta 0), reused 0 (delta 0)
Receiving objects: 100% (1857/1857), 374.35 KiB | 268.00 KiB/s, done.
Resolving deltas: 100% (772/772), done.
Checking connectivity... done.
$ cd ticgit
$ git remote
origin
----

يمكنك أيضا استخدام الخيار `-v` («إطناب»)، والذي يُظهر لك الروابط التي خزنها جت للأسماء المختصرة للمستودعات البعيدة ليستعملها لقراءة ذلك المستودع البعيد ولتحريره:
// You can also specify `-v`, which shows you the URLs that Git has stored for the shortname to be used when reading and writing to that remote:

[source,console]
----
$ git remote -v
origin	https://github.com/schacon/ticgit (fetch)
origin	https://github.com/schacon/ticgit (push)
----

إذا كان لديك أكثر من مستودع بعيد واحد، فإن هذا الأمر سيسردهم جميعًا.
// If you have more than one remote, the command lists them all.
مثلا، قد يبدو مستودع مرتبط بعدد من المستودعات البعيدة للعمل مع رهط من المتعاونين هكذا:
// For example, a repository with multiple remotes for working with several collaborators might look something like this.

[source,console]
----
$ cd grit
$ git remote -v
bakkdoor  https://github.com/bakkdoor/grit (fetch)
bakkdoor  https://github.com/bakkdoor/grit (push)
cho45     https://github.com/cho45/grit (fetch)
cho45     https://github.com/cho45/grit (push)
defunkt   https://github.com/defunkt/grit (fetch)
defunkt   https://github.com/defunkt/grit (push)
koke      git://github.com/koke/grit.git (fetch)
koke      git://github.com/koke/grit.git (push)
origin    git@github.com:mojombo/grit.git (fetch)
origin    git@github.com:mojombo/grit.git (push)
----

هذا يعني أننا نستطيع جذب المساهمات من أيٍّ من هؤلاء المستخدمين بسهولة.
// This means we can pull contributions from any of these users pretty easily.
وقد يكون لدينا إذن الدفع إلى واحد أو أكثر منهم، ولكن لا نستطيع معرفة هذا من هنا.
// We may additionally have permission to push to one or more of these, though we can't tell that here.

لاحظ أن هذه المستودعات البعيدة تستخدم موافيق (بروتوكولات) متنوعة؛ سنتحدث عن هذا في <<ch04-git-on-the-server#_getting_git_on_a_server>>.
// Notice that these remotes use a variety of protocols; we'll cover more about this in <<ch04-git-on-the-server#_getting_git_on_a_server>>.

==== إضافة مستودعات بعيدة
// ==== Adding Remote Repositories

ذكرنا أن أمر الاستنساخ `git clone` يضيف لك من تلقاء نفسه الأصل البعيد `origin`، ورأيت مثالين على ذلك.
// We've mentioned and given some demonstrations of how the `git clone` command implicitly adds the `origin` remote for you.
إليك الآن معرفة كيف تضيف مستودعا بعيدا بأمر صريح.(((git commands, remote)))
// Here's how to add a new remote explicitly.(((git commands, remote)))
لإضافة مستودع جت بعيد جديد وإعطائه اسمًا مختصرًا للإشارة إليه به بسهولة فيما بعد، نفذ `git remote add <shortname> <url>`، أي الاسم المختصر ثم الرابط:
// To add a new remote Git repository as a shortname you can reference easily, run `git remote add <shortname> <url>`:

[source,console]
----
$ git remote
origin
$ git remote add pb https://github.com/paulboone/ticgit
$ git remote -v
origin	https://github.com/schacon/ticgit (fetch)
origin	https://github.com/schacon/ticgit (push)
pb	https://github.com/paulboone/ticgit (fetch)
pb	https://github.com/paulboone/ticgit (push)
----

يمكنك الآن استخدام الاسم `pb` في سطر الأوامر، بدلا من الرابط بكامله.
// Now you can use the string `pb` on the command line in lieu of the whole URL.
مثلا إذا أردت استحضار جميع المعلومات التي لدي پول ولكن ليست لديك في مستودعك بعد، يمكنك استخدام أمر الاستحضار معه، أي `git fetch pb`:
// For example, if you want to fetch all the information that Paul has but that you don't yet have in your repository, you can run `git fetch pb`:

[source,console]
----
$ git fetch pb
remote: Counting objects: 43, done.
remote: Compressing objects: 100% (36/36), done.
remote: Total 43 (delta 10), reused 31 (delta 5)
Unpacking objects: 100% (43/43), done.
From https://github.com/paulboone/ticgit
 * [new branch]      master     -> pb/master
 * [new branch]      ticgit     -> pb/ticgit
----

الآن صار فرع `master` من مستودع پول متاحا محليًا بالاسم `pb/master`؛ يمكنك دمجه في أحد فروعك، أو سحب إيداعه الأخير إلى فرع محلي إذا أردت تفقّده.
// Paul's `master` branch is now accessible locally as `pb/master` -- you can merge it into one of your branches, or you can check out a local branch at that point if you want to inspect it.
سنتناول ما هي الفروع وكيف نستعملها بتفصيل عميق في <<ch03-git-branching#ch03-git-branching>>.
// We'll go over what branches are and how to use them in much more detail in <<ch03-git-branching#ch03-git-branching>>.

[[_fetching_and_pulling]]
==== الاستحضار والجذب من مستودعاتك البعيدة
// ==== Fetching and Pulling from Your Remotes

كما رأيت للتو، للحصول على بيانات من مستودعاتك البعيدة، يمكنك تنفيذ:(((git commands, fetch)))
// As you just saw, to get data from your remote projects, you can run:(((git commands, fetch)))

[source,console]
----
$ git fetch <البعيد>
----

يذهب هذا الأمر إلى المستودع البعيد ويجذب منه كل البيانات التي لديه وليست لديك بعد.
// The command goes out to that remote project and pulls down all the data from that remote project that you don't have yet.
بعد أن تفعل هذا، ستجد لديك إشارات لجميع الفروع التي لدى هذا البعيد، فيمكنك دمجها أو فحصها في أي وقت.
// After you do this, you should have references to all the branches from that remote, which you can merge in or inspect at any time.

إذا استنسخت مستودعًا، فإن أمر الاستنساخ يضيف آليًّا هذا المستودع البعيد بالاسم "`origin`".
// If you clone a repository, the command automatically adds that remote repository under the name "`origin`".
لذا فإن `git fetch origin` يستحضر أي عمل قد دُفع إلى هذا المستودع بعدما استنسخته (أو استحضرت منه) آخر مرة.
// So, `git fetch origin` fetches any new work that has been pushed to that server since you cloned (or last fetched from) it.
مهمٌ ملاحظة أن أمر الاستحضار ينزّل فقط البيانات إلى مستودعك المحلي؛ ولكنه لا يدمجها مع عملك ولا يعدّل أي شيء تعمل عليه.
// It's important to note that the `git fetch` command only downloads the data to your local repository -- it doesn't automatically merge it with any of your work or modify what you're currently working on.
عليك دمجها يدويًا مع عملك عندما تكون مستعدًا لذلك.
// You have to merge it manually into your work when you're ready.

إذا كان الفرع الحالي مضبوطًا ليتعقب فرعًا بعيدًا (انظر الفصل التالي و <<ch03-git-branching#ch03-git-branching>> للمزيد من المعلومات)، فيمكنك استخدام أمر الجذب `git pull` ليستحضر آليًّا هذا الفرع البعيد ثم يدمجه في الفرع الحالي.(((git commands, pull)))
// If your current branch is set up to track a remote branch (see the next section and <<ch03-git-branching#ch03-git-branching>> for more information), you can use the `git pull` command to automatically fetch and then merge that remote branch into your current branch.(((git commands, pull)))
هذا قد يكون أسهل أو أريح لك. وأمر الاستنساخ بطبيعة الحال يضبط لك آليًّا الفرع المبدئي المحلي ليتعقب الفرع المبدئي البعيد (`master` أو `main` أو أيًّا كان اسمه) في المستودع الذي استنسخت منه.
// This may be an easier or more comfortable workflow for you; and by default, the `git clone` command automatically sets up your local `master` branch to track the remote `master` branch (or whatever the default branch is called) on the server you cloned from.
يستحضر أمر الجذب البيانات من المستودع الذي استنسخت منه في الأصل عادةً ثم يحاول دمجها آليًّا في الفرع الذي تعمل فيه حاليا.
// Running `git pull` generally fetches data from the server you originally cloned from and automatically tries to merge it into the code you're currently working on.

[NOTE]
====
ابتداءً من النسخة 2.27 من جت، سيحذرك أمر الجذب `git pull` إن لم يكن متغير `pull.rebase` مضبوطًا.
// From Git version 2.27 onward, `git pull` will give a warning if the `pull.rebase` variable is not set.
وسيبقى يحذرك حتى تعيّن له قيمة.
// Git will keep warning you until you set the variable.

إن أردت سلوك جت المبدئي (التسريع متى أمكن، وإلا فإنشاء إيداع دمج)، فنفذ: +
// If you want the default behavior of git (fast-forward if possible, else create a merge commit):
`git config --global pull.rebase "false"`

وإذا أردت إعادة التأسيس عند الجذب، فنفذ: +
// If you want to rebase when pulling:
`git config --global pull.rebase "true"`
====

[[_pushing_remotes]]
==== الدفع إلى مستودعاتك البعيدة
// ==== Pushing to Your Remotes

عندما يكون مشروعك في مرحلة تود مشاركتها، عليك دفعه إلى المنبع.
// When you have your project at a point that you want to share, you have to push it upstream.
الأمر الذي يفعل هذا يسير: `git push <remote> <branch>`، أي اسم المستودع البعيد ثم الفرع:(((git commands, push)))
// The command for this is simple: `git push <remote> <branch>`.(((git commands, push)))
فإذا أردت دفع فرع `master` الخاص بك إلى المستودع الأصل `origin` (غالبا يضبط لك الاستنساخ هذين الاسمين آليًّا)، فتنفيذ هذا الأمر يدفع أي إيداعات صنعتها إلى الخادوم:
// If you want to push your `master` branch to your `origin` server (again, cloning generally sets up both of those names for you automatically), then you can run this to push any commits you've done back up to the server:

[source,console]
----
$ git push origin master
----

يعمل هذا الأمر فقط إذا استنسخت من مستودع لديك إذن تحريره، ولم يدفع أي شخص آخر إليه في هذه الأثناء.
// This command works only if you cloned from a server to which you have write access and if nobody has pushed in the meantime.
أما إذا استنسخت أنت وشخص آخر في وقت واحد، ودفع هو إلى المنبع، ثم أردت أنت الدفع إلى المنبع، فإن دفعك سيُرفض عن حق.
// If you and someone else clone at the same time and they push upstream and then you push upstream, your push will rightly be rejected.
وسيتوجب عليك عندئذٍ استحضار عمله أولا وضمه إلى عملك قبل أن يُسمح لك بالدفع.
// You'll have to fetch their work first and incorporate it into yours before you'll be allowed to push.
انظر <<ch03-git-branching#ch03-git-branching>> لمعلومات أشد تفصيلا عن الدفع إلى مستودعات بعيدة.
// See <<ch03-git-branching#ch03-git-branching>> for more detailed information on how to push to remote servers.

[[_inspecting_remote]]
==== فحص مستودع بعيد
// ==== Inspecting a Remote

إذا أردت رؤية معلومات أكثر عن بعيد معين، فاستخدم الأمر `git remote show <البعيد>`.(((git commands, remote)))
// If you want to see more information about a particular remote, you can use the `git remote show <remote>` command.(((git commands, remote)))
إذا نفذت هذا الأمر مع اسم مختصر معين، مثل `origin`، فسترى شيئا مثل هذا:
// If you run this command with a particular shortname, such as `origin`, you get something like this:

[source,console]
----
$ git remote show origin
* remote origin
  Fetch URL: https://github.com/schacon/ticgit
  Push  URL: https://github.com/schacon/ticgit
  HEAD branch: master
  Remote branches:
    master                               tracked
    dev-branch                           tracked
  Local branch configured for 'git pull':
    master merges with remote master
  Local ref configured for 'git push':
    master pushes to master (up to date)
----

إنه يسرد لك رابط المستودع البعيد إضافةً إلى معلومات تعقب الفروع.
// It lists the URL for the remote repository as well as the tracking branch information.
وللإفادة يخبرك كذلك بأنك إذا كنت في فرع `master` واستخدمت أمر الجذب `git pull` فإنه تلقائيا سيدمج فرع `master` البعيد في الفرع المحلي بعد استحضاره.
// The command helpfully tells you that if you're on the `master` branch and you run `git pull`, it will automatically merge the remote's `master` branch into the local one after it has been fetched.
ويسرد لك أيضا جميع الإشارت البعيدة التي جذبها إليك.
// It also lists all the remote references it has pulled down.

هذا مثال يسير غالبا ستقابله.
// That is a simple example you're likely to encounter.
ولكن عندما تستخدم جت بكثرة، فسيعطيك `git remote show` معلومات أكثر كثيرًا:
// When you're using Git more heavily, however, you may see much more information from `git remote show`:

[source,console]
----
$ git remote show origin
* remote origin
  URL: https://github.com/my-org/complex-project
  Fetch URL: https://github.com/my-org/complex-project
  Push  URL: https://github.com/my-org/complex-project
  HEAD branch: master
  Remote branches:
    master                           tracked
    dev-branch                       tracked
    markdown-strip                   tracked
    issue-43                         new (next fetch will store in remotes/origin)
    issue-45                         new (next fetch will store in remotes/origin)
    refs/remotes/origin/issue-11     stale (use 'git remote prune' to remove)
  Local branches configured for 'git pull':
    dev-branch merges with remote dev-branch
    master     merges with remote master
  Local refs configured for 'git push':
    dev-branch                     pushes to dev-branch                     (up to date)
    markdown-strip                 pushes to markdown-strip                 (up to date)
    master                         pushes to master                         (up to date)
----

يُظهر لك هذا الأمر ما الفرع الذي يجذب جت إليه تلقائيا عندما تنفذ `git push` وأنت في فرع معين.
// This command shows which branch is automatically pushed to when you run `git push` while on certain branches.
ويُظهر لك كذلك ما فروع المستودع البعيد التي ليست لديك بعد، وما الفروع البعيدة التي لديك وحُذفت من البعيد، وما الفروع المحلية التي يمكن الدمج تلقائيا في فروعها المتعقِبة للبعيد عندما تنفذ `git pull`. FIXME
// It also shows you which remote branches on the server you don't yet have, which remote branches you have that have been removed from the server, and multiple local branches that are able to merge automatically with their remote-tracking branch when you run `git pull`.

==== تغيير اسم بعيد أو حذفه
// ==== Renaming and Removing Remotes

يمكنك استعمال `git remote rename` لتغيير الاسم المختصر لمستودع بعيد.(((git commands, remote)))
// You can run `git remote rename` to change a remote's shortname.(((git commands, remote)))
مثلا، لتغيير اسم `pb` إلى `paul`، نفّذ:
// For instance, if you want to rename `pb` to `paul`, you can do so with `git remote rename`:

[source,console]
----
$ git remote rename pb paul
$ git remote
origin
paul
----

مهم ملاحظة أن هذا يغيّر أسماء فروعك المتعقِبة للبعيد أيضا.
// It's worth mentioning that this changes all your remote-tracking branch names, too.
فالذي كان يسمى `pb/master` صار `paul/master`.
// What used to be referenced at `pb/master` is now at `paul/master`.

وإذا أردت حذف بعيد لسبب ما -- نقلت المستودع، أو لم تعد تستخدم خادوم مرآة معين، أو ربما مساهم لم يعد يساهم -- يمكنك استخدام إما `git remote remove` وإما `git remote rm`:
// If you want to remove a remote for some reason -- you've moved the server or are no longer using a particular mirror, or perhaps a contributor isn't contributing anymore -- you can either use `git remote remove` or `git remote rm`:

[source,console]
----
$ git remote remove paul
$ git remote
origin
----

وما إن تحذف الإشارة إلى بعيدٍ هكذا، فإن جميع الفروع المتعقِبة له وجميع إعدادات التهيئة المرتبطة به ستُحذف كذلك.
// Once you delete the reference to a remote this way, all remote-tracking branches and configuration settings associated with that remote are also deleted.
