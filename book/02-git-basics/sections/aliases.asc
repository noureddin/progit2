[[_git_aliases]]
=== ✨ كُنيات جت
// === Git Aliases

(((aliases)))
قبل أن نتقدم إلى الباب التالي، نود أن نعرّفك ميزة في جت ستجعل استعمالك أسهل وأريح وأكثر ألفة: الكُنيات.
// Before we move on to the next chapter, we want to introduce a feature that can make your Git experience simpler, easier, and more familiar: aliases.
لن نستعملها في أي موضع آخر في هذا الك‍تاب للوضوح، لكنك إذا كنت تنوي استعمال جت باستمرار، فيجب أن تعرف الكُنيات.
// For clarity's sake, we won't be using them anywhere else in this book, but if you go on to use Git with any regularity, aliases are something you should know about.

لا يُخمّن جت الأمر الذي تريده إذا كتبت جزءًا منه.
// Git doesn't automatically infer your command if you type it in partially.
فإذا لم تشأ ك‍تابة كل أمر بكامله، فيمكنك ضبط كُنية لكل أمر تريده بسهولة بأمر التهيئة `git config`.(((git commands, config)))
// If you don't want to type the entire text of each of the Git commands, you can easily set up an alias for each command using `git config`.(((git commands, config)))
هذه أمثلة ربما تحب إعدادها:
// Here are a couple of examples you may want to set up:

[source,console]
----
$ git config --global alias.co checkout
$ git config --global alias.br branch
$ git config --global alias.ci commit
$ git config --global alias.st status
----

هذا يعني أن يمكنك ك‍تابة `git ci` مثلا بدلا من أن تكتب `git commit`.
// This means that, for example, instead of typing `git commit`, you just need to type `git ci`.
وبالاستمرار مع جت، ستجد أوامر أخرى تستعملها كثيرا؛ لا تتردد في إنشاء كُنيات لها.
// As you go on using Git, you'll probably use other commands frequently as well; don't hesitate to create new aliases.

هذه الطريقة تصلح كذلك لإنشاء الأوامر التي تظن أنها يجب أن توجد.
// This technique can also be very useful in creating commands that you think should exist.
مثلا، لتصحيح صعوبة الاستخدام التي واجهتها عند إلغاء تأهيل ملف، يمكنك إضافة كُنية خاصة بك لإلغاء التأهيل `unstage` إلى جت:
// For example, to correct the usability problem you encountered with unstaging a file, you can add your own unstage alias to Git:

[source,console]
----
$ git config --global alias.unstage 'reset HEAD --'
----

يجعل هذا الأمرين التاليين متكافئين:
// This makes the following two commands equivalent:

[source,console]
----
$ git unstage fileA
$ git reset HEAD -- fileA
----

هذا أسهل وأوضح.
// This seems a bit clearer.
وكذلك من الشائع إضافة أمر `last` «الأخير»، مثل هذا:
// It's also common to add a `last` command, like this:

[source,console]
----
$ git config --global alias.last 'log -1 HEAD'
----

فيمكنك عندئذٍ رؤية إيداعك الأخير بسهولة:
// This way, you can see the last commit easily:

[source,console]
----
$ git last
commit 66938dae3329c7aebe598c2246a8e6af90d04646
Author: Josh Goebel <dreamer3@example.com>
Date:   Tue Aug 26 19:48:51 2008 +0800

    Test for current head

    Signed-off-by: Scott Chacon <schacon@example.com>
----

وكما يمكنك أن تخمن، إنما يترجم جت الأمر الجديد إلى ما جعلته كُنيةً له.
// As you can tell, Git simply replaces the new command with whatever you alias it for.
ولكنك أحيانا قد تريد تنفيذ أمر خارجي، بدلا من أمر فرعي في جت.
// However, maybe you want to run an external command, rather than a Git subcommand.
في هذه الحالة تبدأ الأمر بعلامة تعجب: `!`.
// In that case, you start the command with a `!` character.
يفيد هذا عندما تكتب أدواتك الخاصة التي تعمل مع مستودع جت.
// This is useful if you write your own tools that work with a Git repository.
نوضّح ذلك بعمل الكُنية `git visual` لتشغيل `gitk`:
// We can demonstrate by aliasing `git visual` to run `gitk`:

[source,console]
----
$ git config --global alias.visual '!gitk'
----
