[[_getting_a_repo]]
=== ✨ الحصول على مستودع جت
// === Getting a Git Repository

في المعتاد تحصل على مستودع جت بإحدى طريقتين:
// You typically obtain a Git repository in one of two ways:

1. تأتي مجلدًا محليًّا ليس تحت إدارة نُسخ، وتحوله إلى مستودع جت،
// 1. You can take a local directory that is currently not under version control, and turn it into a Git repository, or
2. أو _تستنسخ_ مستودع جت موجودا بالفعل.
// 2. You can _clone_ an existing Git repository from elsewhere.

في كلتا الحالتين، سيصير معك مستودع جت على حاسوبك المحلي وجاهز للعمل.
// In either case, you end up with a Git repository on your local machine, ready for work.

==== ابتداء مستودع في مجلد موجود
// ==== Initializing a Repository in an Existing Directory

إذا كان لديك مجلد مشروع ليس تحت إدارة نسخ الآن، وتريد أن تبدأ في إدارته باستخدام جت، تحتاج أولا إلى الذهاب إلى ذلك المجلد.
// If you have a project directory that is currently not under version control and you want to start controlling it with Git, you first need to go to that project's directory.
إن لم تفعل هذا من قبل، فهذا قد يختلف قليلا حسب نظامك:
// If you've never done this, it looks a little different depending on which system you're running:

للينكس:
// for Linux:
[source,console]
----
$ cd /home/user/my_project
----
ل{ماك}:
// for macOS:
[source,console]
----
$ cd /Users/user/my_project
----
لويندوز:
// for Windows:
[source,console]
----
$ cd C:/Users/user/my_project
----

ثم اكتب:
// and type:

[source,console]
----
$ git init
----

هذا ينشئ لك مجلد فرعيا جديدا يُسمى `.git` (يبدأ اسمه بنقطة، فتجعله مجلدا مخفيا) ويحتوى كل الملفات الضرورية لمستودعك -- أيْ هيكل مستودع جت.
// This creates a new subdirectory named `.git` that contains all of your necessary repository files -- a Git repository skeleton.
حتى الآن، لا شيء في مشروعك متعقَّب بعد.
// At this point, nothing in your project is tracked yet.
انظر <<ch10-git-internals#ch10-git-internals>>  للمزيد من المعلومات عن تفاصيل الملفات التي في مجلد `.git` الذي أنشأته للتو.(((git commands, init)))
// See <<ch10-git-internals#ch10-git-internals>> for more information about exactly what files are contained in the `.git` directory you just created.(((git commands, init)))

إذا أردت أن تبدأ في إدارة نسخ ملفات موجودة (وليس مجلدا فارغا)، فعليك بدء تعقب هذه الملفات وصنع إيداع مبدئي.
// If you want to start version-controlling existing files (as opposed to an empty directory), you should probably begin tracking those files and do an initial commit.
يمكنك تحقيق هذا ببعض أوامر الإضافة، `git add`، والتي تحدد الملفات التي تريد تعقبها، ثم أمر الإيداع، `git commit`:
// You can accomplish that with a few `git add` commands that specify the files you want to track, followed by a `git commit`:

[source,console]
----
$ git add *.c
$ git add LICENSE
$ git commit -m 'Initial project version'  # إيداع «النسخة المبدئية من المشروع»‏
----

سنعرف ماذا تفعل هذه الأوامر خلال لحظات.
// We'll go over what these commands do in just a minute.
لكن الآن، لديك مستودع جت به ملفات متعقبة وإيداع مبدئي.
// At this point, you have a Git repository with tracked files and an initial commit.

[[_git_cloning]]
==== استنساخ مستودع موجود
// ==== Cloning an Existing Repository

إذا كنت تريد الحصول على نسخة من مستودع جت موجود -- مثلا مشروع تحب المشاركة فيه -- فإن الأمر الذي تريده هو أمر الاستنساخ، `git clone`.
// If you want to get a copy of an existing Git repository -- for example, a project you'd like to contribute to -- the command you need is `git clone`.
إذا كنت تعرف أنظمة أخرى لإدارة النسخ مثل Subversion، ستلاحظ أن الأمر هو `clone` (استنساخ) وليس `checkout` (سحب).
// If you're familiar with other VCSs such as Subversion, you'll notice that the command is "clone" and not "checkout".
هذا فرق مهم؛ فبدلا من جلب مجرد نسخة للعمل عليها، يحضر لك جت تقريبا كل شيء لدى الخادوم؛
// This is an important distinction -- instead of getting just a working copy, Git receives a full copy of nearly all data that the server has.
كل نسخة من كل ملف عبر تاريخ المشروع، يجذبها جت إليك عندما تكتب `git clone`.
// Every version of every file for the history of the project is pulled down by default when you run `git clone`.
في الحقيقة، إذا تلف قرص الخادوم، يمكنك في الغالب استخدام ربما أي استنساخ من أي عميل لإرجاع الخادوم إلى حالته عندما اُستنسخ (قد تفقد بعض الخطاطيف الخاصة بالخادوم وأشياء من هذا القبيل، لكن جميع البيانات التي تحت إدارة النسخ ستكون موجودة -- انظر <<ch04-git-on-the-server#_getting_git_on_a_server>> للمزيد من التفاصيل).
// In fact, if your server disk gets corrupted, you can often use nearly any of the clones on any client to set the server back to the state it was in when it was cloned (you may lose some server-side hooks and such, but all the versioned data would be there -- see <<ch04-git-on-the-server#_getting_git_on_a_server>> for more details).

استنسخ مستودعًا بالأمر `git clone <رابط>`.(((git commands, clone)))
// You clone a repository with `git clone <url>`.(((git commands, clone)))
مثلا إذا أردت استنساخ مكتبة جت القابلة للربط المسماة `libgit2`، يمكنك فعل ذلك هكذا:
// For example, if you want to clone the Git linkable library called `libgit2`, you can do so like this:

[source,console]
----
$ git clone https://github.com/libgit2/libgit2
----

هذا ينشئ مجلدًا اسمه `libgit2`، ويبتدئ مجلد `.git` فيه، ويجذب جميع بيانات هذا المستودع، ويسحب نسخة عمل من النسخة الأخيرة منه.
// That creates a directory named `libgit2`, initializes a `.git` directory inside it, pulls down all the data for that repository, and checks out a working copy of the latest version.
فإذا ذهبت إلى داخل مجلد `libgit2` الجديد الذي أُنشئ آنفا، فستجد فيه ملفات المشروع تنتظرك للعمل عليها أو استخدامها.
// If you go into the new `libgit2` directory that was just created, you'll see the project files in there, ready to be worked on or used.

إذا أردت استنساخ المستودع إلى مجلد باسم غير `libgit2`، يمكنك تعيين هذا الاسم الجديد بإضافته إلى معاملات الأمر:
// If you want to clone the repository into a directory named something other than `libgit2`, you can specify the new directory name as an additional argument:

[source,console]
----
$ git clone https://github.com/libgit2/libgit2 mylibgit
----

هذا الأمر يفعل الشيء نفسه الذي يفعله الأمر السابق، لكن اختلف المجلد الهدف فصار `mylibgit`.
// That command does the same thing as the previous one, but the target directory is called `mylibgit`.

يستطيع جت التعامل مع عدد من موافيق (بروتوكولات) النقل المختلفة.
// Git has a number of different transfer protocols you can use.
استخدم المثال السابق ميفاق `https://`، ولكنك قد ترى أيضا `git://`، أو `user@server:path/to/repo.git` الذي يستخدم ميفاق SSH.
// The previous example uses the `https://` protocol, but you may also see `git://` or `user@server:path/to/repo.git`, which uses the SSH transfer protocol.
يخبرك <<ch04-git-on-the-server#_getting_git_on_a_server>> بجميع الخيارات التي يستطيع الخادوم إعدادها حتى يمكنك الوصول إلى مستودع جت الخاص بك، ومزايا وعيوب كلٍ منها.
// <<ch04-git-on-the-server#_getting_git_on_a_server>> will introduce all of the available options the server can set up to access your Git repository and the pros and cons of each.
