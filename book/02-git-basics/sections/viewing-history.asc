[[_viewing_history]]
=== ✨ رؤية تاريخ الإيداعات
// === Viewing the Commit History

بعدما صنعت عددًا من الإيداعات، أو استنسخت مستودعًا ذا تاريخ من الإيداعات بالفعل، قد تود الالتفات إلى الماضي ورؤية ماذا حدث.
// After you have created several commits, or if you have cloned a repository with an existing commit history, you'll probably want to look back to see what has happened.
أسهل وأقوى أداة لفعل هذا هي أمر السجل، `git log`:
// The most basic and powerful tool to do this is the `git log` command.

تستعمل هذه الأمثلة مشروعًا صغيرا جدا يسمى "`simplegit`".
// These examples use a very simple project called "`simplegit`".
للحصول على المشروع، نفذ:
// To get the project, run:

[source,console]
----
$ git clone https://github.com/schacon/simplegit-progit
----

عندما تنفذ `git log` داخل هذا المشروع، ترى شيئا مثل هذا:(((git commands, log)))
// When you run `git log` in this project, you should get output that looks something like this:(((git commands, log)))

[source,console]
----
$ git log
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    Change version number

commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 16:40:33 2008 -0700

    Remove unnecessary test

commit a11bef06a3f659402fe7563abf99ad00de2209e6
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 10:31:28 2008 -0700

    Initial commit
----

عندما تنادي أمر السجل بلا مُعامِلات، أيْ `git log` فقط، فإنه افتراضيًا يسرد لك الإيداعات التي في هذا المستودع بترتيب زمني عكسي؛ أيْ أن الإيداع الأحدث يظهر أولًا.
// By default, with no arguments, `git log` lists the commits made in that repository in reverse chronological order; that is, the most recent commits show up first.
يسرد هذا الأمر كما ترى كل إيداع مع بصمته واسم مؤلفه وبريده وتاريخ الإيداع ورسالته.
// As you can see, this command lists each commit with its SHA-1 checksum, the author's name and email, the date written, and the commit message.

يتيح أمر السجل عددًا عظيمًا متنوعًا من الخيارات لتُظهر بالضبط ما تريد.
// A huge number and variety of options to the `git log` command are available to show you exactly what you're looking for.
سنعرض لك هنا بعضًا من أشهرها.
// Here, we'll show you some of the most popular.

واحد من أكثر الخيارات إفادةً هو `-p` أو `--patch` («رُقعة»)، والذي يظهر لك الفرق (أي _الرقعة_) الذي أتى به كل إيداع.
// One of the more helpful options is `-p` or `--patch`, which shows the difference (the _patch_ output) introduced in each commit.
يمكنك أيضا تقييد عدد السجلات المعروضة، مثلا بالخيار `-2` لإظهار آخر بيانَيْن فقط.
// You can also limit the number of log entries displayed, such as using `-2` to show only the last two entries.

[source,console]
----
$ git log -p -2
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    Change version number

diff --git a/Rakefile b/Rakefile
index a874b73..8f94139 100644
--- a/Rakefile
+++ b/Rakefile
@@ -5,7 +5,7 @@ require 'rake/gempackagetask'
 spec = Gem::Specification.new do |s|
     s.platform  =   Gem::Platform::RUBY
     s.name      =   "simplegit"
-    s.version   =   "0.1.0"
+    s.version   =   "0.1.1"
     s.author    =   "Scott Chacon"
     s.email     =   "schacon@gee-mail.com"
     s.summary   =   "A simple gem for using Git in Ruby code."

commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 16:40:33 2008 -0700

    Remove unnecessary test

diff --git a/lib/simplegit.rb b/lib/simplegit.rb
index a0a60ae..47c6340 100644
--- a/lib/simplegit.rb
+++ b/lib/simplegit.rb
@@ -18,8 +18,3 @@ class SimpleGit
     end

 end
-
-if $0 == __FILE__
-  git = SimpleGit.new
-  puts git.show
-end
----

يعرض هذا الخيار المعلومات نفسها أيضا ولكن مع إتباع كل بيان بالفروقات.
// This option displays the same information but with a diff directly following each entry.
هذا مفيد جدا لمراجعة الأكواد (code review) أو للنظر السريع فيما حدث في سلسلة من الإيداعات التي أضافها زميل.
// This is very helpful for code review or to quickly browse what happened during a series of commits that a collaborator has added.
ولدى أمر السجل كذلك عددًا من خيارات التلخيص.
// You can also use a series of summarizing options with `git log`.
فمثلا إذا أردت رؤية إحصاءات مختصرة عن كل إيداع، جرّب خيار الإحصاء `--stat`:
// For example, if you want to see some abbreviated stats for each commit, you can use the `--stat` option:

[source,console]
----
$ git log --stat
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    Change version number

 Rakefile | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 16:40:33 2008 -0700

    Remove unnecessary test

 lib/simplegit.rb | 5 -----
 1 file changed, 5 deletions(-)

commit a11bef06a3f659402fe7563abf99ad00de2209e6
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 10:31:28 2008 -0700

    Initial commit

 README           |  6 ++++++
 Rakefile         | 23 +++++++++++++++++++++++
 lib/simplegit.rb | 25 +++++++++++++++++++++++++
 3 files changed, 54 insertions(+)
----

فخيار `--stat` كما ترى يطبع لك تحت بيان كل إيداع قائمة بالملفات المعدلة وعددها وعدد السطور المضافة والمزالة في هذه الملفات.
// As you can see, the `--stat` option prints below each commit entry a list of modified files, how many files were changed, and how many lines in those files were added and removed.
ثم يضع تلخيصًا لهذه المعلومات في النهاية.
// It also puts a summary of the information at the end.

وخيار آخر مفيد جدًا هو `--pretty` («جميل»).
// Another really useful option is `--pretty`.
والذي يغيّر ناتج السجل إلى صيغ أخرى غير الصيغة المبدئية.
// This option changes the log output to formats other than the default.
تأتي مع جت بعض القيم التي يمكن استعمالها مع هذا الخيار.
// A few prebuilt option values are available for you to use.
قيمة `oneline` («سطر واحد») تطبع كل إيداع على سطر وحيد، والذي يفيد عندما تكون ناظرًا إلى إيداعات كثيرة.
// The `oneline` value for this option prints each commit on a single line, which is useful if you're looking at a lot of commits.
وكذلك، القيم `short` («قصير») و `full` («كامل») و `fuller` («أكمل») تُظهر لك ناتجًا مثل المبدئي مع زيادة أو نقصان في بعض المعلومات.
// In addition, the `short`, `full`, and `fuller` values show the output in roughly the same format but with less or more information, respectively:

[source,console]
----
$ git log --pretty=oneline
ca82a6dff817ec66f44342007202690a93763949 Change version number
085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7 Remove unnecessary test
a11bef06a3f659402fe7563abf99ad00de2209e6 Initial commit
----

القيمة الأكثر إمتاعًا هي `format` («صياغة»)، والتي تتيح لك تحديد صيغة ناتج السجل التي تفضلها.
// The most interesting option value is `format`, which allows you to specify your own log output format.
هذا مفيد خصوصًا عندما تقوم بتوليد ناتج لكي يقرؤه ويحلله برنامج أو بُريمج (script) -- فلأنك تحدد الصيغة بصراحة ووضوح، فإنك تطمئن أنها لن تتغيّر مع تحديث جت.(((log formatting)))
// This is especially useful when you're generating output for machine parsing -- because you specify the format explicitly, you know it won't change with updates to Git:(((log formatting)))

[source,console]
----
$ git log --pretty=format:"%h - %an, %ar : %s"
ca82a6d - Scott Chacon, 6 years ago : Change version number
085bb3b - Scott Chacon, 6 years ago : Remove unnecessary test
a11bef0 - Scott Chacon, 6 years ago : Initial commit
----

يسرد <<pretty_format>> بعض المتغيرات المفيدة التي تفهمها `format`:
// <<pretty_format>> lists some of the more useful specifiers that `format` takes.

[[pretty_format]]
.متغيرات مفيدة لصياغة السجلات باستخدام `git log --pretty=format`
// .Useful specifiers for `git log --pretty=format`
[cols="1,>4",options="header"]
// [cols="1,4",options="header"]
|================================
| المتغير | وصف الناتج
// | Specifier | Description of Output
| `%H`      | بصمة الإيداع
// | `%H`      | Commit hash
| `%h`      | بصمة الإيداع المختصرة
// | `%h`      | Abbreviated commit hash
| `%T`      | بصمة الشجرة
// | `%T`      | Tree hash
| `%t`      | بصمة الشجرة المختصرة
// | `%t`      | Abbreviated tree hash
| `%P`      | بصمات الآباء
// | `%P`      | Parent hashes
| `%p`      | بصمات الآباء المختصرة
// | `%p`      | Abbreviated parent hashes
| `%an`     | اسم المؤلف
// | `%an`     | Author name
| `%ae`     | بريد المؤلف
// | `%ae`     | Author email
| `%ad`     | تاريخ التأليف (الصيغة تتبع `--date=option`)
// | `%ad`     | Author date (format respects the `--date=option`)
| `%ar`     | تاريخ التأليف، نسبي
// | `%ar`     | Author date, relative
| `%cn`     | اسم المودِع
// | `%cn`     | Committer name
| `%ce`     | بريد المودِع
// | `%ce`     | Committer email
| `%cd`     | تاريخ الإيداع
// | `%cd`     | Committer date
| `%cr`     | تاريخ الإيداع، نسبي
// | `%cr`     | Committer date, relative
| `%s`      | الموضوع
// | `%s`      | Subject
|================================

ربما تتساءل عن الفرق بين _المؤلف_ و__المودِع__.
// You may be wondering what the difference is between _author_ and _committer_.
المؤلف هو من كتب العمل في الأصل، بينما المودِع هو من طبّق العمل في النهاية.
// The author is the person who originally wrote the work, whereas the committer is the person who last applied the work.
فمثلا إذا أرسلت رقعة إلى مشروع، وطبّقها أحد الأعضاء الأساسيين، فيجب الاعتراف بالفضل لكليكما -- أنت مؤلفًا، والعضو الأساسي مودِعًا.
// So, if you send in a patch to a project and one of the core members applies the patch, both of you get credit -- you as the author, and the core member as the committer.
سنتناول هذا التمييز بالتفصيل في <<ch05-distributed-git#ch05-distributed-git>>.
// We'll cover this distinction a bit more in <<ch05-distributed-git#ch05-distributed-git>>.

القيمتان `oneline` و `format` مفيدتان خصوصًا مع خيار آخر لأمر السجل يسمى `--graph` («رسم»).
// The `oneline` and `format` option values are particularly useful with another `log` option called `--graph`.
يضيف هذا الخيار رسمًا لطيفًا بالمحارف لإظهار تاريخ التفريع والدمج.
// This option adds a nice little ASCII graph showing your branch and merge history:

[source,console]
----
$ git log --pretty=format:"%h %s" --graph
* 2d3acf9 Ignore errors from SIGCHLD on trap
*  5e3ee11 Merge branch 'master' of https://github.com/dustin/grit.git
|\
| * 420eac9 Add method for getting the current branch
* | 30e367c Timeout code and tests
* | 5a09431 Add timeout protection to grit
* | e1193f8 Support for heads with slashes in them
|/
* d6016bc Require time for xmlschema
*  11d191e Merge branch 'defunkt' into local
----

سيصير هذا النوع من الناتج ممتعًا أكثر أثناء تناولنا التفريع والدمج في الباب التالي.
// This type of output will become more interesting as we go through branching and merging in the next chapter.

هذه فقط بعض خيارات تنسيق الناتج اليسيرة المتاحة في `git log` -- متاح عدد أكبر من ذلك كثيرا.
// Those are only some simple output-formatting options to `git log` -- there are many more.
يسرد <<log_options>> الخيارات التي تناولناها حتى الآن، وكذلك بعض خيارات التنسيق الشائعة الأخرى التي قد تفيد، إضافةً إلى كيفية تعديل ناتج أمر السجل.
// <<log_options>> lists the options we've covered so far, as well as some other common formatting options that may be useful, along with how they change the output of the `log` command.

[[log_options]]
.خيارات شائعة لأمر السجل
// .Common options to `git log`
[cols="1,>4",options="header"]
// [cols="1,4",options="header"]
|================================
| الخيار            | الوصف
// | Option            | Description
| `-p`              | أظهر الرقعة التي أتى بها كل إيداع.
// | `-p`              | Show the patch introduced with each commit.
| `--stat`          | أظهر إحصاءات الملفات المعدّلة في كل إيداع.
// | `--stat`          | Show statistics for files modified in each commit.
| `--shortstat`     | اعرض فقط سطر التعديلات/الإضافات/الإزالات من أمر `--stat`.
// | `--shortstat`     | Display only the changed/insertions/deletions line from the `--stat` command.
| `--name-only`     | اسرد أسماء الملفات المعدلة بعد كل إيداع.
// | `--name-only`     | Show the list of files modified after the commit information.
| `--name-status`   | اسرد أسماء الملفات مرفقة بحالتها: معدّل/مضاف/مزال.
// | `--name-status`   | Show the list of files affected with added/modified/deleted information as well.
| `--abbrev-commit` | أظهر فقط الحروف القليلة الأولى من البصمة، بدلًا من الأربعين جميعًا.
// | `--abbrev-commit` | Show only the first few characters of the SHA-1 checksum instead of all 40.
| `--relative-date` | اعرض التاريخ بصيغة نسبية (مثلا "`2 weeks ago`") بدلا من صيغة التاريخ الكاملة.
// | `--relative-date` | Display the date in a relative format (for example, "`2 weeks ago`") instead of using the full date format.
| `--graph`         | اعرض رسمًا بالمحارف لتاريخ التفريع والدمج بجانب ناتج السجل.
// | `--graph`         | Display an ASCII graph of the branch and merge history beside the log output.
| `--pretty`        | اعرض الإيداعات بصيغة أخرى. قيم الخيار المتاحة تشمل `oneline` و `short` و `full` و `fuller` و `format` (والتي تتيح لك تحديد صياغتك المخصوصة).
// | `--pretty`        | Show commits in an alternate format. Option values include `oneline`, `short`, `full`, `fuller`, and `format` (where you specify your own format).
| `--oneline`       | اختصار لاستخدام `--pretty=oneline --abbrev-commit` معًا.
// | `--oneline`       | Shorthand for `--pretty=oneline --abbrev-commit` used together.
|================================

==== تقييد ناتج السجل
// ==== Limiting Log Output

إضافةً إلى خيارات صياغة الناتج، يتيح أمر السجل عددًا من خيارات تقييد الناتج؛ أيْ خيارات تتيح لك إظهار جزء من الإيداعات فقط.
// In addition to output-formatting options, `git log` takes a number of useful limiting options; that is, options that let you show only a subset of commits.
لقد رأيت أحد هذه الخيارات بالفعل -- خيار `-2` الذي يُظهر آخر إيداعين فقط.
// You've seen one such option already -- the `-2` option, which displays only the last two commits.
الحقيقة أن استخدام `-<ن>`، حيث `ن` هو أي عدد صحيح موجب، يُظهر لك آخر `ن` إيداعًا.
// In fact, you can do `-<n>`, where `n` is any integer to show the last `n` commits.
لن تستخدم هذا كثيرا في الواقع، لأن جت بطبيعته يمرر الناتج كله إلى برنامج عرض ("`pager`" مثل `less`) حتى ترى ناتج السجل صفحةً صفحة.
// In reality, you're unlikely to use that often, because Git by default pipes all output through a pager so you see only one page of log output at a time.

لكن خيارات التقييد بالزمن مثل `--since` («منذ») و `--until` («حتى») مفيدة جدا.
// However, the time-limiting options such as `--since` and `--until` are very useful.
مثلا، هذا الأمر يسرد الإيداعات التي تمت خلال الأسبوعين السابقين:
// For example, this command gets the list of commits made in the last two weeks:

[source,console]
----
$ git log --since=2.weeks
----

يعمل هذا الأمر مع العديد من الصيغ -- يمكنك تحديد تاريخ محدد مثل `"2008-01-15"` أو تاريخ نسبي مثل `"2 years 1 day 3 minutes ago"`.
// This command works with lots of formats -- you can specify a specific date like `"2008-01-15"`, or a relative date such as `"2 years 1 day 3 minutes ago"`.

يمكنك أيضا سرد الإيداعات المطابقة لمعايير بحث معينة.
// You can also filter the list to commits that match some search criteria.
مثلا خيار `--author` يتيح لك سرد إيداعات مؤلف معين فقط، و `--grep` يتيح لك البحث عن كلمات معينة في رسائل الإيداعات.
// The `--author` option allows you to filter on a specific author, and the `--grep` option lets you search for keywords in the commit messages.

[NOTE]
====
يمكنك استخدام `--author` أو `--grep` أكثر من مرة في المرة، والذي يسرد الإيداعات التي توافق _أي_ نمط `--author` معطى وتوافق _أي_ نمط `--grep` معطى؛ ولكن إضافة خيار `--all-match` يقيّد الناتج إلى الإيداعات الموافقة _لجميع_ أنماط `--grep`.
// You can specify more than one instance of both the `--author` and `--grep` search criteria, which will limit the commit output to commits that match _any_ of the `--author` patterns and _any_ of the `--grep` patterns; however, adding the `--all-match` option further limits the output to just those commits that match _all_ `--grep` patterns.
====

مصفاة مفيدة جدا أخرى هي خيار `-S` (والمعروف بالاسم الدارج: خيار «فأس» جت)، والذي يأخذ سلسلة نصية ولا يظهر إلا الإيداعات التي عدّلت عدد تواجداتها.
// Another really helpful filter is the `-S` option (colloquially referred to as Git's "`pickaxe`" option), which takes a string and shows only those commits that changed the number of occurrences of that string.
مثلا، إذا أردت إظهار آخر إيداع أضاف أو أزال إشارة إلى دالة معينة، يمكنك تنفيذ:
// For instance, if you wanted to find the last commit that added or removed a reference to a specific function, you could call:

[source,console]
----
$ git log -S function_name
----

آخر خيار تصفية مفيد جدا لأمر السجل هو إعطاؤه مسار.
// The last really useful option to pass to `git log` as a filter is a path.
فإذا أعطيته مجلدًا أو ملفًا، فإنه يقيّد ناتج السجل إلى الإيداعات التي عدّلت هذه الملفات.
// If you specify a directory or file name, you can limit the log output to commits that introduced a change to those files.
يكون هذا دائما آخر خيار وفي الغالب يُسبق بشرطتين (`--`) لفصل المسارات عن الخيارات:
// This is always the last option and is generally preceded by double dashes (`--`) to separate the paths from the options:

[source,console]
----
$ git log -- path/to/file
----

نسرد في <<limit_options>> هذه الخيارات وبعض الخيارات الأخرى حتى تكون مرجعًا لك.
// In <<limit_options>> we'll list these and a few other common options for your reference.

[[limit_options]]
.خيارات تقييد ناتج أمر السجل
// .Options to limit the output of `git log`
[cols="2,>4",options="header"]
// [cols="2,4",options="header"]
|================================
| الخيار                | الوصف
// | Option                | Description
| `-<ن>`                | أظهر فقط آخر `ن` إيداعًا.
// | `-<n>`                | Show only the last n commits.
| `--since` أو `--after`  | قيّد الناتج إلى الإيداعات التي تمت بعد التاريخ المعطى.
// | `--since`, `--after`  | Limit the commits to those made after the specified date.
| `--until` أو `--before` | قيّد الناتج إلى الإيداعات التي تمت قبل التاريخ المعطى.
// | `--until`, `--before` | Limit the commits to those made before the specified date.
| `--author`            | لا تظهر إلا الإيداعات التي يطابق اسم مؤلفها السلسلة النصية المعطاة.
// | `--author`            | Only show commits in which the author entry matches the specified string.
| `--committer`         | لا تظهر إلا الإيداعات التي يطابق اسم مودِعها السلسلة النصية المعطاة.
// | `--committer`         | Only show commits in which the committer entry matches the specified string.
| `--grep`              | لا تظهر إلا الإيداعات التي تشتمل رسالتها على السلسلة النصية المعطاة.
// | `--grep`              | Only show commits with a commit message containing the string.
| `-S`                  | لا تظهر إلا الإيداعات التي أضافت أو أزالت سطورًا برمجية فيها السلسلة النصية المعطاة.
// | `-S`                  | Only show commits adding or removing code matching the string.
|================================

مثلا، إذا أردت رؤية أيِّ الإيداعات عدّلت ملفات الاختبارات في مصدر جت والتي أودعها Junio Hamano في شهر أكتوبر عام ٢٠٠٨، وليست إيداعات دمج، يمكنك فعل شيء مثل هذا:(((log filtering)))
// For example, if you want to see which commits modifying test files in the Git source code history were committed by Junio Hamano in the month of October 2008 and are not merge commits, you can run something like this:(((log filtering)))

[source,console]
----
$ git log --pretty="%h - %s" --author='Junio C Hamano' --since="2008-10-01" \
   --before="2008-11-01" --no-merges -- t/
5610e3b - Fix testcase failure when extended attributes are in use
acd3b9e - Enhance hold_lock_file_for_{update,append}() API
f563754 - demonstrate breakage of detached checkout with symbolic link HEAD
d1a43f2 - reset --hard/read-tree --reset -u: remove unmerged new paths
51a94af - Fix "checkout --track -b newbranch" on detached HEAD
b0ad11e - pull: allow "git pull origin $something:$current_branch" into an unborn branch
----

حوالي أربعين ألف إيداع في تاريخ مصدر جت، وهذا الأمر لا يُظهر منها إلا الإيداعات الستة المطابقة لتلك المعايير.
// Of the nearly 40,000 commits in the Git source code history, this command shows the 6 that match those criteria.

[TIP]
.منع عرض إيداعات الدمج
// .Preventing the display of merge commits
====
حسب أسلوب سير العمل في مستودعك، قد يكون عدد ضخم من الإيداعات في تاريخ سجلك مجرد إيداعات دمج، وهي لا تفيد كثيرًا.
// Depending on the workflow used in your repository, it's possible that a sizable percentage of the commits in your log history are just merge commits, which typically aren't very informative.
لمنع عرضها وإزحامها تاريخ سجلك، أضف إلى أمر السجل خيار `--no-merges` («لا دمج»).
// To prevent the display of merge commits cluttering up your log history, simply add the `log` option `--no-merges`.
====
