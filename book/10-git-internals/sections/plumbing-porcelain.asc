[[_plumbing_porcelain]]
=== ⏳ الأوامر السفلية والعلوية (السباكة والبورسلين)
// === Plumbing and Porcelain

يشرح هذا الك‍تاب كيف تستعمل جت، ويتناول في الأساس نحو ثلاثين أمرا فرعيا مثل السحب والتفريع والبعيد.
// This book covers primarily how to use Git with 30 or so subcommands such as `checkout`, `branch`, `remote`, and so on.
لكن جت في بادئ الأمر كان طقم أدوات لنظام إدارة نسخ، وليس نظاما سهلا مريحا للمستخدم. فهو يتيح عددا من الأوامر الفرعية التي تجري أعمالا منخفضة المستوى، والتي قد صُممت لتُنفذ بالتتابع في قناة يونكسية أو تُستعمل في بُريمجات.
// But because Git was initially a toolkit for a version control system rather than a full user-friendly VCS, it has a number of subcommands that do low-level work and were designed to be chained together UNIX-style or called from scripts.
تُسمى هذه الأوامر عمومًا في جت بأوامر «السباكة»، ولكننا سنسميها في العربية «الأوامر السفلية». أما الأوامر الأخرى المريحة للمستخدم فتسمى أوامر «البورسلين»، وسنسميها «الأوامر العلوية».
// These commands are generally referred to as Git's "`plumbing`" commands, while the more user-friendly commands are called "`porcelain`" commands.

وكما لاحظت، إن أبواب الك‍تاب التسعة السابقة كادت ألا تتعامل إلا مع الأوامر العلوية.
// As you will have noticed by now, this book's first nine chapters deal almost exclusively with porcelain commands.
لكن في هذا الباب لن نتعامل إلا مع الأوامر السفلية، لأنها توصلنا إلى العمليات الداخلية في جت، وتساعدنا في شرح كيف يعمل جت ولماذا يفعل ما يفعله.
// But in this chapter, you'll be dealing mostly with the lower-level plumbing commands, because they give you access to the inner workings of Git, and help demonstrate how and why Git does what it does.
ليس المراد من الكثير من هذه الأوامر أن تُستعمل يدويًّا في سطر الأوامر، بل أن تُستعمل في صناعة أدوات جديدة وفي البُريمجات المخصصة.
// Many of these commands aren't meant to be used manually on the command line, but rather to be used as building blocks for new tools and custom scripts.

عندما تنفّذ أمر الابتداء `git init` في مجلد جديد أو موجود سابقا، ينشئ جت مجلد `.git`، الذي فيه تقريبا كل شيء يخزنه جت ويعدّل فيه.
// When you run `git init` in a new or existing directory, Git creates the `.git` directory, which is where almost everything that Git stores and manipulates is located.
فإذا أردت عمل نسخة احتياطية من مستودعك أو أردت استنساخه، فنسخ هذا المجلد وحده إلى مكان آخر يعطيك تقريبا كل شيء تريده.
// If you want to back up or clone your repository, copying this single directory elsewhere gives you nearly everything you need.
إنما يتعامل هذا الباب بكامله مع ما تراه في هذا المجلد.
// This entire chapter basically deals with what you can see in this directory.
هذا منظر مجلد `.git` منشأ حديثا:
// Here's what a newly-initialized `.git` directory typically looks like:

[source,console]
----
$ ls -F1
config
description
HEAD
hooks/
info/
objects/
refs/
----

قد ترى أشياءً مزيدة حسب نسختك من جت، لكن هذا مستودع قد نُفّذ فيه `git init` توًّا؛ إنه ما تراه مبدئيا.
// Depending on your version of Git, you may see some additional content there, but this is a fresh `git init` repository -- it's what you see by default.
ملف `description` لا يستعمله إلا GitWeb، فلا تعبأ به.
// The `description` file is used only by the GitWeb program, so don't worry about it.
ملف `config` فيه إعدادات التهيئة الخاصة بمشروعك. ومجلد `info` يحتفظ بملف استثناءات عالمي (((excludes)))  لأنماط التجاهل التي لا تريد تسجيلها في ملف `.gitignore`.
// The `config` file contains your project-specific configuration options, and the `info` directory keeps a global exclude file (((excludes))) for ignored patterns that you don't want to track in a `.gitignore` file.
مجلد `hooks` فيه بُريمجات الخطاطيف الخاصة بالعميل أو الخادوم. وقد شرحناها بالتفصيل في <<ch08-customizing-git#_git_hooks>>.
// The `hooks` directory contains your client- or server-side hook scripts, which are discussed in detail in <<ch08-customizing-git#_git_hooks>>.

هذا يبقى لنا أربعة عناصر مهمة: ملف الرأس `HEAD`، وملف الفهرس `index` (الذي لم يُنشأ بعد)، ومجلد الكائنات `objects` ومجلد الإشارات `refs`.
// This leaves four important entries: the `HEAD` and (yet to be created) `index` files, and the `objects` and `refs` directories.
هذه هي قلب جت.
// These are the core parts of Git.
The `objects` directory stores all the content for your database, the `refs` directory stores pointers into commit objects in that data (branches, tags, remotes and more), the `HEAD` file points to the branch you currently have checked out, and the `index` file is where Git stores your staging area information.
You'll now look at each of these sections in detail to see how Git operates.
