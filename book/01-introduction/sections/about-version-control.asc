=== ✨ عن إدارة النسخ
// === About Version Control

(((version control)))
ما هي «إدارة النسخ»، ولماذا عليك أن تهتم؟
// What is "`version control`", and why should you care?
إدارة النسخ هي نظام يسجل التعديلات على ملف أو مجموعة من الملفات عبر الزمان، حتى يمكنك استدعاء نسخ معينة منها فيما بعد.
// Version control is a system that records changes to a file or set of files over time so that you can recall specific versions later.
نستخدم في أمثلة هذا الك‍تاب ملفات مصادر برمجية لإدارة نُسخها، ولو أن في الحقيقة يمكنك فعل ذلك مع أكثر أنواع الملفات الحاسوبية.
// For the examples in this book, you will use software source code as the files being version controlled, though in reality you can do this with nearly any type of file on a computer.

إذا كنت مصمم رسوميات أو وب وتريد الإبقاء على جميع نسخ صورة أو تخطيط (والذي هو شيء يُفترض أنك تريد فعله بالتأكيد)، فإن استخدام نظام إدارة نسخ (VCS) لهو قرار حكيم جدا.
// If you are a graphic or web designer and want to keep every version of an image or layout (which you would most certainly want to), a Version Control System (VCS) is a very wise thing to use.
فهو يسمح لك بإرجاع ملف محدد إلى حالة سابقة، أو إرجاع المشروع كله إلى حالة سابقة، أو مقارنة التعديلات عبر الزمان، أو معرفة مَن آخر من عدّل شيئا قد يكون سبّب مشكلة، أو مَن تسبب في إحداث علّة، وغير ذلك.
// It allows you to revert selected files back to a previous state, revert the entire project back to a previous state, compare changes over time, see who last modified something that might be causing a problem, who introduced an issue and when, and more.
استخدام نظام إدارة نسخ أيضا يعني في العموم أنك إذا دمّرت أشياء أو فقدت ملفات، فإنك تستطيع استرداد الأمور بسَهولة.
// Using a VCS also generally means that if you screw things up or lose files, you can easily recover.
وكل هذا تحصل عليه مقابل عبء ضليل جدا.
// In addition, you get all this for very little overhead.

==== الأنظمة المحلية لإدارة النسخ
//==== Local Version Control Systems

(((version control,local)))
طريقة إدارة النسخ عند الكثيرين هي نسخ الملفات إلى مجلد آخر (ربما بختم زمني، إذا كان المستخدم بارعا).
// Many people's version-control method of choice is to copy files into another directory (perhaps a time-stamped directory, if they're clever).
هذه الطريقة شائعة جدا لأنها سهلة جدا، لكنها أيضا خطّاءة جدا جدا.
// This approach is very common because it is so simple, but it is also incredibly error prone.
فسهل جدا أن تنسى أي مجلد أنت فيه وأن تكتب على الملف الخاطئ أو تنسخ على ملفات لم ترد إبدالها.
// It is easy to forget which directory you're in and accidentally write to the wrong file or copy over files you don't mean to.

لحل هذه القضية، طوّر المبرمجون منذ زمن بعيد «أنظمة محلية لإدارة النسخ» ذات قاعدة بيانات بسيطة تحفظ جميع التعديلات على الملفات المراد التحكم في نُسخها.
// التي تحت «التحكم في المراجعات».
// To deal with this issue, programmers long ago developed local VCSs that had a simple database that kept all the changes to files under revision control.

.رسم توضيحي للإدارة المحلية للنسخ
//.Local version control diagram
image::images/local-AR.png[رسم توضيحي للإدارة المحلية للنسخ]
// image::images/local.png[Local version control diagram]

كان من أشهر أنظمة إدارة النسخ نظام يسمى RCS، وهو ما زال موزعا مع حواسيب كثيرة اليوم.
// One of the most popular VCS tools was a system called RCS, which is still distributed with many computers today.
يعمل https://www.gnu.org/software/rcs/[RCS^] بالاحتفاظ بمجموعات الرقع (أي الفروقات بين الملفات) بصيغة مخصوصة على القرص؛ فيمكنه إذًا إحياء أي ملف من أي حقبة زمنية بمجرد جمع الرقع.
// https://www.gnu.org/software/rcs/[RCS^] works by keeping patch sets (that is, the differences between files) in a special format on disk; it can then re-create what any file looked like at any point in time by adding up all the patches.

==== الأنظمة المركزية لإدارة النسخ
// ==== Centralized Version Control Systems

(((version control,centralized)))
المشكلة الكبرى الأخرى التي واجهت الناس هي أنهم يحتاجون إلى التعاون مع مطوِّرين على أنظمة أخرى.
// The next major issue that people encounter is that they need to collaborate with developers on other systems.
ولحلها، أُنشئت «الأنظمة المركزية لإدارة النسخ» (CVCS).
// To deal with this problem, Centralized Version Control Systems (CVCSs) were developed.
لهذه الأنظمة (مثل CVS و Subversion و Perforce) خادوم وحيد به جميع الملفات المراقَبة، وعدد من العملاء الذين يستنسخون الملفات من ذلك المركز الوحيد.(((CVS)))(((Subversion)))(((Perforce)))
// These systems (such as CVS, Subversion, and Perforce) have a single server that contains all the versioned files, and a number of clients that check out files from that central place.(((CVS)))(((Subversion)))(((Perforce)))
كان هذا هو المعيار المتبع لإدارة النسخ لأعوام عديدة.
// For many years, this has been the standard for version control.

.رسم توضيحي للإدارة المركزية للنسخ
//.Centralized version control diagram
image::images/centralized-AR.png[رسم توضيحي للإدارة المركزية للنسخ]
// image::images/centralized.png[Centralized version control diagram]

لهذا الترتيب مزايا كثيرة، لا سيما على الإدارة المحلية للنسخ.
// This setup offers many advantages, especially over local VCSs.
مثلا، الجميع يعلم، إلى حدٍ ما، كل ما يفعله الآخرون في المشروع نفسه.
// For example, everyone knows to a certain degree what everyone else on the project is doing.
ولدى المديرين تحكم مفصّل في تحديد مَن يستطيع فعل ماذا، وإنه لأسهل كثيرا إدارة نظام مركزي مقارنةً بالتعامل مع قواعد بيانات محلية عند كل عميل.
// Administrators have fine-grained control over who can do what, and it's far easier to administer a CVCS than it is to deal with local databases on every client.

ولكن لهذا الترتيب بعض العيوب الخطيرة.
// However, this setup also has some serious downsides.
أكثرها وضوحا هو نقطة الانهيار الحاسمة الذي يمثلها الخادوم المركزي.
// The most obvious is the single point of failure that the centralized server represents.
فإذا تعطل الخادوم ساعةً، ففي تلك الساعة لن يستطيع أحد مطلقا التعاون أو حتى حفظ تعديلاتهم على ما يعملون عليه.
// If that server goes down for an hour, then during that hour nobody can collaborate at all or save versioned changes to anything they're working on.
وإذا تلف قرص قاعدة البيانات المركزية، ولم تحفظ أي نسخ احتياطية، ستفقد كل شيء تماما: تاريخ المشروع برُمّته، ما عدا أي لقطات فردية تصادف أن يُبقيها الناس على أجهزتهم المحلية.
// If the hard disk the central database is on becomes corrupted, and proper backups haven't been kept, you lose absolutely everything -- the entire history of the project except whatever single snapshots people happen to have on their local machines.
تعاني الأنظمة المحلية لإدارة النسخ أيضا من هذه العلة نفسها؛ وقتما جعلت التاريخ الكامل للمشروع في مكان وحيد، فإنك تعرض نفسك لفقد كل شيء.
// Local VCSs suffer from this same problem -- whenever you have the entire history of the project in a single place, you risk losing everything.

==== الأنظمة الموزعة لإدارة النسخ
//==== Distributed Version Control Systems

(((version control,distributed)))
الآن تتدخل الأنظمة الموزعة لإدارة النسخ (DVCS).
// This is where Distributed Version Control Systems (DVCSs) step in.
في نظام موزع (مثل جت و Mercurial و Darcs)، لا يستنسخ العملاء اللقطة الأخيرة فقط من الملفات، ولكنهم يستنسخون المستودع برُمّته، بما في ذلك تاريخه بالكامل.
// In a DVCS (such as Git, Mercurial or Darcs), clients don't just check out the latest snapshot of the files; rather, they fully mirror the repository, including its full history.
لذا فإن انهار أحد الخواديم فجأة، وكانت هذه الأنظمة تتعاون عبر هذا الخادوم، فيمكن نسخ مستودع أي عميل إلى الخادوم مجددا لإعادته للعمل.
// Thus, if any server dies, and these systems were collaborating via that server, any of the client repositories can be copied back up to the server to restore it.
كل نسخة هي في الحقيقة نسخة احتياطية كاملة لجميع البيانات.
// Every clone is really a full backup of all the data.

.رسم توضيحي للإدارة الموزعة للنسخ
//.Distributed version control diagram
image::images/distributed-AR.png[رسم توضيحي للإدارة الموزعة للنسخ]
// image::images/distributed.png[Distributed version control diagram]

علاوة على ذلك، الكثير من هذه الأنظمة تتعامل جيدا مع وجود العديد من المستودعات البعيدة التي يمكنها العمل معها، لذا يمكنك التعاون مع مجموعات مختلفة من الناس بأساليب متعددة في الوقت نفسه داخل المشروع الواحد.
// Furthermore, many of these systems deal pretty well with having several remote repositories they can work with, so you can collaborate with different groups of people in different ways simultaneously within the same project.
هذا يسمح لك بتكوين أساليب سير عمل متعددة لم تكن ممكنة في الأنظمة المركزية، كالنماذج الشجرية.
// This allows you to set up several types of workflows that aren't possible in centralized systems, such as hierarchical models.
