[[_first_time]]
=== ✨ إعداد جت لأول مرة
//=== First-Time Git Setup

الآن وقد صار جت على نظامك، ستودّ عمل بعض الأمور لتخصيص بيئته لك.
// Now that you have Git on your system, you'll want to do a few things to customize your Git environment.
تحتاج عملها مرة واحدة فقط على أي حاسوب؛ فإنها تبقى عندما تحدّث جت.
// You should have to do these things only once on any given computer; they'll stick around between upgrades.
يمكنك أيضا تعديلها في أي وقت بالمرور على الأوامر مرة أخرى.
// You can also change them at any time by running through the commands again.

في جت أداة «تهيئة»، `git config`، لتعرض أو تضبط متغيرات التهيئة التي تتحكم في جميع مناحي مظهر وسلوك جت.(((git commands, config)))
// Git comes with a tool called `git config` that lets you get and set configuration variables that control all aspects of how Git looks and operates.(((git commands, config)))
وتُخزَّن هذه المتغيرات في ثلاثة أماكن مختلفة:
// These variables can be stored in three different places:

1. ملف `[path]/etc/gitconfig`: يحتوي القيم التي تُطبّق على جميع المستخدمين ومستودعاتهم.
// 1. `[path]/etc/gitconfig` file: Contains values applied to every user on the system and all their repositories.
  إذا أعطيت الخيار `--system` («نظام») إلى أمر التهيئة `git config`، فإنه يقرأ ويكتب في هذا الملف تحديدًا.
//   If you pass the option `--system` to `git config`, it reads and writes from this file specifically.
  طبعًا تحتاج صلاحيات إدارية لتعديل هذا الملف لأنه ملف إعدادات خاص بالنظام.
//   Because this is a system configuration file, you would need administrative or superuser privilege to make changes to it.
2. ملف `~/.gitconfig` أو `~/.config/git/config`: القيم الخاصة بك أنت تحديدًا.
// 2. `~/.gitconfig` or `~/.config/git/config` file: Values specific personally to you, the user.
  يمكنك جعل جت يقرأ ويكتب في هذا الملف تحديدًا بالخيار `--global` («عام»)، والذي يؤثر في جميع مستودعاتك على هذا النظام.
//   You can make Git read and write to this file specifically by passing the `--global` option, and this affects _all_ of the repositories you work with on your system.
3. ملف `config` في مجلد جت (أي `.git/config`) في أي مستودع أنت فيه الآن: القيم الخاصة بهذا المستودع وحده.
// 3. `config` file in the Git directory (that is, `.git/config`) of whatever repository you're currently using: Specific to that single repository.
  يمكنك إجبار جت على القراءة والك‍تابة في هذا الملف بالخيار `--local` («محلي»)، ولكن في الحقيقة هذا هو المفترض.
//   You can force Git to read from and write to this file with the `--local` option, but that is in fact the default.
  بالطبع تحتاج إلى التواجد في مكان ما في مستودع جت حتى يمكنك استخدام هذا الخيار.
//   Unsurprisingly, you need to be located somewhere in a Git repository for this option to work properly.

قيم كل مستوى تطغى على قيم المستوى السابق، لذا فقيم `.git/config` تتفوق على التي في `[path]/etc/gitconfig`.
// Each level overrides values in the previous level, so values in `.git/config` trump those in `[path]/etc/gitconfig`.

في أنظمة ويندوز، يبحث جت عن ملف `.gitconfig` في مجلد المنزل، `$HOME` (والذي غالبا يكون `C:\Users\$USER`).
// On Windows systems, Git looks for the `.gitconfig` file in the `$HOME` directory (`C:\Users\$USER` for most people).
ويبحث كذلك عن `[path]/etc/gitconfig`، ولكن بالنسبة إلى جذر MSys، وهو أينما قررت تثبيت جت فيه على نظامك عندما شغّلت المثبت.
// It also still looks for `[path]/etc/gitconfig`, although it's relative to the MSys root, which is wherever you decide to install Git on your Windows system when you run the installer.
وإذا كنت تستخدم Git for Windows النسخة `2.x` أو أحدث، فستجد أيضا ملف إعداد على مستوى النظام، في `C:\Documents and Settings\All Users\Application Data\Git\config` على ويندوز إكس بي، وفي `C:\ProgramData\Git\config` على ويندوز فيستا والأحدث.
// If you are using version 2.x or later of Git for Windows, there is also a system-level config file at `C:\Documents and Settings\All Users\Application Data\Git\config` on Windows XP, and in `C:\ProgramData\Git\config` on Windows Vista and newer.
لا يمكن تغيير هذا الملف إلا بتنفيذ الأمر `git config -f <ملف>` بحساب المدير.
// This config file can only be changed by `git config -f <file>` as an admin.

يمكنك رؤية جميع إعداداتك ومن أين أتت باستخدام:
// You can view all of your settings and where they are coming from using:

[source,console]
----
$ git config --list --show-origin
----

==== هويتك
//==== Your Identity

أول شيء تحتاج فعله عند تثبيت جت هو ضبط اسمك وعنوان بريدك الإلكتروني.
// The first thing you should do when you install Git is to set your user name and email address.
هذا مهم لأن كل إيداع جت يستخدم هاتين المعلومتين، ويصيران جزءًا ثابتًا في الإيداعات التي ستبدأ في صنعها.
// This is important because every Git commit uses this information, and it's immutably baked into the commits you start creating:

[source,console]
----
$ git config --global user.name "John Doe"
$ git config --global user.email johndoe@example.com
----

مجددًا، لن تحتاج إلى فعل هذا إلا مرة واحدة إذا استخدمت الخيار `--global` («عام»)، لأن جت عندئذٍ يستخدم هاتين المعلومتين لكل ما تفعله على هذا النظام.
// Again, you need to do this only once if you pass the `--global` option, because then Git will always use that information for anything you do on that system.
وإن احتجت إلى تجاوز إحدى هاتين القيمتين في مشروعات محددة، يمكنك تنفيذ الأمر في ذلك المشروع بغير خيار `--global`.
// If you want to override this with a different name or email address for specific projects, you can run the command without the `--global` option when you're in that project.

تساعدك الكثير من الواجهات الرسومية في فعل هذا عند تشغيلها لأول مرة.
// Many of the GUI tools will help you do this when you first run them.

[[_editor]]
==== محررك
//==== Your Editor

الآن وقد أعددنا هُويّتك، يمكنك ضبط محررك المبدئي للنصوص، والذي يستخدمه جت عندما يريد منك أن تكتب رسالة.
// Now that your identity is set up, you can configure the default text editor that will be used when Git needs you to type in a message.
إذا لم يكن مضبوطا، فيستخدم جت المحرر المبدئي لنظامك.
// If not configured, Git uses your system's default editor.

إذا أردت استخدام محررا آخر، مثل Emacs، فيمكنك فعل الآتي:
// If you want to use a different text editor, such as Emacs, you can do the following:

[source,console]
----
$ git config --global core.editor emacs
----

على ويندوز، إذا أردت ضبط محرر آخر، فعليك تحديد المسار الكامل لملفه التنفيذي.
// On a Windows system, if you want to use a different text editor, you must specify the full path to its executable file.
والذي يختلف باختلاف طريقة تحزيم محررك.
// This can be different depending on how your editor is packaged.

في حالة Notepad++&lrm;، وهو محرر برمجيات مشهور، ستريد غالبا أن تستخدم نسخة ٣٢-بت منه، لأن حتى وقت ك‍تابة هذا، لا تدعم نسخة ٦٤-بت جميع الإضافات.
// In the case of Notepad++, a popular programming editor, you are likely to want to use the 32-bit version, since at the time of writing the 64-bit version doesn't support all plug-ins.
إذا كنت على ويندوز ٣٢-بت أو تستخدم محرر ٦٤-بت على ويندوز ٦٤-بت، فإنك ستكتب شيئا مثل هذا:
// If you are on a 32-bit Windows system, or you have a 64-bit editor on a 64-bit system, you'll type something like this:

[source,console]
----
$ git config --global core.editor "'C:/Program Files/Notepad++/notepad++.exe' -multiInst -notabbar -nosession -noPlugin"
----

[NOTE]
====
Vim و Emacs و Notepad++&lrm; هي محررات نصوص شهيرة يستخدمها المبرمجون على ويندوز والأنظمة اليونكسية مثل لينكس وماك.
// Vim, Emacs and Notepad++ are popular text editors often used by developers on Unix-based systems like Linux and macOS or a Windows system.
إذا كنت تستخدم محررًا آخر، أو نسخة ٣٢-بت، فرجاءً انظر التعليمات الخاصة بإعداد محررك المفضل مع جت في <<C-git-commands#ch_core_editor>>.
// If you are using another editor, or a 32-bit version, please find specific instructions for how to set up your favorite editor with Git in <<C-git-commands#ch_core_editor>>.
====

[WARNING]
====
إذا لم تضبط محررك مثل هذا، فإنك قد تجد نفسك في حالة محيرة جدا، عندما يحاول جت فتحه.
// You may find, if you don't setup your editor like this, you get into a really confusing state when Git attempts to launch it.
مثال ذلك على ويندوز أن يحاول جت فتح المحرر فلا يستطيع فيغلق مبكرًا.
// An example on a Windows system may include a prematurely terminated Git operation during a Git initiated edit.
====

[[_new_default_branch]]
==== اسم الفرع المبدئي
//==== Your default branch name

عندما تنشئ مستودعًا جديدًا بالأمر `git init`، فإن جت سيُنشئ فيه فرعًا، والذي يسميه مبدئيا `master`.
// By default Git will create a branch called _master_ when you create a new repository with `git init`.
يمكنك ضبط اسم آخر للفرع الأوليّ ابتداءً من النسخة 2.28 من جت.
// From Git version 2.28 onwards, you can set a different name for the initial branch.

لجعل اسم الفرع المبدئي هو `main`، نفّذ:
// To set _main_ as the default branch name do:

[source,console]
----
$ git config --global init.defaultBranch main
----

==== تفقّد إعداداتك
//==== Checking Your Settings

إذا أردت تفقّد إعدادات تهيئتك، فيمكنك استخدام خيار السرد مع أمر التهيئة -- `git config --list` -- والذي يسرد لك جميع الإعدادات التي يراها جت وقتئذٍ:
// If you want to check your configuration settings, you can use the `git config --list` command to list all the settings Git can find at that point:

[source,console]
----
$ git config --list
user.name=John Doe
user.email=johndoe@example.com
color.status=auto
color.branch=auto
color.interactive=auto
color.diff=auto
...
----

ربما ترى بعض الأسماء مكررة، هذا لأن جت قد وجد الاسم نفسه في أكثر من ملف (`[path]/etc/gitconfig` و `~/.gitconfig` مثلا).
// You may see keys more than once, because Git reads the same key from different files (`[path]/etc/gitconfig` and `~/.gitconfig`, for example).
يستخدم جت في مثل هذه الحالة القيمة الأخيرة لكل اسم يراه.
// In this case, Git uses the last value for each unique key it sees.

يمكنك أيضا سؤال جت عن القيمة التي يظنها لاسم معين، بالأمر `git config <اسم>`:(((git commands, config)))
// You can also check what Git thinks a specific key's value is by typing `git config <key>`:(((git commands, config)))

[source,console]
----
$ git config user.name
John Doe
----

[NOTE]
====
قد يقرأ جت متغير تهيئة معين من أكثر من ملف، فمن الممكن أن تجد بعض القيم مثيرة للدهشة ولا تعرف من أين أتت.
// Since Git might read the same configuration variable value from more than one file, it's possible that you have an unexpected value for one of these values and you don't know why.
يمكنك في مثل هذه الحالة سؤال جت: من أين لك هذا؟ -- أي باستخدام خيار إظهار الأصل `--show-origin`، الذي سيخبرك بالملف الذي غلب على أمرهم في قيمة هذا المتغير:
// In cases like that, you can query Git as to the _origin_ for that value, and it will tell you which configuration file had the final say in setting that value:

[source,console]
----
$ git config --show-origin rerere.autoUpdate
file:/home/johndoe/.gitconfig	false
----
====
