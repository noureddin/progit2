[[what_is_git_section]]
=== ✨ ما هو جت؟
//=== What is Git?

إذًا، ما هو جت باختصار؟
// So, what is Git in a nutshell?
هذا فصل مهم ويجب استيعابه جيدا، لأنك إذا فهمت ماهية جت وأصول طريقة عمله، فسيكون سهل جدا عليك استخدام جت بفعالية.
// This is an important section to absorb, because if you understand what Git is and the fundamentals of how it works, then using Git effectively will probably be much easier for you.
وخلال تعلمك جت، عليك تصفية ذهنك من كل ما تعمله عن أنظمة إدارة النسخ الأخرى، مثل CVS أو Subversion أو Perforce -- يساعدك هذا على تجنب أي التباسات خفية عندما تستخدمه.
// As you learn Git, try to clear your mind of the things you may know about other VCSs, such as CVS, Subversion or Perforce -- doing so will help you avoid subtle confusion when using the tool.
ومع أن واجهة جت قريبة الشبه بالأنظمة الأخرى، إلا أن جت يخزن المعلومات بطريقة وينظر إليها نظرةً مختلفة أشد الاختلاف، ويساعدك فهم هذه الفروق على تجنب الالتباس عند استخدامه.
// Even though Git's user interface is fairly similar to these other VCSs, Git stores and thinks about information in a very different way, and understanding these differences will help you avoid becoming confused while using it.(((Subversion)))(((Perforce)))

==== لقطات، وليس فروقات
//==== Snapshots, Not Differences

الفرق الأكبر بين جت وأي نظام آخر (بما في ذلك Subversion وأشباهه)، هو نظرة جت إلى بياناته.
// The major difference between Git and any other VCS (Subversion and friends included) is the way Git thinks about its data.
من حيث المفهوم، تخزن معظم الأنظمة الأخرى المعلومات في صورة سلسلة تعديلات على الملفات.
// Conceptually, most other systems store information as a list of file-based changes.
هذه الأنظمة الأخرى (CVS و Subversion و Perforce إلخ) تنظر إلى المعلومات التي تخزنها على أنها مجموعة من الملفات والتعديلات التي تتم على كل ملف عبر الزمان (يوصف هذا غالبا بأنه إدارة نسخ _بناءً على الفروقات_).
// These other systems (CVS, Subversion, Perforce, and so on) think of the information they store as a set of files and the changes made to each file over time (this is commonly described as _delta-based_ version control).

.تخزين البيانات في صورة تعديلات على نسخة أساسية من كل ملف
//.Storing data as changes to a base version of each file
image::images/deltas-AR.png[تخزين البيانات في صورة تعديلات على نسخة أساسية من كل ملف]
// image::images/deltas.png[Storing data as changes to a base version of each file]

لا ينظر جت إلى بياناته ولا يخزنها بهذه الطريقة.
// Git doesn't think of or store its data this way.
بل يعتبرها أشبه بلقطات من نظام ملفات مصغر.
// Instead, Git thinks of its data more like a series of snapshots of a miniature filesystem.
في جت، كل مرة تصنع إيداعا (`commit`)، أو تحفظ حالة مشروعك، يلتقط جت صورة لما تبدو عليه ملفاتك جميعًا في هذه اللحظة، ويخزن إشارة لهذه اللقطة.
// With Git, every time you commit, or save the state of your project, Git basically takes a picture of what all your files look like at that moment and stores a reference to that snapshot.
وحتى يُحسن استغلال الموارد، فإن الملفات التي لم تتغير لا يخزنها جت مجددا، بل يخزن فقط إشارةً إلى الملف السابق المطابق الذي خزّنه سابقا.
// To be efficient, if files have not changed, Git doesn't store the file again, just a link to the previous identical file it has already stored.
فإن جت يعتبر أن بياناته *سيل من اللقطات*.
// Git thinks about its data more like a *stream of snapshots*.

.تخزين البيانات في صورة لقطات من المشروع على مر الزمان
//.Storing data as snapshots of the project over time
image::images/snapshots-AR.png[تخزين البيانات في صورة لقطات من المشروع على مر الزمان]
// image::images/snapshots.png[Git stores data as snapshots of the project over time]

هذا تمييز مهم بين جت وأكثر الأنظمة الأخرى.
// This is an important distinction between Git and nearly all other VCSs.
إنه يجعل جت يعيد التفكير في أغلب جوانب إدارة النسخ التي نسختها معظم الأنظمة الأخرى من الأجيال السابقة.
// It makes Git reconsider almost every aspect of version control that most other systems copied from the previous generation.
إنه يجعل جت أشبه بنظام ملفات مصغر ذي أدوات خارقة مبنية عليه، بدلا من مجرد نظام إدارة نسخ.
// This makes Git more like a mini filesystem with some incredibly powerful tools built on top of it, rather than simply a VCS.
عندما نتناول التفريع في جت في <<ch03-git-branching#ch03-git-branching>>، سنستكشف بعضًا من المنافع التي تحصل عليها عندما تنظر إلى بياناتك هذه النظرة.
// We'll explore some of the benefits you gain by thinking of your data this way when we cover Git branching in <<ch03-git-branching#ch03-git-branching>>.

==== أغلب العمليات محلية
//==== Nearly Every Operation Is Local

أكثر العمليات في جت لا تحتاج إلا إلى ملفات وموارد محلية لكي تعمل؛ فعموما لا حاجة إلى أي معلومات من حواسيب أخرى على الشبكة.
// Most operations in Git need only local files and resources to operate -- generally no information is needed from another computer on your network.
إذا كنت معتادًا على نظام إدارة نسخ مركزي، حيث معظم العمليات مثقلة بعبء زمن الانتقال في الشبكة، فإن هذا الجانب من جت سيجعلك تظن أن الله قد منّ عليه بقدرة لدنيّة لتكون له هذه السرعة.
// If you're used to a CVCS where most operations have that network latency overhead, this aspect of Git will make you think that the gods of speed have blessed Git with unworldly powers.
فلأن لديك التاريخ الكامل للمشروع بين يديك على قرصك المحلي، فإن معظم العمليات تبدو آنية.
// Because you have the entire history of the project right there on your local disk, most operations seem almost instantaneous.

مثلا، لتصفح تاريخ المشروع، لا يحتاج جت إلى السفر إلى الخادوم ليعود إليك حاملا التاريخ ليعرضه لك -- إنما يقرؤه من قاعدة بياناتك المحلية.
// For example, to browse the history of the project, Git doesn't need to go out to the server to get the history and display it for you -- it simply reads it directly from your local database.
هذا يعني أنك ترى تاريخ المشروع أسرع من طرفة العين.
// This means you see the project history almost instantly.
وإذا أردت أن ترى التعديلات التي حدثت على ملف بين نسخته الآن ومنذ شهر، فيستطيع جت أن يأتي بهذا الملف منذ شهر ويحسب الفرق على حاسوبك، بدلا من الاضطرار إلى طلب هذا الفرق من خادوم بعيد أو طلب النسخة القديمة منه وحساب الفرق محليا.
// If you want to see the changes introduced between the current version of a file and the file a month ago, Git can look up the file a month ago and do a local difference calculation, instead of having to either ask a remote server to do it or pull an older version of the file from the remote server to do it locally.

هذا أيضا يعني أنك ما زلت تستطيع فعل كل شيء، إلا القليل النادر، إذا كنت بغير اتصال بالإنترنت أو بشبكتك الوهمية الخاصة (VPN).
// This also means that there is very little you can't do if you're offline or off VPN.
فإذا كنت في طائرة أو قطار، وتريد العمل قليلا، تستطيع الإيداع بكل سعادة (إلى نسختك _المحلية_، أتتذكر؟) حتى تجد اتصالا شبكيا للرفع.
// If you get on an airplane or a train and want to do a little work, you can commit happily (to your _local_ copy, remember?) until you get to a network connection to upload.
وإذا عدت إلى المنزل ولم تجد عميل شبكتك الوهمية يستطيع العمل، فإنك ما زلت تستطيع العمل.
// If you go home and can't get your VPN client working properly, you can still work.
أما في الكثير من الأنظمة الأخرى، فالعمل من غير اتصال إما أليم جدا وإما مستحيل أصلا.
// In many other systems, doing so is either impossible or painful.
في Perforce مثلا، لا يمكنك فعل الكثير إن لم تكن متصلا بالخادوم. في Subversion و CVS تستطيع تعديل الملفات، لكن لا تستطيع إيداع أي تعديلات في قاعدة بياناتك (لأن قاعدة بياناتك غير متصلة).
// In Perforce, for example, you can't do much when you aren't connected to the server; in Subversion and CVS, you can edit files, but you can't commit changes to your database (because your database is offline).
ربما تظن أن هذا ليس بالأمر العظيم، لكنك إذًا ستتفاجأ بضخامة الفرق الذي يصنعه.
// This may not seem like a huge deal, but you may be surprised what a big difference it can make.

==== في جت السلامة
// ==== Git Has Integrity

يضمن جت سلامة البيانات دائمًا،
فهو يحسب قيم البصمات لكل شيء قبل أن يخزنه، وبعدئذٍ يشير إلى الأشياء ببصماتها.
// Everything in Git is checksummed before it is stored and is then referred to by that checksum.
هذا يعني أن تعديل محتويات أي ملف أو مجلد بغير علم جت مستحيل.
// This means it's impossible to change the contents of any file or directory without Git knowing about it.
هذا مبني في أساس جت ومن أركان فلسفته.
// This functionality is built into Git at the lowest levels and is integral to its philosophy.
فمستحيل فقد معلومات أثناء النقل أو حتى فساد ملفات من غير أن يكتشف جت ذلك.
// You can't lose information in transit or get file corruption without Git being able to detect it.

الآلية التي يستخدمها جت لحساب البصمة معروفة باسم بصمة {شاه١}.(((SHA-1)))
// The mechanism that Git uses for this checksumming is called a SHA-1 hash.(((SHA-1)))
وهي تنتج سلسلة نصية من أربعين (٤٠) رقما ستعشريا (0–9 و a–f) محسوبين من محتوى الملف أو بنية المجلد في جت.
// This is a 40-character string composed of hexadecimal characters (0–9 and a–f) and calculated based on the contents of a file or directory structure in Git.
تشبه بصمة {شاه١} هذا:
// A SHA-1 hash looks something like this:

[source]
----
24b9da6552252987aa493b52f8696cd6d3b00373
----

ترى قيم البصمات هذه في كل مكان في جت لأنه يستخدمها كثيرا.
// You will see these hash values all over the place in Git because it uses them so much.
في الحقيقة، يخزن جت كل  شيء في قاعدة بياناته، ليس بأسماء الملفات، بل بقيم بصمة محتواها.
// In fact, Git stores everything in its database not by file name but by the hash value of its contents.

==== يضيف جت بيانات فقط في العموم
//==== Git Generally Only Adds Data

أكثر الإجراءات في جت لا تفعل شيئا سوى أن _تضيف_ بيانات إلى قاعدة بيانات جت.
// When you do actions in Git, nearly all of them only _add_ data to the Git database.
ومن الصعب أن تجعله يفعل شيئا لا يمكن التراجع عنه أو أن تجعله يمسح بيانات بأي طريقة.
// It is hard to get the system to do anything that is not undoable or to make it erase data in any way.
مثلما الحال مع أي نظام إدارة نسخ، يمكن أن تفقد أو تدمر التعديلات التي لم تودعها بعد، لكن ما إن تودعها في جت، فمن العسير جدا أن تفقدها، خصوصا إذا كنت تدفع (`push`) قاعدة بياناتك بانتظام إلى مستودع آخر.
// As with any VCS, you can lose or mess up changes you haven't committed yet, but after you commit a snapshot into Git, it is very difficult to lose, especially if you regularly push your database to another repository.

هذا يجعل استخدام جت مبهجًا لأننا نعلم أننا نستطيع التجريب بغير خطر التخريب.
// This makes using Git a joy because we know we can experiment without the danger of severely screwing things up.
لنظرة أعمق على كيفية تخرين جت لبياناته وكيفية استعادة البيانات التي تبدو لك قد فُقدت، انظر <<ch02-git-basics-chapter#_undoing>>.
// For a more in-depth look at how Git stores its data and how you can recover data that seems lost, see <<ch02-git-basics-chapter#_undoing>>.

==== المراحل الثلاثة
//==== The Three States

انتبه الآن وركّز؛ هذا هو أهم شيء عليك أن تتذكره دوما عن جت إذا أردت أن تمضي رحلة تعلمك بسلاسة.
// Pay attention now -- here is the main thing to remember about Git if you want the rest of your learning process to go smoothly.
في جت ثلاث مراحل يمكن أن تكون ملفاتك فيها: _معدّل_، و__مؤهل__، و__مُودَع__.
// Git has three main states that your files can reside in: _modified_, _staged_, and _committed_:

* معدل يعني أنك عدلت الملف لكنك لم تُودِع التعديلات بعد في قاعدة بياناتك.
* مؤهل يعني أنك حددت ملفًا معدلًا في نسخته الحالية ليكون ضمن لقطة الإيداع التالية.
* مُودَع يعني أن البيانات صارت مخزنة بأمان في قاعدة بياناتك.

// * Modified means that you have changed the file but have not committed it to your database yet.
// * Staged means that you have marked a modified file in its current version to go into your next commit snapshot.
// * Committed means that the data is safely stored in your local database.

يقودنا هذا إلى الأقسام الرئيسية الثلاثة في أي مشروع جت: شجرة العمل، ومنطقة التأهيل، ومجلد جت.
// This leads us to the three main sections of a Git project: the working tree, the staging area, and the Git directory.

.شجرة العمل، ومنطقة التأهيل، ومجلد جت
//.Working tree, staging area, and Git directory
image::images/areas-AR.png[شجرة العمل، ومنطقة التأهيل، ومجلد جت]
// image::images/areas.png["Working tree, staging area, and Git directory"]

شجرة العمل (أو مجلد العمل) هي نسخة واحدة مسحوبة من المشروع.
// The working tree is a single checkout of one version of the project.
تُجلب لك هذه الملفات من قاعدة البيانات المضغوطة في مجلد جت وتُوضع لك على القرص لتستخدمها أو تعدلها.
// These files are pulled out of the compressed database in the Git directory and placed on disk for you to use or modify.

منطقة التأهيل هي ملف يخزن معلومات عما سيكون في إيداعك التالي، وعادةً يكون ملف منطقة التأهيل في مجلد جت لمشروعك.
// The staging area is a file, generally contained in your Git directory, that stores information about what will go into your next commit.
المصطلح التقني في لغة جت هو «الفهرس» (`index`)، لكن العبارة «منطقة التأهيل» (`staging area`) مناسبة ومستخدمة أيضا.
// Its technical name in Git parlance is the "`index`", but the phrase "`staging area`" works just as well.

مجلد جت هو المكان الذي يخزن فيه جت البيانات الوصفية وقاعدة بيانات الكائنات لمشروعك.
// The Git directory is where Git stores the metadata and object database for your project.
هذا هو أهم جزء في جت، وهم الذي يُنسخ عندما _تستنسخ_ (`clone`) مستودعا من حاسوب آخر.
// This is the most important part of Git, and it is what is copied when you _clone_ a repository from another computer.

يبدو أسلوب سير العمل الأساسي في جت مثل هذا:
// The basic Git workflow goes something like this:

1. تعدّل ملفات في شجرة عملك.
2. تنتقي من تلك التعديلات ما تؤهله ليكون جزءًا من إيداعك التالي، وهذا _لا يضيف إلا_ هذه التعديلات إلى منطقة التأهيل.
3. تصنع إيداعا، وهذا يلتقط صورة للملفات كما هي من منطقة التأهيل ويخزن هذه اللقطة في مجلد جت لمشروعك إلى الأبد.

// 1. You modify files in your working tree.
// 2. You selectively stage just those changes you want to be part of your next commit, which adds _only_ those changes to the staging area.
// 3. You do a commit, which takes the files as they are in the staging area and stores that snapshot permanently to your Git directory.

إذا كانت نسخة معينة من أحد الملفات موجودة داخل مجلد جت، فإنها تعتبر _مُودَعة_.
// If a particular version of a file is in the Git directory, it's considered _committed_.
وإذا كانت معدّلة وقد أضيفت إلى منطقة التأهيل، فإنها _مؤهَّلة_.
// If it has been modified and was added to the staging area, it is _staged_.
وإذا كانت معدّلة بعد آخر مرة سُحبت فيها لكنها لم تؤهل بعد، فإنها _معدَّلة_.
// And if it was changed since it was checked out but has not been staged, it is _modified_.
ستتعلم المزيد في <<ch02-git-basics-chapter#ch02-git-basics-chapter>> عن هذه الحالات وكيف يمكنك استغلالها أو تخطي مرحلة التأهيل برمتها.
// In <<ch02-git-basics-chapter#ch02-git-basics-chapter>>, you'll learn more about these states and how you can either take advantage of them or skip the staged part entirely.
