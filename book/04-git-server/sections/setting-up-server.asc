[[_setting_up_server]]
=== ✨ إعداد الخادوم
// === Setting Up the Server

لنعدّ معا وصولَ SSH على الخادوم.
// Let's walk through setting up SSH access on the server side.
سنستعمل في هذا المثال طريقة `authorized_keys` («المفاتيح المستوثَقة») لاستيثاق مستخدميك.
// In this example, you'll use the `authorized_keys` method for authenticating your users.
سنفترض أيضا أنك تستعمل توزيعة لينكس معتادة مثل أوبنتو.
// We also assume you're running a standard Linux distribution like Ubuntu.

[NOTE]
====
معظم المشروح هنا يمكن عمله آليًّا بأمر `ssh-copy-id`، بدلا من نسخ المفاتيح العمومية وتثبيتها يدويا.
// A good deal of what is described here can be automated by using the `ssh-copy-id` command, rather than manually copying and installing public keys.
====

أولا، أنشئ حساب مستخدم باسم `git` وأنشئ مجلد `.ssh` له.
// First, you create a `git` user account and a `.ssh` directory for that user.

[source,console]
----
$ sudo adduser git
$ su git
$ cd
$ mkdir .ssh && chmod 700 .ssh
$ touch .ssh/authorized_keys && chmod 600 .ssh/authorized_keys
----

سنحتاج الآن إلى إضافة بعض مفاتيح SSH العمومية للمطورين إلى ملف المفاتيح المستوثَقة الخاص بالمستخدم `git`.
// Next, you need to add some developer SSH public keys to the `authorized_keys` file for the `git` user.
لنفرض أن لديك بعض المفاتيح الموثوقة وأنك حفظتها في ملفات مؤقتة.
// Let's assume you have some trusted public keys and have saved them to temporary files.
للتذكير، تبدو المفاتيح العمومية هكذا:
// Again, the public keys look something like this:

[source,console]
----
$ cat /tmp/id_rsa.badr.pub
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCB007n/ww+ouN4gSLKssMxXnBOvf9LGt4L
ojG6rs6hPB09j9R/T17/x4lhJA0F3FR1rP6kYBRsWj2aThGw6HXLm9/5zytK6Ztg3RPKK+4k
Yjh6541NYsnEAZuXz0jTTyAUfrtU3Z5E003C4oxOj6H0rfIF1kKI9MAQLMdpGW1GYEIgS9Ez
Sdfd8AcCIicTDWbqLAcU4UpkaX8KyGlLwsNuuGztobF8m72ALC/nLF6JLtPofwFBlgc+myiv
O7TCUSBdLQlgMVOFq1I2uPWQOkOWQAHukEOmfjy2jctxSDBQ220ymjaNsHT4kgtZg2AYYgPq
dAv8JggJICUvax2T9va5 gsg-keypair
----

// [source,console]
// ----
// $ cat /tmp/id_rsa.john.pub
// ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCB007n/ww+ouN4gSLKssMxXnBOvf9LGt4L
// ojG6rs6hPB09j9R/T17/x4lhJA0F3FR1rP6kYBRsWj2aThGw6HXLm9/5zytK6Ztg3RPKK+4k
// Yjh6541NYsnEAZuXz0jTTyAUfrtU3Z5E003C4oxOj6H0rfIF1kKI9MAQLMdpGW1GYEIgS9Ez
// Sdfd8AcCIicTDWbqLAcU4UpkaX8KyGlLwsNuuGztobF8m72ALC/nLF6JLtPofwFBlgc+myiv
// O7TCUSBdLQlgMVOFq1I2uPWQOkOWQAHukEOmfjy2jctxSDBQ220ymjaNsHT4kgtZg2AYYgPq
// dAv8JggJICUvax2T9va5 gsg-keypair
// ----

ليس عليك إلا إضافتها إلى ملف `authorized_keys` الخاص بالمستخدم `git` الموجود في مجلد `.ssh` الخاص به:
// You just append them to the `git` user's `authorized_keys` file in its `.ssh` directory:

[source,console]
----
$ cat /tmp/id_rsa.badr.pub >> ~/.ssh/authorized_keys
$ cat /tmp/id_rsa.shams.pub >> ~/.ssh/authorized_keys
$ cat /tmp/id_rsa.wafaa.pub >> ~/.ssh/authorized_keys
----

// [source,console]
// ----
// $ cat /tmp/id_rsa.john.pub >> ~/.ssh/authorized_keys
// $ cat /tmp/id_rsa.josie.pub >> ~/.ssh/authorized_keys
// $ cat /tmp/id_rsa.jessica.pub >> ~/.ssh/authorized_keys
// ----

أعدّ الآن مستودع مجرد لهم بأمر الابتداء `git init` مع الخيار `--bare`، لتنشئ المستودع بلا مجلد عمل:(((git commands, init, bare)))
// Now, you can set up an empty repository for them by running `git init` with the `--bare` option, which initializes the repository without a working directory:(((git commands, init, bare)))

[source,console]
----
$ cd /srv/git
$ mkdir project.git
$ cd project.git
$ git init --bare
Initialized empty Git repository in /srv/git/project.git/
----

عندئذٍ يستطيع بدر أو شمس أو وفاء دفع النسخة الأولى من مشروعهم إلى المستودع بإضافته مستودعًا بعيدًا في نسختهم المحلية، ودفع الفرع الذي لديهم إليه.
// Then, John, Josie, or Jessica can push the first version of their project into that repository by adding it as a remote and pushing up a branch.
لاحظ أن في كل مرة تريد فيها إضافة مشروع، على شخصٍ ما الوصول إلى الجهاز عبر الصدفة وإنشاء مستودع مجرد.
// Note that someone must shell onto the machine and create a bare repository every time you want to add a project.
لنجعل `gitserver` اسم المضيف ("`hostname`") للخادوم الذي أعددت عليه المستودع ومستخدم `git`.
// Let's use `gitserver` as the hostname of the server on which you've set up your `git` user and repository.
إذا كنت تشغّل الخادوم داخليا وأعددت DNS ليشير الاسم `gitserver` إلى هذا الخادوم، فيمكنك استعمال الأوامر كما هي تقريبا (بفرض أن `myproject` هو مشروع موجود وفيه مِلفات):
// If you're running it internally, and you set up DNS for `gitserver` to point to that server, then you can use the commands pretty much as is (assuming that `myproject` is an existing project with files in it):

[source,console]
----
# على حاسوب بدر
$ cd myproject
$ git init
$ git add .
$ git commit -m 'Initial commit'
$ git remote add origin git@gitserver:/srv/git/project.git
$ git push origin master
----

// [source,console]
// ----
// # on John's computer
// $ cd myproject
// $ git init
// $ git add .
// $ git commit -m 'Initial commit'
// $ git remote add origin git@gitserver:/srv/git/project.git
// $ git push origin master
// ----

الآن سيستطيع الآخرون استنساخه إلى أجهزتهم ودفع تعديلاتهم إليه بالسَهولة نفسها:
// At this point, the others can clone it down and push changes back up just as easily:

[source,console]
----
$ git clone git@gitserver:/srv/git/project.git
$ cd project
$ vim README
$ git commit -am 'Fix for README file'
$ git push origin master
----

بهذه الطريقة ستحصل سريعا على خادوم جت يتيح إذنَي القراءة والتحرير لبضعة مطورين.
// With this method, you can quickly get a read/write Git server up and running for a handful of developers.

عليك أيضا ملاحظة أن حتى الآن، أولئك المستخدمين جميعهم يمكنهم أيضا الولوج إلى الخادوم والحصول على صدفة المستخدم `git`.
// You should note that currently all these users can also log into the server and get a shell as the `git` user.
إذا أردت تقييد هذا، فعليك تغيير الصدفة إلى شيء آخر في ملف `/etc/passwd`.
// If you want to restrict that, you will have to change the shell to something else in the `/etc/passwd` file.

يمكنك بسَهولة تقييد حساب المستخدم `git` إلى الأنشطة المرتبطة بـجت باستعمال أداة صدفة مقيَّدة اسمها `git-shell` («صدفة جت») وهي مرفقة مع جت.
// You can easily restrict the `git` user account to only Git-related activities with a limited shell tool called `git-shell` that comes with Git.
فإذا ضبطتها لتكون صدفة ولوج لحساب المستخدم `git` فإن هذا الحساب لن يكون له وصول صدفة طبيعي إلى خادومك.
// If you set this as the `git` user account's login shell, then that account can't have normal shell access to your server.
لاستعمالها، حدد `git-shell`  لتكون صدفة ولوج لهذا الحساب بدلا من `bash` أو `csh`.
// To use this, specify `git-shell` instead of `bash` or `csh` for that account's login shell.
ولفعل هذا، عليك أولا إضافة المسار الكامل لأمر `git-shell` إلى مِلف `/etc/shells` إذا لم يكن موجودا فيه بالفعل:
// To do so, you must first add the full pathname of the `git-shell` command to `/etc/shells` if it's not already there:

[source,console]
----
$ cat /etc/shells      # انظر إن كانت صدفة جيت هنا، وإلا…‏
$ which git-shell      # فتحقق أن صدفة جيت مثبتة على نظامك
$ sudo -e /etc/shells  # ثم أضف مسارها من الأمر السابق إلى ملف الصدفات
----

// [source,console]
// ----
// $ cat /etc/shells   # see if git-shell is already in there. If not...
// $ which git-shell   # make sure git-shell is installed on your system.
// $ sudo -e /etc/shells  # and add the path to git-shell from last command
// ----

يمكنك الآن تغيير صدفة المستخدم بالأمر `chsh <username> -s <shell>`:
// Now you can edit the shell for a user using `chsh <username> -s <shell>`:

[source,console]
----
$ sudo chsh git -s $(which git-shell)
----

عندئذٍ يستطيع المستخدم `git` استعمال SSH للدفع والجذب من مستودعات جت، بغير أن يكون له وصولًا صدفيًّا إلى خادومك.
// Now, the `git` user can still use the SSH connection to push and pull Git repositories but can't shell onto the machine.
وإن حاول، فسيرى رسالة رفض ولوج مثل هذه:
// If you try, you'll see a login rejection like this:

[source,console]
----
$ ssh git@gitserver
fatal: Interactive git shell is not enabled.
hint: ~/git-shell-commands should exist and have read and execute access.
Connection to gitserver closed.
----

ولكن حتى الآن لدى المستخدمين القدرة على توجيه منفذ SSH (أي "`port forwarding`") للوصول إلى أي خادوم آخر يستطيع ذلك الخادوم الاتصال به.
// At this point, users are still able to use SSH port forwarding to access any host the git server is able to reach.
فإذا أردت منع هذا، فأضف الخيارات التالية في أول كل مفتاح تريد تقييده في ملف المفاتيح المستوثقة (`authorized_keys`):
// If you want to prevent that, you can edit the `authorized_keys` file and prepend the following options to each key you'd like to restrict:

[source,console]
----
no-port-forwarding,no-X11-forwarding,no-agent-forwarding,no-pty
----

ستبدو نتيجة التعديل مثل هذا:
// The result should look like this:

[source,console]
----
$ cat ~/.ssh/authorized_keys
no-port-forwarding,no-X11-forwarding,no-agent-forwarding,no-pty ssh-rsa
AAAAB3NzaC1yc2EAAAADAQABAAABAQCB007n/ww+ouN4gSLKssMxXnBOvf9LGt4LojG6rs6h
PB09j9R/T17/x4lhJA0F3FR1rP6kYBRsWj2aThGw6HXLm9/5zytK6Ztg3RPKK+4kYjh6541N
YsnEAZuXz0jTTyAUfrtU3Z5E003C4oxOj6H0rfIF1kKI9MAQLMdpGW1GYEIgS9EzSdfd8AcC
IicTDWbqLAcU4UpkaX8KyGlLwsNuuGztobF8m72ALC/nLF6JLtPofwFBlgc+myivO7TCUSBd
LQlgMVOFq1I2uPWQOkOWQAHukEOmfjy2jctxSDBQ220ymjaNsHT4kgtZg2AYYgPqdAv8JggJ
ICUvax2T9va5 gsg-keypair

no-port-forwarding,no-X11-forwarding,no-agent-forwarding,no-pty ssh-rsa
AAAAB3NzaC1yc2EAAAADAQABAAABAQDEwENNMomTboYI+LJieaAY16qiXiH3wuvENhBG...
----

عندئذٍ ستظل تعمل أوامر جت الشبكية، ولكن المستخدمين لن يعودوا قادرين على الوصول إلى صدفة.
// Now Git network commands will still work just fine but the users won't be able to get a shell.
وكما ترى في رسالة الرفض، يمكنك أيضا إعداد مجلد في مجلد منزل المستخدم `git` لتخصيص أمر `git-shell` قليلا.
// As the output states, you can also set up a directory in the `git` user's home directory that customizes the `git-shell` command a bit.
فيمكنك مثلا تقييد أوامر جت التي يقبلها الخادوم، أو تخصيص الرسالة التي يراها المستخدمين عندما يحاولون الوصول عبر SSH.
// For instance, you can restrict the Git commands that the server will accept or you can customize the message that users see if they try to SSH in like that.
نفّذ الأمر `git help shell` للحصول على معلومات مزيدة عن تخصيص الصدفة.(((git commands, help)))
// Run `git help shell` for more information on customizing the shell.(((git commands, help)))
