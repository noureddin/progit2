=== ✨ الموافيق (البروتوكولات)
// === The Protocols

يستخدم جت أربعة موافيق مختلفة لنقل البيانات: المحلي، و HTTP، و SSH (أي Secure Shell)، و Git.
// Git can use four distinct protocols to transfer data: Local, HTTP, Secure Shell (SSH) and Git.
سنناقش ما هم وما الظروف التي فيها ستود (أو لا تود) استخدمهم.
// Here we'll discuss what they are and in what basic circumstances you would want (or not want) to use them.

==== الميفاق المحلي
// ==== Local Protocol

(((protocols, local)))
الأكثر بدائية هو _الميفاق المحلي_ __("`Local protocol`")__، والذي يكون المستودع البعيد فيه هو مجلد آخر على نفس الحاسوب.
// The most basic is the _Local protocol_, in which the remote repository is in another directory on the same host.
ويستخدم غالبا إن كان كل شخص في فريقك لديه وصول إلى نظام ملفات مشترك مثل https://en.wikipedia.org/wiki/Network_File_System[NFS^] مضموم (mounted)، أو في الحالة الأندر أن يكون كل شخص مستخدما لنفس الحاسوب.
// This is often used if everyone on your team has access to a shared filesystem such as an https://en.wikipedia.org/wiki/Network_File_System[NFS^] mount, or in the less likely case that everyone logs in to the same computer.
ولكن تلك الأخيرة ليست حالة مثلى لأن وقتئذ ستبيت كل مصادرك البرمجية على الجهاز نفسه، مما يزيد من احتمال فقد البيانات فقدا كارثيا.
// The latter wouldn't be ideal, because all your code repository instances would reside on the same computer, making a catastrophic loss much more likely.

إذا كان لديك نظام ملفات مشترك مضموم، فيمكنك إذًا استنساخ مستودع محلي مكوَّن من ملفات عادية، والدفع إليه، والجذب منه.
// If you have a shared mounted filesystem, then you can clone, push to, and pull from a local file-based repository.
فلاستنساخ مستودع مثل هذا، أو لإضافة واحد كبعيد إلى مشروع موجود بالفعل، فاستخدم مسار المستودع كأنه رابط URL.
// To clone a repository like this, or to add one as a remote to an existing project, use the path to the repository as the URL.
مثلا، لاستنساخ مستودع محلي، يمكنك فعل شيء مثل هذا:
// For example, to clone a local repository, you can run something like this:

[source,console]
----
$ git clone /srv/git/project.git
----

أو مثل هذا:
// Or you can do this:

[source,console]
----
$ git clone file:///srv/git/project.git
----

ولكن تصرف جت يختلف قليلا إذا بدأت العنوان بالميفاق `file://` صريحا.
// Git operates slightly differently if you explicitly specify `file://` at the beginning of the URL.
فإذا كتبت المسار فقط، فإن جت يحاول صنع روابط صلبة (hardlinks) أو نسخ الملفات التي يحتاجها مباشرةً.
// If you just specify the path, Git tries to use hardlinks or directly copy the files it needs.
أما إذا كتبت `file://`، فإن جت ينفّذ العمليات التي يستعملها في المعتاد لنقل الملفات عبر الشبكة، ويكون هذا في الغالب أقل كثيرا في الكفاءة.
// If you specify `file://`, Git fires up the processes that it normally uses to transfer data over a network, which is generally much less efficient.
السبب الرئيس لك‍تابة البادئة `file://` هي إذا كنت تريد نسخة نظيفة من المستودع بغير الإشارات أو الكائنات الإضافية -- وغالبا ما يكون ذلك بعد الاستيراد من نظام إدارة نسخ آخر أو أمر شبيه (انظر <<ch10-git-internals#ch10-git-internals>> لعمليات الصيانة).
// The main reason to specify the `file://` prefix is if you want a clean copy of the repository with extraneous references or objects left out -- generally after an import from another VCS or something similar (see <<ch10-git-internals#ch10-git-internals>> for maintenance tasks).
سنستخدم المسار العادي هنا لأنه أسرع في أغلب الأحيان.
// We'll use the normal path here because doing so is almost always faster.

لإضافة مستودع محلي إلى مشروع جت موجود، نفّذ أمرا مثل هذا:
// To add a local repository to an existing Git project, you can run something like this:

[source,console]
----
$ git remote add local_proj /srv/git/project.git
----

عندئذٍ يمكنك الدفع إلى ذلك البعيد والجذب منه بالاسم المختصر الجديد `local_proj` كما كنت تفعل تماما عبر الشبكة.
// Then, you can push to and pull from that remote via your new remote name `local_proj` as though you were doing so over a network.

===== المزايا
// ===== The Pros

مزايا المستودعات «الملفاتية» هي أنها يسيرة وتستخدم تصاريح الملفات الموجودة بالفعل واتصال الشبكة.
// The pros of file-based repositories are that they're simple and they use existing file permissions and network access.
وإذا كان لديك نظام ملفات مشترك يصل إليه جميع فريقك، فإعداد مستودع عملية سهلة جدا:
// If you already have a shared filesystem to which your whole team has access, setting up a repository is very easy.
تضع نسخة المستودع المجرد في مكانِ يستطيع الجميع الوصول إليه، وتضبط أذونات القراءة والك‍تابة كما تفعل لأي مجلد مشترك آخر.
// You stick the bare repository copy somewhere everyone has shared access to and set the read/write permissions as you would for any other shared directory.
سنناقش كيفية تصدير نسخة مستودع مجردة لهذا الهدف في <<ch04-git-on-the-server#_getting_git_on_a_server>>.
// We'll discuss how to export a bare repository copy for this purpose in <<ch04-git-on-the-server#_getting_git_on_a_server>>.

هذا أيضا خيار ظريف وسريع لجلب عمل شخص آخر من مستودعه.
// This is also a nice option for quickly grabbing work from someone else's working repository.
فإن كنت وزميلك تعملان على مشروع واحد ويريدك أن تسحب شيئا ما، فتنفيذ أمر مثل `git pull /home/john/project` أسهل كثيرا في الغالب من أن يدفع عمله إلى خادوم بعيد ثم تستحضره أنت بعد ذلك.
// If you and a co-worker are working on the same project and they want you to check something out, running a command like `git pull /home/john/project` is often easier than them pushing to a remote server and you subsequently fetching from it.

===== العيوب
// ===== The Cons

عيوب هذه الطريقة هي أن الوصول المشترك غالبا ما يكون أصعب كثيرا من مجرد الوصول الشبكي، في إعداده وفي الوصول إليه من أماكن مختلفة.
// The cons of this method are that shared access is generally more difficult to set up and reach from multiple locations than basic network access.
فإذا أردت أن تدفع من حاسوبك المحمول عندما تكون في المنزل، فستحتاج إلى ضم القرص البعيد، والذي قد يكون صعبا وبطيئا بالمقارنة بوصول عبر الشبكة.
// If you want to push from your laptop when you're at home, you have to mount the remote disk, which can be difficult and slow compared to network-based access.

من المهم ذكر أن هذا ليس بالضرورة الخيار الأسرع إذا كنت تستخدم بالفعل نوعا من الضم (mount) المشترك.
// It's important to mention that this isn't necessarily the fastest option if you're using a shared mount of some kind.
فالمستودع المحلي لا يكون سريعا إلا إذا كان لديك وصول سريع إلى البيانات.
// A local repository is fast only if you have fast access to the data.
ولكن مستودع على NFS يكون في الغالب أبطأ من مستودع على SSH على الخادوم نفسه، بفرض أن جت يعمل من الأقراص المحلية في كل نظام.
// A repository on NFS is often slower than the repository over SSH on the same server, allowing Git to run off local disks on each system.

وأخيرا، لا يحمي هذا الميفاق المستودعَ من الإتلاف غير المقصود.
// Finally, this protocol does not protect the repository against accidental damage.
فكل مستخدم لديه وصول صَدفي كامل للمجلد «البعيد»، فلا شيء يمنعه من تعديل ملفات جت الداخلية أو إزالتها وتخريب المستودع.
// Every user has full shell access to the "`remote`" directory, and there is nothing preventing them from changing or removing internal Git files and corrupting the repository.

==== ميفاقا HTTP
// ==== The HTTP Protocols

يستطيع جت التواصل عبر HTTP باستخدام وضعين مختلفين.
// Git can communicate over HTTP using two different modes.
قبل نسخة 1.6.6 من جت، لم تكن إلا طريقة واحدة لاستخدامه، وكانت ساذجة جدا وعموما للقراءة فقط.
// Prior to Git 1.6.6, there was only one way it could do this which was very simple and generally read-only.
ولكن في نسخة 1.6.6، جاء ميفاق جديد ذكي جعل جت يستطيع التفاوض بذكاء بشأن نقل البيانات، بطريقة أشبه بالتي كان يفعلها عبر SSH.
// In version 1.6.6, a new, smarter protocol was introduced that involved Git being able to intelligently negotiate data transfer in a manner similar to how it does over SSH.
وصار ميفاق HTTP الجديد هذا في الأعوام الأخيرة أشهر كثيرا لأنه أيسر للمستخدم وأذكي في طريقة تواصله.
// In the last few years, this new HTTP protocol has become very popular since it's simpler for the user and smarter about how it communicates.
فانتشرت تسمية النسخة الجديدة «ميفاق HTTP __الذكي__»، والقديمة «ميفاق HTTP __البليد__».
// The newer version is often referred to as the _Smart_ HTTP protocol and the older way as _Dumb_ HTTP.
وسنتناول الميثاق الذكي أولا.
// We'll cover the newer Smart HTTP protocol first.

===== ميفاق HTTP الذكي
// ===== Smart HTTP

(((protocols, smart HTTP)))
يعمل الميفاق الذكي بطريقة شبيهة كثيرا بميفاقَي SSH أو Git، ولكنه يعمل عبر منافذ HTTPS (الآمن) المعيارية ويستخدم آليات استيثاق HTTP المتنوعة، مما يعني أنه غالبا أسهل على المستخدم من شيء مثل SSH، لأنك مثلا تستطيع استعمال اسم المستخدم وكلمة المرور بدلا من الاضطرار إلى إعداد مفاتيح SSH.
// Smart HTTP operates very similarly to the SSH or Git protocols but runs over standard HTTPS ports and can use various HTTP authentication mechanisms, meaning it's often easier on the user than something like SSH, since you can use things like username/password authentication rather than having to set up SSH keys.

لعله أشهر طريقة لاستخدام جت اليوم، لأن من الممكن إعداده ليتيح المستودع بغير هُوية مثل ميفاق ُGit، وكذلك ليتيح الدفع إليه بهُوية وتعمية مثل ميفاق SSH.
// It has probably become the most popular way to use Git now, since it can be set up to both serve anonymously like the `git://` protocol, and can also be pushed over with authentication and encryption like the SSH protocol.
فبدلا من الاضطرار إلى إعداد روابط URL مختلفة لهذين الشيئين، يمكنك الآن استخدام رابط واحد لكليهما.
// Instead of having to set up different URLs for these things, you can now use a single URL for both.
وإذا حاولت الدفع فطلبَ المستودعُ الاستيثاقَ منك (والذي يجب أن يحدث في المعتاد)، فسيستطيع الخادوم أن يسألك عن اسم المستخدم وكلمة المرور.
// If you try to push and the repository requires authentication (which it normally should), the server can prompt for a username and password.
والأمر نفسه للقراءة وحدها.
// The same goes for read access.

وفي الحقيقة، في خدمات مثل جت‌هب، الرابط الذي تستخدمه لتصفح المستودع عبر المتصفح (مثلا https://github.com/schacon/simplegit[^]) يمكنك استخدامه هو نفسه للاستنساخ، وكذلك للدفع إذا كان لديك الإذن.
// In fact, for services like GitHub, the URL you use to view the repository online (for example, https://github.com/schacon/simplegit[^]) is the same URL you can use to clone and, if you have access, push over.

===== ميفاق HTTP البليد
// ===== Dumb HTTP

(((protocols, dumb HTTP)))
إن لم يستجب الخادوم لطلب ميفاق HTTP الذكي من جت، فسيحاول عميل جت استخدام ميفاق HTTP _البليد_ الأبسط.
// If the server does not respond with a Git HTTP smart service, the Git client will try to fall back to the simpler _Dumb_ HTTP protocol.
يتوقع الميفاق البليد أن يقدَّم له مستودع جت المجرد كما تقدَّم الملفات العادية من خادوم الوب.
// The Dumb protocol expects the bare Git repository to be served like normal files from the web server.
فجمال الميفاق البليد هو سهولة إعداده.
// The beauty of Dumb HTTP is the simplicity of setting it up.
فليس عليك إلا وضع مستودع جت مجرد في مكانٍ ما تحت جذر مستندات HTTP، وإعداد خطاف `post-update`، وتكون قد انتهيت (انظر <<ch08-customizing-git#_git_hooks>>).
// Basically, all you have to do is put a bare Git repository under your HTTP document root and set up a specific `post-update` hook, and you're done (see <<ch08-customizing-git#_git_hooks>>).
عندئذٍ يمكن لأي شخص يستطيع الوصول إلى خادوم الوب الذي وضعت عليه المستودع أن يستنسخه.
// At that point, anyone who can access the web server under which you put the repository can also clone your repository.
فللسماح بالاطلاع على مستودعك عبر HTTP، افعل شيئا مثل هذا:
// To allow read access to your repository over HTTP, do something like this:

[source,console]
----
$ cd /var/www/htdocs/
$ git clone --bare /path/to/git_project gitproject.git
$ cd gitproject.git
$ mv hooks/post-update.sample hooks/post-update
$ chmod a+x hooks/post-update
----

هذا كل ما في الأمر.(((hooks, post-update)))
// That's all.(((hooks, post-update)))
وخطاف `post-update` الذي يأتي مبدئيا مع جت ينفذ الأمر المناسب (`git update-server-info`) لجعل الاستحضار والاستنساخ عبر HTTP يعمل بشكل صحيح.
// The `post-update` hook that comes with Git by default runs the appropriate command (`git update-server-info`) to make HTTP fetching and cloning work properly.
ويعمل هذا الأمر عندما تدفع إلى المستودع (عبر SSH مثلا). عندئذٍ يستطيع الآخرون الاستنساخ بمثل هذا الأمر:
// This command is run when you push to this repository (over SSH perhaps); then, other people can clone via something like:

[source,console]
----
$ git clone https://example.com/gitproject.git
----

نستخدم في حالتنا هذه مسار `/var/www/htdocs` وهو الشائع عند استخدام خواديم Apache، ولكن يمكنك استخدام أي خادوم وب سكونيّ (استاتيكي)؛ ليس عليك سوى وضع المستودع المجرد في مساره،
// In this particular case, we're using the `/var/www/htdocs` path that is common for Apache setups, but you can use any static web server -- just put the bare repository in its path.
فبيانات جت تقدَّم لطالبها مثل أي ملفات ساكنة (استاتيكية) عادية (انظر باب <<ch10-git-internals#ch10-git-internals>> للتفاصيل عن كيف تُقدَّم بالظبط).
// The Git data is served as basic static files (see the <<ch10-git-internals#ch10-git-internals>> chapter for details about exactly how it's served).

وفي العموم ستختار إما تشغيل خادوم HTTP ذكي للقراءة والتحرير، وإما جعل الملفات متاحة للقراءة فقط بالطريقة البليدة.
// Generally you would either choose to run a read/write Smart HTTP server or simply have the files accessible as read-only in the Dumb manner.
فمن النادر تشغيل نوعَي الخدمتين معا.
// It's rare to run a mix of the two services.

===== المزايا
// ===== The Pros

سنركز على مزايا النسخة الذكية من ميفاق HTTP.
// We'll concentrate on the pros of the Smart version of the HTTP protocol.

تسهّل الأمور كثيرا على المستخدم النهائي بساطة الرابط الواحد لجميع أنواع الوصول، وكذلك عدم الاستثياق إلا عند الحاجة.
// The simplicity of having a single URL for all types of access and having the server prompt only when authentication is needed makes things very easy for the end user.
وإمكانية الاستيثاق باسم مستخدم وكلمة مرور لهي أيضا مزية كبيرة فيه على SSH، لعدم حاجة المستخدمين أن يوّلدوا مفاتيح SSH محليًّا ثم يرفعوا مفاتيحهم العامة إلى الخادوم قبل السماح بالتواصل معه.
// Being able to authenticate with a username and password is also a big advantage over SSH, since users don't have to generate SSH keys locally and upload their public key to the server before being able to interact with it.
وللمستخدمين الأقل حنكة، وللمستخدمين على أنظمة عليها SSH غير موجود أو غير شائع، فهذه مزية عظيمة في قابلية الاستخدام.
// For less sophisticated users, or users on systems where SSH is less common, this is a major advantage in usability.
وهو أيضا كفؤ وسريع جدا، مثل SSH.
// It is also a very fast and efficient protocol, similar to the SSH one.

ويمكنك كذلك تقديم مستودعات للقراءة فقط عبر HTTPS، مما يعني أن بإمكانك تعمية المحتوى خلال نقله، أو حتى جعل العملاء يستخدمون شهادات SSL موقّعة مخصوصة.
// You can also serve your repositories read-only over HTTPS, which means you can encrypt the content transfer; or you can go so far as to make the clients use specific signed SSL certificates.

شيء جميل آخر هو أن HTTP و HTTPS مستعملان بكثرة حتى إن الجدران النارية (firewalls) الخاصة بالمؤسسات تُضبط في الغالب لتتيح مرورهما عبر منافذها.
// Another nice thing is that HTTP and HTTPS are such commonly used protocols that corporate firewalls are often set up to allow traffic through their ports.

===== العيوب
// ===== The Cons

قد يكون إعداد جت عبر HTTPS أصعب قليلا من SSH على بعض الخواديم.
// Git over HTTPS can be a little more tricky to set up compared to SSH on some servers.
ولكن غير ذلك، فلا تكاد توجد مزية لأحد الموافيق الأخرى على HTTP الذكي في تقديم محتوى جت.
// Other than that, there is very little advantage that other protocols have over Smart HTTP for serving Git content.

فإذا كنت تستخدم HTTP للدفع المستوثَق، فإعطاء اسم المستخدم وكلمة المرور قد يكون في بعض الأحيان أعقد قليلا من استخدام المفاتيح عبر SSH.
// If you're using HTTP for authenticated pushing, providing your credentials is sometimes more complicated than using keys over SSH.
ولكن توجد عدة أدوات للاحتفاظ بهما والتي يمكنك استخدمها لجعل العملية أخف كثيرا، مثل Keychain Acess على نظام {ماك} و Credential Manager على نظام ويندوز.
// There are, however, several credential caching tools you can use, including Keychain access on macOS and Credential Manager on Windows, to make this pretty painless.
اقرأ <<ch07-git-tools#_credential_caching>> لترى كيف تضبط نظامك للاحتفاظ بكلمة مرور HTTP آمن على نظامك.
// Read <<ch07-git-tools#_credential_caching>> to see how to set up secure HTTP password caching on your system.

==== ميفاق SSH
// ==== The SSH Protocol

(((protocols, SSH)))
النقل عبر SSH هو الميفاق الشائع عند استضافة جت ذاتيا. FIXME
// A common transport protocol for Git when self-hosting is over SSH.
هذا لأن معظم الخواديم مُعدَّة بالفعل لقَبول الوصول عبر SSH، وإن لم تكن معدة فإعدادها سهل.
// This is because SSH access to servers is already set up in most places -- and if it isn't, it's easy to do.
أيضا SSH هو ميفاق شبكي استيثاقي، ويوجد في كل مكان، وسهل عموما في الإعداد والاستخدام.
// SSH is also an authenticated network protocol and, because it's ubiquitous, it's generally easy to set up and use.

لاستنساخ مستودع جت عبر SSH، استخدم رابط `ssh://` مثل:
// To clone a Git repository over SSH, you can specify an `ssh://` URL like this:

[source,console]
----
$ git clone ssh://[user@]server/project.git
----

أو استخدم الصيغة المختصرة شبيهة `scp` لميفاق SSH:
// Or you can use the shorter scp-like syntax for the SSH protocol:

[source,console]
----
$ git clone [user@]server:project.git
----

وفي الحالتين بالأعلى، إذا لم تحدد اسم المستخدم الاختياري، فسيفترض جت بأنه مطابق لاسم مستخدم النظام الحالي على حاسوبك.
// In both cases above, if you don't specify the optional username, Git assumes the user you're currently logged in as.

===== المزايا
// ===== The Pros

مزايا استخدام SSH عديدة.
// The pros of using SSH are many.
أولا، SSH سهل الإعداد نسبيا -- فعفاريت SSH (أيْ daemons) منتشرة، وأكثر مديري الشبكات لديهم خبرة فيها، وأكثر أنظمة التشغيل تأتي بها معدَّة أو بأدوات لإدراتها.
// First, SSH is relatively easy to set up -- SSH daemons are commonplace, many network admins have experience with them, and many OS distributions are set up with them or have tools to manage them.
ثانيا، التواصل عبر SSH آمن -- فكل البيانات تُنقل بعد التعمية والاستيثاق.
// Next, access over SSH is secure -- all data transfer is encrypted and authenticated.
وأخيرا، مثل موافيق HTTPS و Git والمحلي، فإن SSH كفؤ، مما يجعل البيانات ذات أقل حجم ممكن قبل نقلها.
// Last, like the HTTPS, Git and Local protocols, SSH is efficient, making the data as compact as possible before transferring it.

===== العيوب
// ===== The Cons

نقيصة SSH أنه لا يدعم وصول المجهولين إلى مستودعك.
// The negative aspect of SSH is that it doesn't support anonymous access to your Git repository.
فإذا كنت تستخدم SSH، _فيجب_ على الناس الحصول على وصول SSH لجهازك، حتى لرؤيتها فحسب، وهذا لا يجعل SSH مشجعا للمشروعات المفتوحة، والتي يود الناس فقط أن يستنسخوها للاطلاع عليها.
// If you're using SSH, people _must_ have SSH access to your machine, even in a read-only capacity, which doesn't make SSH conducive to open source projects for which people might simply want to clone your repository to examine it.
وإذا كنت تستخدمه فقط داخل شبكة مؤسستك، فقد يكون SSH هو الميفاق الوحيد الذي تحتاج إلى التعامل معه.
// If you're using it only within your corporate network, SSH may be the only protocol you need to deal with.
وإذا وددت أن تأذن للمجهولين بالاطلاع فقط على مشروعاتك ولكن تريد SSH أيضا، فعليك إعداد SSH للدفع ثم إعداد ميفاق آخر للآخرين حتى يستحضروا منه.
// If you want to allow anonymous read-only access to your projects and also want to use SSH, you'll have to set up SSH for you to push over but something else for others to fetch from.

==== ميفاق Git
// ==== The Git Protocol

(((protocols, git)))
أخيرا، لدينا ميفاق Git.
// Finally, we have the Git protocol.
هذا عفريت (daemon) مخصوص يأتي محزّما مع جت، ويستمع على منفذ مخصص (9418) ليتيح خدمة شبيهة بميفاق SSH، لكن بلا أي استيثاق أو تعمية.
// This is a special daemon that comes packaged with Git; it listens on a dedicated port (9418) that provides a service similar to the SSH protocol, but with absolutely no authentication or cryptography.
حتى تجعل جت يقدّم مستودعا عبر ميفاق Git، عليك إنشاء ملف يسمى `git-daemon-export-ok` -- فالعفريت لن يقدّم مستودعا ليس فيه هذا الملف -- ولكن غير ذلك لا يوجد أمان.
// In order for a repository to be served over the Git protocol, you must create a `git-daemon-export-ok` file -- the daemon won't serve a repository without that file in it -- but, other than that, there is no security.
إما أن يكون المستودع متاحا للجميع لاستنساخه، وإما لا يكون.
// Either the Git repository is available for everyone to clone, or it isn't.
هذا يعني أنه عموما لا يمكن الدفع عبر هذا الميفاق.
// This means that there is generally no pushing over this protocol.
يمكنك تفعيل إذن الدفع، ولكن لانعدام الاستيثاق، فأي شخص على الإنترنت يجد رابط مشروعك يستطيع الدفع إليه.
// You can enable push access but, given the lack of authentication, anyone on the internet who finds your project's URL could push to that project.
يكفي أن نقول أن هذا نادر.
// Suffice it to say that this is rare.

===== المزايا
// ===== The Pros

ميفاق Git غالبا ما يكون أسرع ميفاق نقل شبكي متاح.
// The Git protocol is often the fastest network transfer protocol available.
فإن كنت تخدم كمًّا كبيرًا من النقل الشبكي لمشروع عمومي، أو تقدّم مشروعًا كبيرًا لا يحتاج استيثاق المستخدمين للاطلاع عليه، فغالبا ستودّ إعداد عفريت جت ليقدّمه.
// If you're serving a lot of traffic for a public project or serving a very large project that doesn't require user authentication for read access, it's likely that you'll want to set up a Git daemon to serve your project.
فهو يستخدم نفس آلية نقل البيانات التي يستخدمها ميفاق SSH، لكن بغير عبء التعمية والاستيثاق.
// It uses the same data-transfer mechanism as the SSH protocol but without the encryption and authentication overhead.

===== العيوب
// ===== The Cons

بسبب عدم وجود TLS أو أي نوع من التعمية، فإن الاستنساخ عبر `git://` قد يسبب ثغرة تنفيذ تعليمات برمجية عشوائية "`arbitrary code execution`"، لذا يببغي تجنبه إلا إن كنت تعي جيدا ماذا تفعل.
// Due to the lack of TLS or other cryptography, cloning over `git://` might lead to an arbitrary code execution vulnerability, and should therefore be avoided unless you know what you are doing.

* عندما تنفذ `git clone git://example.com/project.git`، فإن مخترقا يتحكم في جهاز التوجيه (router) الخاص بك سيستطيع تعديل المستودع الذي استنسخه للتو، مثلا يضيف تعليمات برمجية خبيثة فيه.
// * If you run `git clone git://example.com/project.git`, an attacker who controls e.g your router can modify the repo you just cloned, inserting malicious code into it.
  وعندما تصرّف (compile) أو تشغل ما في هذا المستودع الذي استنسخته للتو، فستنفذ تلك التعليمات البرمجية الخبيثة.
//   If you then compile/run the code you just cloned, you will execute the malicious code.
   ابتعد عن تنفيذ `git clone http://example.com/project.git` للسبب نفسه (أي ميفاق HTTP غير الآمن).
//   Running `git clone http://example.com/project.git` should be avoided for the same reason.
* تنفيذ `git clone https://example.com/project.git` لا يعاني من المشكلة نفسها (إلا إن استطاع المخترق أن يحضر شهادة TLS للنطاق الذي تتصل به، `example.com` في هذا المثال).
// * Running `git clone https://example.com/project.git` does not suffer from the same problem (unless the attacker can provide a TLS certificate for example.com).
  تنفيذ `git clone git@example.com:project.git` لا يعاني من هذه المشكلة إلا إن كنت قبلت بصمة مفتاح SSH خاطئة.
//   Running `git clone git@example.com:project.git` only suffers from this problem if you accept a wrong SSH key fingerprint.

وكذلك لا يدعم الاستيثاق، مما يعني أن أي أحد يستطيع استنساخ المستودع (ولكن غالبا هذا ما تريده بالتحديد).
// It also has no authentication, i.e. anyone can clone the repo (although this is often exactly what you want).
وربما أيضا هو من أصعب الموافيق في الإعداد.
// It's also probably the most difficult protocol to set up.
فيجب أن يشغّل عفريته الخاص، والذي يحتاج تهيئة `xinetd` أو `systemd` أو ما يشبههما. وهذا ليس يسيرا دائما.
// It must run its own daemon, which requires `xinetd` or `systemd` configuration or the like, which isn't always a walk in the park.
ويحتاج أيضا وصولا خلال الجدار الناري إلى منفذ 9418، وهو ليس منفذا معياريا تسمح به دائما الجدران النارية الخاصة بالمؤسسات.
// It also requires firewall access to port 9418, which isn't a standard port that corporate firewalls always allow.
فخلف تلك الجدران الكبيرة، هذا المنفذ الغامض غالبا ما يُحظر.
// Behind big corporate firewalls, this obscure port is commonly blocked.
