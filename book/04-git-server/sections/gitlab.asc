=== ✨ GitLab

(((serving repositories, GitLab)))(((GitLab)))
لعلك وجدت أن جت‌وب GitWeb ساذجا قليلا أو كثيرا.
// GitWeb is pretty simplistic though.
فإذا كنت تبحث عن خادوم جت حديث ومكتمل الخصائص، فيوجد عدد من الحلول مفتوحة المصدر والتي يمكنك تثبيتها بدلا منه.
// If you're looking for a modern, fully featured Git server, there are several open source solutions out there that you can install instead.
ولأن جت‌لاب من أشهرها، فإننا سنتناول تثبيته واستخدامه مثالا.
// As GitLab is one of the popular ones, we'll cover installing and using it as an example.
هذا الخيار أصعب من جت‌وب وسيحتاج منك رعاية أكثر، لكنه مكتمل الخصائص.
// This is harder than the GitWeb option and will require more maintenance, but it is a fully featured option.

==== التثبيت
// ==== Installation

جت‌لاب هو تطبيق وب مبني على قاعدة بيانات، لذا فتثبيته أعقد من بعض خواديم جت الأخرى.
// GitLab is a database-backed web application, so its installation is more involved than some other Git servers.
لكن لحسن الحظ هذه العملية موثقة بالكامل ومدعومة جيدا.
// Fortunately, this process is well-documented and supported.
يوصي جت‌لاب بقوة بتثبيته على خادومك عبر الحزمة الرسمية الحافلة، المسماة حزمة "`Omnibus GitLab`".
// GitLab strongly recommends installing GitLab on your server via the official Omnibus GitLab package.

خيارات التثبيت الأخرى هي:
// The other installation options are:

[tight]
* GitLab Helm chart، لاستخدامه مع Kubernetes.
// * GitLab Helm chart, for use with Kubernetes.
* حزم Docker لـ GitLab، لاستخدامها مع Docker.
// * Dockerized GitLab packages for use with Docker.
* من مِلفات المصدر.
// * From the source files.
* موفِّرو الخدمات السحابية، مثل AWS و Google Cloud Platform و Azure و OpenShift و Digital Ocean.
// * Cloud providers such as AWS, Google Cloud Platform, Azure, OpenShift and Digital Ocean.

للمزيد من المعلومات (بالإنجليزية) انظر https://gitlab.com/gitlab-org/gitlab-foss/-/blob/master/README.md[GitLab Community Edition (CE) readme^].
// For more information read the https://gitlab.com/gitlab-org/gitlab-foss/-/blob/master/README.md[GitLab Community Edition (CE) readme^].

==== الإدارة
// ==== Administration

واجهة إدارة جت‌لاب هي واجهة وب.
// GitLab's administration interface is accessed over the web.
ليس عليك إلا توجيه متصفحك إلى اسم المُضيف ("`hostname`") أو عنوان IP الذي ثبتَّ عليه جت‌لاب، ثم لُج بحساب المدير.
// Simply point your browser to the hostname or IP address where GitLab is installed, and log in as the admin user.
اسم المستخدم المبدئي هو `admin@local.host`، وكلمة المرور المبدئية هي `5iveL!fe` (والتي عليك تغييرها فورا).
// The default username is `admin@local.host`, and the default password is `5iveL!fe` (which you must change right away).
بعد الولوج، اضغط على رمز "`Admin area`" (منطقة الإدارة) في القائمة التي على اليمين بالأعلى.
// After you've logged in, click the "`Admin area`" icon in the menu at the top right.

[[gitlab_menu]]
.زر "`Admin area`" (منطقة الإدارة) في قائمة جت‌لاب
// .The "`Admin area`" item in the GitLab menu
image::images/gitlab-menu.png[زر “Admin area” (منطقة الإدارة) في قائمة جت‌لاب]

===== المستخدمون
// ===== Users

على كل من يريد استخدام خادوم جت‌لاب الخاص بك الحصول على حساب مستخدم.
// Everybody using your GitLab server must have a user account.
حسابات المستخدمين أمر يسير؛ هي في الأساس معلومات شخصية مرتبطة ببيانات الولوج. FIXME
// User accounts are quite simple, they mainly contain personal information attached to login data.
كل حساب مستخدم لديه *مساحة أسماء* ("`namespace`")، وهي تجميع منطقي للمشروعات الخاصة به.
// Each user account has a *namespace*, which is a logical grouping of projects that belong to that user.
فمثلا إذا كان لدى المستخدم `shams` مشروع اسمه `project`، فإن رابط ذلك المشروع سيكون `+http://server/shams/project+`.
// If the user +jane+ had a project named +project+, that project's URL would be `http://server/jane/project`.

[[gitlab_users]]
.شاشة إدارة المستخدمين على جت‌لاب
// .The GitLab user administration screen
image::images/gitlab-users.png[شاشة إدارة المستخدمين على جت‌لاب]
// image::images/gitlab-users.png[The GitLab user administration screen]

يمكنك إزالة حساب مستخدم بطريقتين:
// You can remove a user account in two ways:
«حظر» ("`block`") حساب مستخدم يمنعه من الولوج إلى خادومك، ولكن كل بياناته التي في مساحة أسمائه ستبقى، والإيداعات الموقَّعة ببريده ستظل تشير إلى صفحته الشخصية على خادومك.
// "`Blocking`" a user prevents them from logging into the GitLab instance, but all of the data under that user's namespace will be preserved, and commits signed with that user's email address will still link back to their profile.

أما «محو» ("`destroy`") مستخدمٍ فيزيله تماما من قاعدة البيانات ومن نظام الملفات؛
// "`Destroying`" a user, on the other hand, completely removes them from the database and filesystem.
ستُزال كل المشروعات والبيانات التي في مساحة أسمائه، وكذلك كل المجموعات التي يملكها.
// All projects and data in their namespace is removed, and any groups they own will also be removed.
طبعا هذا الفعل مستديم الأثر وأشد إتلافا، ونادرا ما ستحتاجه.
// This is obviously a much more permanent and destructive action, and you will rarely need it.

[[_gitlab_groups_section]]
===== المجموعات
// ===== Groups

المجموعة في جت‌لاب هي تجميعة من المشروعات، مع معلومات عن كيفية وصول المستخدمين إلى هذه المشروعات.
// A GitLab group is a collection of projects, along with data about how users can access those projects.
كل مجموعة لديها «مساحة أسماء مشروعات»، تماما مثلما للمستخدمين، لذا فإن كان في المجموعة `training` مشروع اسمه `materials`، فسيكون رابطه `+http://server/training/materials+`.
// Each group has a project namespace (the same way that users do), so if the group +training+ has a project +materials+, its URL would be `http://server/training/materials`.

[[gitlab_groups]]
.شاشة إدارة المجموعات على جت‌لاب
// .The GitLab group administration screen
image::images/gitlab-groups.png[شاشة إدارة المجموعات على جت‌لاب]
// image::images/gitlab-groups.png[The GitLab group administration screen]

ترتبط كل مجموعة بعدد من المستخدمين، ولكل منهم مستوى من الصلاحيات لمشروعات المجموعة وكذلك المجموعة نفسها.
// Each group is associated with a number of users, each of which has a level of permissions for the group's projects and the group itself.
وتتراوح هذه المستويات من "`Guest`" («زائر»: للمسائل "`issues`" والمحادثات "`chat`" فقط)، إلى "`Owner`" («مالك»: للتحكم الكامل في المجموعة وأعضائها ومشروعاتها).
// These range from "`Guest`" (issues and chat only) to "`Owner`" (full control of the group, its members, and its projects).
وهذه المستويات كثيرة يصعب سردها هنا، لكنّ شاشة الإدارة في جت‌لاب فيها رابطا مفيدا.
// The types of permissions are too numerous to list here, but GitLab has a helpful link on the administration screen.

===== المشروعات
// ===== Projects

المشروع في جت‌لاب هو تقريبا مستودع جت واحد.
// A GitLab project roughly corresponds to a single Git repository.
ينتمي كل مشروع إلى مساحة أسماء واحدة، إما لمستخدم وإما لمجموعة.
// Every project belongs to a single namespace, either a user or a group.
وإذا كان المشروع ينتمي إلى مستخدم، فلدى مالك المشروع تحكم مباشر في من لديه حق الوصول إلى المشروع. وإذا كان ينتمي إلى مجموعة، فصلاحيات أعضاء المجموعة هي التي تحدد.
// If the project belongs to a user, the owner of the project has direct control over who has access to the project; if the project belongs to a group, the group's user-level permissions will take effect.

كل مشروع له مستوى ظهور، ليحدد من يستطيع رؤية صفحات هذا المشروع ومستودعه.
// Every project has a visibility level, which controls who has read access to that project's pages and repository.
فإذا كان المشروع «خصوصيا» ("`Private`")، فلا يظهر إلا لمن يحددهم مالك المشروع بالاسم.
// If a project is _Private_, the project's owner must explicitly grant access to specific users.
وإذا كان «داخليا» ("`Internal`")، فإنه لا يظهر إلا للمستخدمين الوالِجين. وإذا كان «عموميا» ("`Public`") فإنه يظهر للجميع.
// An _Internal_ project is visible to any logged-in user, and a _Public_ project is visible to anyone.
لاحظ أن هذا يتحكم في الوصول عبر `git fetch` وكذلك عند الوصول عبر واجهة الوب لهذا المشروع.
// Note that this controls both `git fetch` access as well as access to the web UI for that project.

===== الخطاطيف
// ===== Hooks

يدعم جت‌لاب الخطاطيف، على مستوى المشروع وعلى مستوى النظام ككل.
// GitLab includes support for hooks, both at a project or system level.
سيرسل خادوم جت‌لاب طلب HTTP بطريقة POST مع JSON وصفي كلما حدثَ حدثٌ مناسب. FIXME
// For either of these, the GitLab server will perform an HTTP POST with some descriptive JSON whenever relevant events occur.
وهذه طريقة عظيمة لربط مستودعات جت وخادوم جت‌لاب بباقي الأدوات الآلية التي تستخدمها ضمن التطوير، مثل خواديم التكامل المستمر CI، وغرف المحادثة، وأدوات النشر ("`deployment`"). FIXME
// This is a great way to connect your Git repositories and GitLab instance to the rest of your development automation, such as CI servers, chat rooms, or deployment tools.

==== الاستخدام الأساسي
// ==== Basic Usage

أول ما قد تود عمله على جت‌لاب هو إنشاء مشروع،
// The first thing you'll want to do with GitLab is create a new project.
وذلك بالضغط على رمز "`+`" على شريط الأدوات.
// You can do this by clicking on the "`+`" icon on the toolbar.
ستُسأل عن اسم المشروع، ومساحة الأسماء التي ينتمي إليها، ومستوى ظهوره.
// You'll be asked for the project's name, which namespace it should belong to, and what its visibility level should be.
معظم ما تحدده هنا ليس مستديمًا، فتستطيع تغييره فيما بعد من واجهة الإعدادات.
// Most of what you specify here isn't permanent, and can be changed later through the settings interface.
اضغط على "`Create Project`" («إنشاء المشروع») لإتمام العملية.
// Click "`Create Project`", and you're done.

وما إن يكون المشروع حيًّا، قد تود ربطه بمستودع محلي.
// Once the project exists, you'll probably want to connect it with a local Git repository.
يمكن التواصل مع أي مشروع عبر HTTPS أو SSH. ويمكنك استعمال أي منهما لإضافة مستودع جت بعيد FIXME في مستودعك المحلي.
// Each project is accessible over HTTPS or SSH, either of which can be used to configure a Git remote.
ستجد الروابط في أعلى الصفحة الرئيسية للمشروع.
// The URLs are visible at the top of the project's home page.
فمثلا تنفيذ هذا الأمر في مستودع محلي سينشئ بعيدا FIXME بالاسم `gitlab` مربوطا بالمشروع المستضاف:
// For an existing local repository, this command will create a remote named `gitlab` to the hosted location:

[source,console]
----
$ git remote add gitlab https://server/namespace/project.git
----

أما إذا لم يكن لديك نسخة محلية من المستودع، فيمكنك استنساخه بسهولة هكذا:
// If you don't have a local copy of the repository, you can simply do this:

[source,console]
----
$ git clone https://server/namespace/project.git
----

أيضا تتيح واجهة الوب طرائق مختلفة مفيدة للنظر إلى المستودع نفسه.
// The web UI provides access to several useful views of the repository itself.
فتُظهر الصفحة الرئيسية لكل مشروع آخر الأنشطة، والروابط التي في أعلى الصفحة تُريك ملفات المشروع وتاريخ إيداعاته.
// Each project's home page shows recent activity, and links along the top will lead you to views of the project's files and commit log.

==== التعاون FIXME
// ==== Working Together

أسهل طريقة للتعاون على مشروع على جت‌لاب هي إعطاء كل مستخدم إذن الدفع مباشرةً إلى المستودع.
// The simplest way of working together on a GitLab project is by giving each user direct push access to the Git repository.
يمكنك إضافة المستخدمين إلى المشروع بالذهاب إلى قسم الأعضاء ("`Members`") في إعدادات هذا المشروع، وربط المستخدمين الجدد بمستويات الوصول المناسبة. (مررنا على مستويات الوصول في <<_gitlab_groups_section>>).
// You can add a user to a project by going to the "`Members`" section of that project's settings, and associating the new user with an access level (the different access levels are discussed a bit in <<_gitlab_groups_section>>).
إذا كان للمستخدم مستوى وصول «مطور» ("`Developer`") فيستطيع دفع الإيداعات والفروع مباشرةً إلى المستودع.
// By giving a user an access level of "`Developer`" or above, that user can push commits and branches directly to the repository.

لكن طريقة أخرى للتعاون بغير ضم المطورين إلى المستودع هي طلبات الدمج ("`merge request`").
// Another, more decoupled way of collaboration is by using merge requests.
فتتيح هذه الميزة لأي مستخدم يستطيع رؤية المشروع أن يساهم فيه بطريقة محكومة.
// This feature enables any user that can see a project to contribute to it in a controlled way.
فالمستخدمون ذوو الوصول المباشر يمكنهم إنشاء فرع ودفع إيداعاتهم إليه ثم إنشاء طلب لدمج فرعهم في الفرع الرئيس أو أي فرع آخر.
// Users with direct access can simply create a branch, push commits to it, and open a merge request from their branch back into `master` or any other branch.
أما المستخدمون الذين ليس لديهم إذن الدفع للمستودع، فيمكنهم «اشتقاق» ("`fork`") المستودع لإنشاء نسختهم الخاصة منه، ودفع إيداعاتهم إلى نسختهم _الخاصة بهم_، ثم إنشاء طلب لدمج  اشتقاقهم في المشروع الأصلي.
// Users who don't have push permissions for a repository can "`fork`" it to create their own copy, push commits to _their_ copy, and open a merge request from their fork back to the main project.
يسمح هذا النموذج للمالك بالتحكم الكامل في كل ما يدخل المستودع ومتى يدخل، وفي الوقت نفسه يسمح بمساهمات المستخدمين غير الموثوق فيهم.
// This model allows the owner to be in full control of what goes into the repository and when, while allowing contributions from untrusted users.

طلبات الدمج والمسائل FIXME هما أهم وحدات النقاشات الطويلة في جت‌لاب.
// Merge requests and issues are the main units of long-lived discussion in GitLab.
فكل طلب دمج يسمح بنقاش على كل سطر من سطور التعديل المقترح (والذي يدعم نوعا خفيفا من مراجعة الكود)، إضافةً إلى نقاش عام.
// Each merge request allows a line-by-line discussion of the proposed change (which supports a lightweight kind of code review), as well as a general overall discussion thread.
يمكن تكليف مستخدم بإتمام طلب دمج أو مسألة، أو جعلهما ضمن مرحلة ("`milestone`").
// Both can be assigned to users, or organized into milestones.

ركّز هذا الفصل في معظمه على خصائص جت‌لاب المرتبطة بـجت. ولكنه مشروع ناضج ومكتمل الخصائص، ويتيح ميزات أخرى ليساعد فريقك في العمل معا، مثل موسوعات المشروعات وأدوات رعاية الأنظمة.
// This section is focused mainly on the Git-related features of GitLab, but as a mature project, it provides many other features to help your team work together, such as project wikis and system maintenance tools.
من محاسن جت‌لاب أنك ما إن تتم إعداد الخادوم وتشغيله، فيندر أن تحتاج إلى تعديل ملف تهيئة أو الوصول إلى الخادوم عبر SSH؛ فواجهة الوب تتيح معظم أفعال الإدارة والاستخدام العام.
// One benefit to GitLab is that, once the server is set up and running, you'll rarely need to tweak a configuration file or access the server via SSH; most administration and general usage can be done through the in-browser interface.
