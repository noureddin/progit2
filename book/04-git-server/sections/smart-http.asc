=== ✨ ميفاق HTTP الذكي
// === Smart HTTP

(((serving repositories, HTTP)))
لدينا الآن وصولا مستوثَقا عبر SSH ووصولا غير مستوثَق عبر `git://`، ولكن يوجد أيضا ميفاق يمكنه عمل كِلا الأمرين في وقت واحد.
// We now have authenticated access through SSH and unauthenticated access through `git://`, but there is also a protocol that can do both at the same time.
إعداد HTTP الذكي هو ببساطة مجرد تفعيل بُرَيمج CGI الآتي مع جت المسمى `git-http-backend` على الخادوم.(((git commands, "http-backend")))
// Setting up Smart HTTP is basically just enabling a CGI script that is provided with Git called `git-http-backend` on the server.(((git commands, "http-backend")))
يقرأ هذا البريمج المسار والترويسات (headers) التي يرسلها أمر الاستحضار `git fetch` أو الدفع `git push` إلى رابط HTTP ويحدد إذا كان العميل يستطيع التواصل عبر HTTP (وهذا صحيح لأي عميل جت منذ الإصدارة 1.6.6).
// This CGI will read the path and headers sent by a `git fetch` or `git push` to an HTTP URL and determine if the client can communicate over HTTP (which is true for any client since version 1.6.6).
وإذا رأي البريمج أن العميل ذكي، فسيتواصل معه بذكاء؛ وإلا فسيتواصل معه بالميفاق البليد (ولذا فهو متوافق مع الإصدارات القديمة التي تريد القراءة فحسب).
// If the CGI sees that the client is smart, it will communicate smartly with it; otherwise it will fall back to the dumb behavior (so it is backward compatible for reads with older clients).

لنرَ إعدادا بسيطا جدا.
// Let's walk through a very basic setup.
سنستخدم فيه أباتشي (Apache) كخادوم CGI.
// We'll set this up with Apache as the CGI server.
إن لم يكن لديك أباتشي مُعدًّا، فيمكنك إعداده على حاسوب لينكسي بفعل شيءٍ كهذا:(((Apache)))
// If you don't have Apache setup, you can do so on a Linux box with something like this:(((Apache)))

[source,console]
----
$ sudo apt-get install apache2 apache2-utils
$ a2enmod cgi alias env
----

هذا أيضا يفعّل وِحدات `mod_cgi` و `mod_alias` و `mod_env`، والتي تحتاجها جميعها حتى يعمل هذا الإعداد بشكل صحيح.
// This also enables the `mod_cgi`, `mod_alias`, and `mod_env` modules, which are all needed for this to work properly.

سنحتاج أيضا إلى ضبط مجموعة المستخدمين اليونكسية الخاصة بمجلدات `/srv/git` إلى `www-data`، حتى يتسنّى لخادوم الوب قراءة المستودعات وتحريرها، لأن عملية أباتشي التي تشغّل بُريمج CGI الخاص بنا تعمل (مبدئيا) تحت هذا المستخدم:
// You'll also need to set the Unix user group of the `/srv/git` directories to `www-data` so your web server can read- and write-access the repositories, because the Apache instance running the CGI script will (by default) be running as that user:

[source,console]
----
$ chgrp -R www-data /srv/git
----

وكذلك سنحتاج إلى إضافة بعض الأشياء إلى تهيئة أباتشي لتشغيل `git-http-backend` معالجًا ("`handler`") لأي شيء يأتي من المسار `/git` على خادومك.
// Next we need to add some things to the Apache configuration to run the `git-http-backend` as the handler for anything coming into the `/git` path of your web server.

[source,console]
----
SetEnv GIT_PROJECT_ROOT /srv/git
SetEnv GIT_HTTP_EXPORT_ALL
ScriptAlias /git/ /usr/lib/git-core/git-http-backend/
----

إن أهملت متغير البيئة `GIT_HTTP_EXPORT_ALL`، فلن يتيح جت للعملاء غير المستوثَقين إلا تلك المستودعات التي فيها الملف `git-daemon-export-ok`، تماما مثلما فعل عفريت جت.
// If you leave out `GIT_HTTP_EXPORT_ALL` environment variable, then Git will only serve to unauthenticated clients the repositories with the `git-daemon-export-ok` file in them, just like the Git daemon did.

وأخيرا سنحتاج إلى إخبار أباتشي أن يسمح بالطلبات إلى `git-http-backend` وأن يستوثق عمليات التحرير بطريقةٍ ما، مثلا بك‍تلة `Auth` كهذه:
// Finally you'll want to tell Apache to allow requests to `git-http-backend` and make writes be authenticated somehow, possibly with an Auth block like this:

[source,console]
----
<Files "git-http-backend">
    AuthType Basic
    AuthName "Git Access"
    AuthUserFile /srv/git/.htpasswd
    Require expr !(%{QUERY_STRING} -strmatch '*service=git-receive-pack*' || %{REQUEST_URI} =~ m#/git-receive-pack$#)
    Require valid-user
</Files>
----

يتطلب هذا إنشاء ملف `.htpasswd` فيه كلمات المرور لجميع المستخدمين المقبولين.
// That will require you to create a `.htpasswd` file containing the passwords of all the valid users.
هذا مثال على إضافة المستخدم "`schacon`" إليه:
// Here is an example of adding a "`schacon`" user to the file:

[source,console]
----
$ htpasswd -c /srv/git/.htpasswd schacon
----

لدى أباتشي طرائق عديدة لاستيثاق المستخدمين؛ عليك اختيار إحداها وتطبيقها.
// There are tons of ways to have Apache authenticate users, you'll have to choose and implement one of them.
ليس هذا إلا أيسر مثال استطعنا الإتيان به.
// This is just the simplest example we could come up with.
ومن شبه المؤكد أنك أيضا ستحتاج إلى إعداد هذا عبر SSH حتى تكون هذه البيانات كلها معمّاة.
// You'll also almost certainly want to set this up over SSL so all this data is encrypted.

لا نود الخوض عميقا في دوامة دقائق تهيئة أباتشي، لأنك قد تستخدم خادوما آخر أو أن لديك احتياجات استيثاق مختلفة.
// We don't want to go too far down the rabbit hole of Apache configuration specifics, since you could well be using a different server or have different authentication needs.
وإنما الأمر أن مع جت بريمج CGI اسمه `git-http-backend`، والذي عند ندائه يفعل كل المفاوضات لإرسال واستقبال البيانات عبر HTTP.
// The idea is that Git comes with a CGI called `git-http-backend` that when invoked will do all the negotiation to send and receive data over HTTP.
ولكنه لا ينفذ أي استيثاق بنفسه. لكن هذا سهل التحكم فيه في مرحلة خادوم الوب الذي يناديه. FIXME
// It does not implement any authentication itself, but that can easily be controlled at the layer of the web server that invokes it.
يمكنك فعل هذا مع ربما أي خادوم وب يدعم CGI، لذا فانطلق مع الخادوم الذي تعرفه حق المعرفة.
// You can do this with nearly any CGI-capable web server, so go with the one that you know best.

[NOTE]
====
لمزيد من المعلومات عن تهيئة الاستيثاق في أباتشي، انظر وثائق أباتشي (بالإنجليزية) هنا: https://httpd.apache.org/docs/current/howto/auth.html[^].
// For more information on configuring authentication in Apache, check out the Apache docs here: https://httpd.apache.org/docs/current/howto/auth.html[^].
====
