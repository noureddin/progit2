[[_getting_git_on_a_server]]
=== ✨ تثبيت جت على خادوم
// === Getting Git on a Server

سنتناول الآن إعداد خدمة جت لتشغيل هذه الموافيق على خادومك.
// Now we'll cover setting up a Git service running these protocols on your own server.

[NOTE]
====
سنعرض هنا الأوامر والخطوات اللازمة لتثبيت أساسي مبسط على خادوم لينكسي، لكن ممكن أيضا تشغيل هذه الخدمات على {ماك} أو ويندوز.
// Here we'll be demonstrating the commands and steps needed to do basic, simplified installations on a Linux-based server, though it's also possible to run these services on macOS or Windows servers.
وفي الحقيقة إعداد خادوم إنتاجي ضمن بنيتك التحتية بالتأكيد سيشمل اختلافات في التدابير الأمنية أو أدوات نظام التشغيل، ولكننا نرجو أن يعطيك هذا فكرة عامة عما ينطوي عليه الأمر.
// Actually setting up a production server within your infrastructure will certainly entail differences in security measures or operating system tools, but hopefully this will give you the general idea of what's involved.
====

حتى تعد أي خادوم جت، عليك أولا تصدير مستودع موجود إلى مستودع جديد مجرد، والمستودع المجرد هو مستودع ليس فيه مجلد عمل.
// In order to initially set up any Git server, you have to export an existing repository into a new bare repository -- a repository that doesn't contain a working directory.
هذا في المعتاد عملية سهلة.
// This is generally straightforward to do.
فلاستنساخ مستودع لإنشاء مستودع جديد مجرد، نفّذ أمر الاستنساخ بالخيار `--bare` («مجرد»):(((git commands, clone, bare)))
// In order to clone your repository to create a new bare repository, you run the clone command with the `--bare` option.(((git commands, clone, bare)))
والعُرف أن أسماء مجلدات المستودعات المجردة تنتهي باللاحقة `.git`، مثل هذا:
// By convention, bare repository directory names end with the suffix `.git`, like so:

[source,console]
----
$ git clone --bare my_project my_project.git
Cloning into bare repository 'my_project.git'...
done.
----

سيكون لديك الآن نسخة من بيانات مجلد جت في مجلد `my_project.git`.
// You should now have a copy of the Git directory data in your `my_project.git` directory.

هذا يكافئ تقريبا شيئا مثل هذا:
// This is roughly equivalent to something like:

[source,console]
----
$ cp -Rf my_project/.git my_project.git
----

توجد بعض الاختلافات الطفيفة في ملف التهيئة ("`config`")، ولكن لغرضنا اليوم فيكادا يتطابقان.
// There are a couple of minor differences in the configuration file but, for your purpose, this is close to the same thing.
فهذا الأخير يأخذ مستودع جت وحده بغير مجلد عمله وينشئ مجلدا مخصصا له وحده.
// It takes the Git repository by itself, without a working directory, and creates a directory specifically for it alone.

[[_bare_repo]]
==== وضع المستودع المجرد على خادوم
// ==== Putting the Bare Repository on a Server

الآن وقد صار لديك نسخة مجردة من مستودعك، فلا تحتاج سوى وضعه على الخادوم وضبط الموافيق (البروتوكولات).
// Now that you have a bare copy of your repository, all you need to do is put it on a server and set up your protocols.
لنقُل إنك أعددت خادوما يسمى `git.example.com`، ولديك وصول SSH له، وتريد تخزين كل مستودعات جت الخاصة بك في مجلد `/srv/git` فيه.
// Let's say you've set up a server called `git.example.com` to which you have SSH access, and you want to store all your Git repositories under the `/srv/git` directory.
إذا كان مجلد `/srv/git` موجودا على هذا الخادوم، يمكنك إعداد مستودعك الجديد بنسخ مستودعك المجرد إليه:
// Assuming that `/srv/git` exists on that server, you can set up your new repository by copying your bare repository over:

[source,console]
----
$ scp -r my_project.git user@git.example.com:/srv/git
----

يستطيع الآن المستخدمين الذين لديهم إذن قراءة مجلد `/srv/git` عبر SSH أن يستنسخوا مستودعك بالأمر:
// At this point, other users who have SSH-based read access to the `/srv/git` directory on that server can clone your repository by running:

[source,console]
----
$ git clone user@git.example.com:/srv/git/my_project.git
----

وإذا كان لمستخدمٍ إذن تحرير هذا المجلد، ودخل عبر SSH إلى الخادوم، فسيستطيع الدفع إليه متى شاء.
// If a user SSHs into a server and has write access to the `/srv/git/my_project.git` directory, they will also automatically have push access.

وسيضيف جت إذن التحرير للمجموعة إلى المستودع بطريقة صحيحة إذا استخدمت خيار `--shared` («مشترك») مع أمر الابتداء `git init`.
// Git will automatically add group write permissions to a repository properly if you run the `git init` command with the `--shared` option.
لاحظ أن هذا لن يُتلف أي إيداعات أو إشارات أو أي شيء آخر.(((git commands, init, bare)))
// Note that by running this command, you will not destroy any commits, refs, etc. in the process.(((git commands, init, bare)))

[source,console]
----
$ ssh user@git.example.com
$ cd /srv/git/my_project.git
$ git init --bare --shared
----

قد رأيت كم هو سهل إنشاء نسخة مجردة من مستودع جت ووضعها على خادوم عندكم وصول SSH إليه.
// You see how easy it is to take a Git repository, create a bare version, and place it on a server to which you and your collaborators have SSH access.
فيمكنكم الآن التعاون في مشروع واحد.
// Now you're ready to collaborate on the same project.

مهمٌ ملاحظة أنك حقا لا تحتاج غير هذا لتشغيل خادوم جت مفيد يصل إليه العديدون: تنشئ حسابات SSH، وتضع مستودعًا مجردًا في مكانٍ للجميع إذن قراءته وتحريره.
// It's important to note that this is literally all you need to do to run a useful Git server to which several people have access -- just add SSH-able accounts on a server, and stick a bare repository somewhere that all those users have read and write access to.
وتمت العملية بنجاح؛ لا شيء آخر مطلوب.
// You're ready to go -- nothing else needed.

سنرى في الفصول القليلة التالية كيف يمكنك التوسع لإعدادات FIXME أكثر تعقيدا.
// In the next few sections, you'll see how to expand to more sophisticated setups.
وسيشمل هذا عدم الاضطرار إلى إنشاء حساب مستخدم لكل مستخدم، وإضافة إذن القراءة للجميع للمستودعات، وإعداد واجهات الوب، والمزيد.
// This discussion will include not having to create user accounts for each user, adding public read access to repositories, setting up web UIs and more.
لكن تذكر أن للتعاون مع بعض الناس على مشروع خصوصي، كل ما _تحتاجه_ هو خادوم SSH ومستودع مجرد.
// However, keep in mind that to collaborate with a couple of people on a private project, all you _need_ is an SSH server and a bare repository.

==== الترتيبات الصغيرة FIXME
// ==== Small Setups

إذا كانت شركتك صغيرة أو كنت تجرب جت في مؤسسة ولستم إلا عددا قليلا من المطورين، فقد تكون الأمور يسيرة عليك.
// If you're a small outfit or are just trying out Git in your organization and have only a few developers, things can be simple for you.
فأحد أعقد مناحي إعداد خادوم جت هو إدارة المستخدمين.
// One of the most complicated aspects of setting up a Git server is user management.
فإن أردت لبعض المستودعات ألا يقرأها إلا مستخدمون معينون وألا يحررها إلا جماعة أخرى، فقد تجد ترتيب الأذونات والوصول أصعب.
// If you want some repositories to be read-only for certain users and read/write for others, access and permissions can be a bit more difficult to arrange.

===== الوصول عبر SSH
// ===== SSH Access

(((serving repositories, SSH)))
إذا كان لديك خادومٌ يستطيع جميع المطورين الوصول إليه عبر SSH، فمن الأسهل عموما إعداد مستودعك الأول عليه، لأنك بهذا لن تحتاج إلى عمل شيء تقريبا (كما شرحنا في الفصل السابق).
// If you have a server to which all your developers already have SSH access, it's generally easiest to set up your first repository there, because you have to do almost no work (as we covered in the last section).
وإذا احتجت إلى أذونات وصول أعقد لمستودعاتك، فيمكنك تحقيقها بأذونات نظام الملفات العادية الخاص بنظام تشغيل خادومك.
// If you want more complex access control type permissions on your repositories, you can handle them with the normal filesystem permissions of your server's operating system.

وإذا أردت وضع مستودعاتك على خادوم ليس فيه حساب لكل مطور يحتاج إذن التحرير في فريقك، فعليك إعداد وصول SSH لكلٍ منهم.
// If you want to place your repositories on a server that doesn't have accounts for everyone on your team for whom you want to grant write access, then you must set up SSH access for them.
إذا كنت تريد فعل هذا على خادوم لديك، فسنفترض أن لديك بالفعل خادوم SSH مثبت عليه، وأنه وسيلتك للتواصل مع الخادوم الجهاز.
// We assume that if you have a server with which to do this, you already have an SSH server installed, and that's how you're accessing the server.

توجد أكثر من طريقة لإعطاء إذن الوصول لكل واحد في فريقك.
// There are a few ways you can give access to everyone on your team.
الأولى هي إعداد حساب لكل واحد، وهي عملية سهلة لكن قد تكون مرهقة.
// The first is to set up accounts for everybody, which is straightforward but can be cumbersome.
فربما لا تريد تنفيذ `adduser` (أو بديله المحتمل `useradd`) والاضطرار إلى ضبط كلمة مرور مؤقتة لكل مستخدم جديد.
// You may not want to run `adduser` (or the possible alternative `useradd`) and have to set temporary passwords for every new user.

الطريقة الثانية هي إنشاء حساب مستخدم `git` واحد على الجهاز، وطلب مفتاح SSH العمومي من كل مستخدم تريد إعطاءه إذن التحرير، ثم إضافة هذه المفاتيح إلى ملف `~/.ssh/authorized_keys` في حساب `git` الجديد هذا.
// A second method is to create a single 'git' user account on the machine, ask every user who is to have write access to send you an SSH public key, and add that key to the `~/.ssh/authorized_keys` file of that new 'git' account.
وعندئذٍ سيستطيع كل شخص الوصول إلى ذلك الجهاز عبر حساب `git`.
// At that point, everyone will be able to access that machine via the 'git' account.
وهذا لا يؤثر على بيانات الإيداعات بأي شكل؛ فحساب مستخدم SSH الذي تتصل عبره لا يؤثر على الإيداعات التي تسجلها.
// This doesn't affect the commit data in any way -- the SSH user you connect as doesn't affect the commits you've recorded.

طريقة أخرى هي أن يستوثق خادوم SSH الخاص بك من خادوم LDAP أو مصدر استيثاق مركزي آخر أعددته.
// Another way to do it is to have your SSH server authenticate from an LDAP server or some other centralized authentication source that you may already have set up.
وما دام لكل مستخدم وصول صَدَفي إلى الجهاز، فأي آلية استيثاق SSH تخطر على بالك ستعمل.
// As long as each user can get shell access on the machine, any SSH authentication mechanism you can think of should work.
