[[_git_hooks]]
=== ✋ خطاطيف جت
// === Git Hooks

(((hooks)))
لدى جت، مثل أنظمة إدارة نسخ كثيرة أخرى، طريقة لتشغيل بُرَيْمِجات (scripts) مخصصة عند أحداث معينة مهمة.
// Like many other Version Control Systems, Git has a way to fire off custom scripts when certain important actions occur.
وتسمى الخطاطيف، وتقسم نوعين: خطاطيف عند العميل، وخطاطيف على الخادوم.
// There are two groups of these hooks: client-side and server-side.
تستثير خطاطيفَ العميل عملياتٌ مثل الإيداع والدمج، أما خطاطيفَ الخادوم فالعملياتُ الشبكية مثل استقبال الإيداعات المدفوعة.
// Client-side hooks are triggered by operations such as committing and merging, while server-side hooks run on network operations such as receiving pushed commits.
ويمكنك استخدام الخطاطيف لأسباب عديدة مختلفة.
// You can use these hooks for all sorts of reasons.

==== تركيب خطاف
// ==== Installing a Hook

تحفظ جميع الخطاطيف في مجلد `hooks` داخل مجلد جت.
// The hooks are all stored in the `hooks` subdirectory of the Git directory.
أي في `.git/hooks` في معظم المشروعات.
// In most projects, that's `.git/hooks`.
وعندما تبتدئ مستودعا جديدا بأمر الابتداء `git init`، فإن جت يملأ مجلد الخطاطيف بأمثلة بُريمجات (والتي قد يفيد بعضها بغير تعديل) والتي توثق مدخلات كل بريمج.
// When you initialize a new repository with `git init`, Git populates the hooks directory with a bunch of example scripts, many of which are useful by themselves; but they also document the input values of each script.
أكثر الأمثلة مكتوبة بلغة الصدفة (shell)، والبعض بلغة Perl. ولكن أي ملف تنفيذي بالاسم المناسب سيعمل؛ اكتبه بـ Python أو بـ Ruby أو بما تشاء.
// All the examples are written as shell scripts, with some Perl thrown in, but any properly named executable scripts will work fine – you can write them in Ruby or Python or whatever language you are familiar with.
وإذا أردت استخدام بُريمجات الخطاطيف الآتية مع جت، عليك تغيير أسمائهم، فأسماؤهم جميعا تنتهي بنقطة ثم `sample`.
// If you want to use the bundled hook scripts, you'll have to rename them; their file names all end with `.sample`.

لتفعيل بُريمج خطاف، ضع ملفا تنفيذيا بالاسم المناسب (بغير امتداد) في مجلد `hooks` في مجلد `.git` في مستودعك،
// To enable a hook script, put a file in the `hooks` subdirectory of your `.git` directory that is named appropriately (without any extension) and is executable.
ومن وقتئذٍ فصاعدا سيُنفّذ.
// From that point forward, it should be called.
نمر الآن على أهم الخطاطيف ونسرد أسماءها.
// We'll cover most of the major hook filenames here.

==== خطاطيف العميل
// ==== Client-Side Hooks

خطاطيف كثيرة تُنفّذ عند العميل.
// There are a lot of client-side hooks.
يقسمهم هذا الفصل إلى أقسام ثلاثة لتيسير الشرح: خطاطيف الإيداع، وخطاطيف البريد، والخطاطيف الأخرى.
// This section splits them into committing-workflow hooks, email-workflow scripts, and everything else.

[NOTE]
====
مهم جدا أن تعلم أن خطاطيف العميل *ليست* تُنسخ عند استنساخ المستودع.
// It's important to note that client-side hooks are *not* copied when you clone a repository.
فإذا كان مقصودك من هذه البُريمجات أن تفرض سياسة معينة، فربما تفضّل فعل هذا على الخادوم؛ انظر المثال في <<ch08-customizing-git#_an_example_git_enforced_policy>>.
// If your intent with these scripts is to enforce a policy, you'll probably want to do that on the server side; see the example in <<ch08-customizing-git#_an_example_git_enforced_policy>>.
====

===== خطاطيف الإيداع
// ===== Committing-Workflow Hooks

الخطاطيف الأربعة الأولى تخص عملية الإيداع.
// The first four hooks have to do with the committing process.

يعمل خطاف ما قبل الإيداع (`pre-commit`) أولا، حتى قبل أن تكتب رسالة الإيداع.
// The `pre-commit` hook is run first, before you even type in a commit message.
ويستخدم لفحص اللقطة التي ستودعها للتأكد من أنك لم تنسَ شيئا، أو للتأكد من أنك شغّلت الاختبارات، FIXME أو للتأكد مما تريد التأكد منه عموما.
// It's used to inspect the snapshot that's about to be committed, to see if you've forgotten something, to make sure tests run, or to examine whatever you need to inspect in the code.
وإنهاء تنفيذ هذا البُريمج بقيمة خروج غير الصفر يوقف الإيداع، FIXME على أنك تستطيع تخطيه بالأمر `git commit --no-verify`.
// Exiting non-zero from this hook aborts the commit, although you can bypass it with `git commit --no-verify`.
يمكّنك هذا من تنسيق الكود (مثل تنفيذ `lint` أو ما يكافئه)، أو التأكد من عدم إنهاء السطور بمسافات زائدة (وهذا ما يفعله المثال الآتي مع جت)، أو فحص وجود التوثيق المناسب للدوال الجديدة.
// You can do things like check for code style (run `lint` or something equivalent), check for trailing whitespace (the default hook does exactly this), or check for appropriate documentation on new methods.

أما خطاف تجهيز رسالة الإيداع (`prepare-commit-msg`) فيعمل قبل فتح محرر رسالة الإيداع ولكن بعد إنشاء الرسالة المبدئية،
// The `prepare-commit-msg` hook is run before the commit message editor is fired up but after the default message is created.
حتى يتيح لك تعديل الرسالة المبدئية قبل أن يراها مؤلف الإيداع.
// It lets you edit the default message before the commit author sees it.
ويُرسل إلى هذا الخطاف ثلاثة معاملات: مسار الملف المؤقت الذي فيه رسالة الإيداع، ونوع الإيداع، وبصمة SHA-1 للإيداع إذا كان إيداعا مصححا (بالخيار `--amend`).
// This hook takes a few parameters: the path to the file that holds the commit message so far, the type of commit, and the commit SHA-1 if this is an amended commit.
وعموما ليس هذا الخطاف كبير النفع للإيداعات العادية، لكنه يفيد الإيداعات التي رسالتها المبدئية مولدة آليًّا، مثل رسائل الإيداعات المقوْلبة، FIXME وإيداعات الدمج، والإيداعات المهروسة، FIXME والإيداعات المصححة.
// This hook generally isn't useful for normal commits; rather, it's good for commits where the default message is auto-generated, such as templated commit messages, merge commits, squashed commits, and amended commits.
وقد تستخدمه جنبا إلى جنب مع قالب إيداع FIXME لإدراج معلومات برمجيا.
// You may use it in conjunction with a commit template to programmatically insert information.

وأما خطاف رسالة الإيداع (`commit-msg`) فيقبل معاملًا واحدًا، وهو أيضا مسار الملف المؤقت الذي فيه رسالة الإيداع التي كتبها المطوّر.
// The `commit-msg` hook takes one parameter, which again is the path to a temporary file that contains the commit message written by the developer.
وإن أنهى تنفيذه بقيمة خروج غير الصفر فإن جت يوقف الإيداع. فيمكنك إذًا استخدامه لتحقق حالة مشروعك أو رسالة الإيداع قبل السماح بالإيداع أن يتم.
// If this script exits non-zero, Git aborts the commit process, so you can use it to validate your project state or commit message before allowing a commit to go through.
وسنرى في الفصل الأخير من هذا الباب شرح مثال لاستخدام هذا الخطاف لتحقق موافقة رسائل الإيداع لنمط محدد.
// In the last section of this chapter, we'll demonstrate using this hook to check that your commit message is conformant to a required pattern.

أما خطاف ما بعد الإيداع (`post-commit`) فيعمل بعد تمام عملية الإيداع بكاملها.
// After the entire commit process is completed, the `post-commit` hook runs.
ولا يقبل أي معاملات. لكن يمكن جلب الإيداع الأخير بسهولة بالأمر `git log -1 HEAD`.
// It doesn't take any parameters, but you can easily get the last commit by running `git log -1 HEAD`.
وعموما يُستخدم هذا البُريمج للإشعارات أو ما يشابهها.
// Generally, this script is used for notification or something similar.

[[_email_hooks]]
===== خطاطيف البريد
// ===== Email Workflow Hooks

يمكنك إعداد خطاطيف ثلاثة لأساليب سير العمل بالبريد.
// You can set up three client-side hooks for an email-based workflow.
جميعها يناديها الأمر `git am`، فإذا لم يكن هذا الأمر في طريقة سير عملك فتجاوز FIXME إلى الفصل التالي.
// They're all invoked by the `git am` command, so if you aren't using that command in your workflow, you can safely skip to the next section.
وإذا كنت تقبل الرقع المُعدَّة بالأمر `git format-patch` عبر البريد الإلكتروني، فقد يفيدك بعضها.
// If you're taking patches over email prepared by `git format-patch`, then some of these may be helpful to you.

أول خطاف ينفّذ هو خطاف رسالة تطبيق الرقعة (`applypatch-msg`).
// The first hook that is run is `applypatch-msg`.
ويقبل معاملا واحدا هو مسار الملف المؤقت الذي فيه رسالة الإيداع المقترحة.
// It takes a single argument: the name of the temporary file that contains the proposed commit message.
وإنهاء تنفيذه بقيمة خروج غير الصفر يوقف الرقعة.
// Git aborts the patch if this script exits non-zero.
فيمكنك استخدامه للتأكد من أن رسالة الإيداع صحيحة التنسيق، أو لاستنظام (normalize) الرسالة بتعديلها في مكانها.
// You can use this to make sure a commit message is properly formatted, or to normalize the message by having the script edit it in place.

والتالي هو خطاف ما قبل إيداع الرقعة (`pre-applypatch`).
// The next hook to run when applying patches via `git am` is `pre-applypatch`.
وقد يسبب اللبس أنه، خلافًا لاسمه الأصلي بالإنجليزية، يعمل _بعد_ تطبيق الرقعة ولكن قبل صنع الإيداع، فيمكنك استخدامه لفحص اللقطة قبل إيداعها.
// Somewhat confusingly, it is run _after_ the patch is applied but before a commit is made, so you can use it to inspect the snapshot before making the commit.
فيمكنك مثلا تشغيل الاختبارات FIXME أو فحص شجرة العمل فيه.
// You can run tests or otherwise inspect the working tree with this script.
وإن افتقدت شيئا أو فشل اختبار، فإن إنهاء تنفيذ هذا البُريمج بقيمة خروج غير الصفر يوقف أمر `git am` بغير إيداع الرقعة.
// If something is missing or the tests don't pass, exiting non-zero aborts the `git am` script without committing the patch.

The last hook to run during a `git am` operation is `post-applypatch`, which runs after the commit is made.
You can use it to notify a group or the author of the patch you pulled in that you've done so.
You can't stop the patching process with this script.

[[_other_client_hooks]]
===== خطاطيف العميل الأخرى
// ===== Other Client Hooks

The `pre-rebase` hook runs before you rebase anything and can halt the process by exiting non-zero.
You can use this hook to disallow rebasing any commits that have already been pushed.
The example `pre-rebase` hook that Git installs does this, although it makes some assumptions that may not match with your workflow.

The `post-rewrite` hook is run by commands that replace commits, such as `git commit --amend` and `git rebase` (though not by `git filter-branch`).
Its single argument is which command triggered the rewrite, and it receives a list of rewrites on `stdin`.
This hook has many of the same uses as the `post-checkout` and `post-merge` hooks.

After you run a successful `git checkout`, the `post-checkout` hook runs; you can use it to set up your working directory properly for your project environment.
This may mean moving in large binary files that you don't want source controlled, auto-generating documentation, or something along those lines.

The `post-merge` hook runs after a successful `merge` command.
You can use it to restore data in the working tree that Git can't track, such as permissions data.
This hook can likewise validate the presence of files external to Git control that you may want copied in when the working tree changes.

The `pre-push` hook runs during `git push`, after the remote refs have been updated but before any objects have been transferred.
It receives the name and location of the remote as parameters, and a list of to-be-updated refs through `stdin`.
You can use it to validate a set of ref updates before a push occurs (a non-zero exit code will abort the push).

Git occasionally does garbage collection as part of its normal operation, by invoking `git gc --auto`.
The `pre-auto-gc` hook is invoked just before the garbage collection takes place, and can be used to notify you that this is happening, or to abort the collection if now isn't a good time.

==== خطاطيف الخادوم
// ==== Server-Side Hooks

بالإضافة إلى الخطاطيف التي تنفّذ عند العميل، يمكنك استخدام الخطاطيف التي تنفّذ على الخادوم، إذا كنت مدير أنظمة، حتى تنْفِذ سياسة مشروعك المختارة.
// In addition to the client-side hooks, you can use a couple of important server-side hooks as a system administrator to enforce nearly any kind of policy for your project.
وتعمل هذه البُريمجات قبل الدفع إلى خادومك وبعده.
// These scripts run before and after pushes to the server.
فتستطيع الخطاطيف القبلية رفض الدفع بأن تنهي تنفيذها بقيمة خروج غير الصفر في أي وقت، ثم تطبع رسالة خطأ إلى العميل. ويمكنك إعداد سياسة دفع سهلة أو معقدة كما تشاء.
// The pre hooks can exit non-zero at any time to reject the push as well as print an error message back to the client; you can set up a push policy that's as complex as you wish.

=====  خطاف ما قبل الاستلام `pre-receive`
// ===== `pre-receive`

أول بُريمج يعمل عند استقبل دفع من عميل هو خطاف ما قبل الاستلام (`pre-receive`).
// The first script to run when handling a push from a client is `pre-receive`.
والذي يقرأ من الدخل المعياري (stdin) قائمةَ الإشارات التي تُدفع. فإذا أنهى تنفيذه بقيمة خروج غير الصفر، لم تُقبل أيٌّ منهم.
// It takes a list of references that are being pushed from stdin; if it exits non-zero, none of them are accepted.
// فيمكنك استخدامه مثلا للتيقن من أن الإشارات المحدثة ليس أحدها
You can use this hook to do things like make sure none of the updated references are non-fast-forwards, or to do access control for all the refs and files they're modifying with the push.

===== خطاف التحديث `update`
// ===== `update`

خطاف التحديث (`update`) يشبه كثيرا خطاف ما قبل الاستلام (`pre-receive`)، إلا أنه ينفّذ مرة لكل فرع يريد تحديثه الذي يدفع.
// The `update` script is very similar to the `pre-receive` script, except that it's run once for each branch the pusher is trying to update.
فإذا كان يدفع إلى عدة فروع، فإن بُريمج خطاف ما قبل الاستلام (`pre-receive`) سينفّذ مرة واحدة فقط، أما بُريمج خطاف التحديث (`update`) سينفّذ مرة لكل فرع يدفع إليه.
// If the pusher is trying to push to multiple branches, `pre-receive` runs only once, whereas `update` runs once per branch they're pushing to.
وبدلا من القراءة من الدخل المعياري، فإنه يقبل ثلاثة معاملات: اسم الإشارة (الفرع)، وبصمة SHA-1 التي كانت تشير إليها الإشارة قبل الدفع، وبصمة SHA-1 التي يريد المستخدم دفعها.
// Instead of reading from stdin, this script takes three arguments: the name of the reference (branch), the SHA-1 that reference pointed to before the push, and the SHA-1 the user is trying to push.
فإذا أنهي البُريمج تنفيذه بقيمة خروج غير الصفر، فستُرفض هذه الإشارة وحدها. أما الإشارات الأخرى فلن تتأثر به وقد تقبل.
// If the `update` script exits non-zero, only that reference is rejected; other references can still be updated.

===== خطاف ما بعد الاستلام `post-receive`
// ===== `post-receive`

أما خطاف ما بعد الاستلام (`post-receive`) فيعمل بعد تمام العملية بكاملها، ويستخدم لتحديث الخدمات الأخرى أو تنبيه المستخدمين.
// The `post-receive` hook runs after the entire process is completed and can be used to update other services or notify users.
ويقرأ نفس المعطيات من الدخل المعياري مثل خطاف ما قبل الاستلام (`pre-receive`) تماما.
// It takes the same stdin data as the `pre-receive` hook.
أمثلة: إرسال بريد إلكتروني إلى قائمة، أو تنبيه خادوم تكامل مستمر، أو تحديث نظام تتبع بطاقات. FIXME فيمكنك تحليل رسائل الإيداع برمجيا لتعلم إن كانت بطاقة تحتاج إلى الفتح أو التعديل أو الغلق.
// Examples include emailing a list, notifying a continuous integration server, or updating a ticket-tracking system – you can even parse the commit messages to see if any tickets need to be opened, modified, or closed.
لن يُوقف هذا البريمج عمليةَ الدفع، لكن لن يقطع العميل اتصاله FIXME إلا عندما يتنهي، فاحذر أن تفعل شيئا قد يستغرق وقتا طويلا.
// This script can't stop the push process, but the client doesn't disconnect until it has completed, so be careful if you try to do anything that may take a long time.

[TIP]
====
إذا كنت تكتب بُريمج خطاف سيقرؤه الآخرون، فعليك بالخيارات الطويلة للأوامر؛ سوف تشكرنا بعد شهور من الآن.
// If you're writing a script/hook that others will need to read, prefer the long versions of command-line flags; six months from now you'll thank us.
====
